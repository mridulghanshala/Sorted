import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { TORUS_SAPPHIRE_NETWORK, FND_SERVER, MULTI_CLUSTER_NETWORKS, TORUS_LEGACY_NETWORK, METADATA_MAP } from '@toruslabs/constants';
import { fetchLocalConfig } from '@toruslabs/fnd-base';
import { get } from '@toruslabs/http-helpers';
import logger from 'loglevel';

const log = logger.getLogger("fnd");
class NodeDetailManager {
  constructor() {
    let {
      network = TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET,
      fndServerEndpoint,
      enableLogging = false
    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _defineProperty(this, "fndServerEndpoint", `${FND_SERVER}/node-details`);
    _defineProperty(this, "_currentEpoch", "1");
    _defineProperty(this, "_torusNodeEndpoints", []);
    _defineProperty(this, "_torusNodeRSSEndpoints", []);
    _defineProperty(this, "_torusNodeSSSEndpoints", []);
    _defineProperty(this, "_torusNodeTSSEndpoints", []);
    _defineProperty(this, "_torusNodePub", []);
    _defineProperty(this, "_torusIndexes", []);
    _defineProperty(this, "updated", void 0);
    _defineProperty(this, "network", void 0);
    this.network = network;
    this.updated = false;
    if (fndServerEndpoint) {
      this.fndServerEndpoint = fndServerEndpoint;
    }
    if (enableLogging) {
      log.enableAll();
    } else {
      log.disableAll();
    }
  }
  get _nodeDetails() {
    return {
      currentEpoch: this._currentEpoch,
      torusNodeEndpoints: this._torusNodeEndpoints,
      torusNodeSSSEndpoints: this._torusNodeSSSEndpoints,
      torusNodeRSSEndpoints: this._torusNodeRSSEndpoints,
      torusNodeTSSEndpoints: this._torusNodeTSSEndpoints,
      torusNodePub: this._torusNodePub,
      torusIndexes: this._torusIndexes,
      updated: this.updated
    };
  }
  async getNodeDetails(_ref) {
    let {
      verifier,
      verifierId
    } = _ref;
    try {
      if (this.updated && !MULTI_CLUSTER_NETWORKS.includes(this.network)) return this._nodeDetails;
      try {
        const {
          nodeDetails
        } = await get(`${this.fndServerEndpoint}?network=${this.network}&verifier=${verifier}&verifierId=${verifierId}`);
        this.setNodeDetails(nodeDetails);
        return this._nodeDetails;
      } catch (error) {
        log.error("Failed to fetch node details from server, using local.", error);
      }
      const nodeDetails = fetchLocalConfig(this.network);
      if (!nodeDetails) throw new Error("Failed to fetch node details");
      this.setNodeDetails(nodeDetails);
      return this._nodeDetails;
    } catch (error) {
      log.error("Failed to fetch node details", error);
      throw error;
    }
  }
  async getMetadataUrl() {
    if (Object.values(TORUS_LEGACY_NETWORK).includes(this.network)) {
      return METADATA_MAP[this.network];
    }
    const nodeDetails = await this.getNodeDetails({
      verifier: "test-verifier",
      verifierId: "test-verifier-id"
    });
    return nodeDetails.torusNodeEndpoints[0].replace("/sss/jrpc", "/metadata");
  }
  setNodeDetails(nodeDetails) {
    const {
      currentEpoch,
      torusNodeEndpoints,
      torusNodeSSSEndpoints,
      torusNodeRSSEndpoints,
      torusNodeTSSEndpoints,
      torusNodePub,
      torusIndexes
    } = nodeDetails;
    this._torusNodeEndpoints = torusNodeEndpoints;
    this._torusNodeSSSEndpoints = torusNodeSSSEndpoints || [];
    this._torusNodeRSSEndpoints = torusNodeRSSEndpoints || [];
    this._torusNodeTSSEndpoints = torusNodeTSSEndpoints || [];
    this._torusNodePub = torusNodePub;
    this._torusIndexes = torusIndexes;
    this._currentEpoch = currentEpoch;
    this.updated = true;
  }
}

export { NodeDetailManager, NodeDetailManager as default };
//# sourceMappingURL=fetchNodeDetails.esm.js.map
