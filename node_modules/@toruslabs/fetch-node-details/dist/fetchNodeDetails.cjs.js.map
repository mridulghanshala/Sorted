{"version":3,"file":"fetchNodeDetails.cjs.js","mappings":"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","sources":["webpack://@toruslabs/fetch-node-details/webpack/bootstrap","webpack://@toruslabs/fetch-node-details/webpack/runtime/compat get default export","webpack://@toruslabs/fetch-node-details/webpack/runtime/define property getters","webpack://@toruslabs/fetch-node-details/webpack/runtime/hasOwnProperty shorthand","webpack://@toruslabs/fetch-node-details/webpack/runtime/make namespace object","webpack://@toruslabs/fetch-node-details/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@toruslabs/fetch-node-details/external commonjs2 \"@toruslabs/constants\"","webpack://@toruslabs/fetch-node-details/external commonjs2 \"@toruslabs/fnd-base\"","webpack://@toruslabs/fetch-node-details/external commonjs2 \"@toruslabs/http-helpers\"","webpack://@toruslabs/fetch-node-details/external commonjs2 \"loglevel\"","webpack://@toruslabs/fetch-node-details/./src/nodeDetailManager.ts","webpack://@toruslabs/fetch-node-details/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/constants\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/fnd-base\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/http-helpers\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"loglevel\");","import {\n  FND_SERVER,\n  INodeDetails,\n  INodePub,\n  METADATA_MAP,\n  MULTI_CLUSTER_NETWORKS,\n  TORUS_LEGACY_NETWORK,\n  TORUS_LEGACY_NETWORK_TYPE,\n  TORUS_NETWORK_TYPE,\n  TORUS_SAPPHIRE_NETWORK,\n} from \"@toruslabs/constants\";\nimport { fetchLocalConfig } from \"@toruslabs/fnd-base\";\nimport { get } from \"@toruslabs/http-helpers\";\nimport logger from \"loglevel\";\n\nimport { NodeDetailManagerParams } from \"./interfaces\";\n\nconst log = logger.getLogger(\"fnd\");\n\nclass NodeDetailManager {\n  private fndServerEndpoint = `${FND_SERVER}/node-details`;\n\n  private _currentEpoch = \"1\";\n\n  private _torusNodeEndpoints: string[] = [];\n\n  private _torusNodeRSSEndpoints: string[] = [];\n\n  private _torusNodeSSSEndpoints: string[] = [];\n\n  private _torusNodeTSSEndpoints: string[] = [];\n\n  private _torusNodePub: INodePub[] = [];\n\n  private _torusIndexes: number[] = [];\n\n  private updated: boolean;\n\n  private network: TORUS_NETWORK_TYPE;\n\n  constructor({ network = TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET, fndServerEndpoint, enableLogging = false }: NodeDetailManagerParams = {}) {\n    this.network = network;\n\n    this.updated = false;\n    if (fndServerEndpoint) {\n      this.fndServerEndpoint = fndServerEndpoint;\n    }\n    if (enableLogging) {\n      log.enableAll();\n    } else {\n      log.disableAll();\n    }\n  }\n\n  get _nodeDetails(): INodeDetails {\n    return {\n      currentEpoch: this._currentEpoch,\n      torusNodeEndpoints: this._torusNodeEndpoints,\n      torusNodeSSSEndpoints: this._torusNodeSSSEndpoints,\n      torusNodeRSSEndpoints: this._torusNodeRSSEndpoints,\n      torusNodeTSSEndpoints: this._torusNodeTSSEndpoints,\n      torusNodePub: this._torusNodePub,\n      torusIndexes: this._torusIndexes,\n      updated: this.updated,\n    };\n  }\n\n  async getNodeDetails({ verifier, verifierId }: { verifier: string; verifierId: string }): Promise<INodeDetails> {\n    try {\n      if (this.updated && !MULTI_CLUSTER_NETWORKS.includes(this.network as TORUS_LEGACY_NETWORK_TYPE)) return this._nodeDetails;\n\n      try {\n        const { nodeDetails } = await get<{ nodeDetails: INodeDetails }>(\n          `${this.fndServerEndpoint}?network=${this.network}&verifier=${verifier}&verifierId=${verifierId}`\n        );\n        this.setNodeDetails(nodeDetails);\n\n        return this._nodeDetails;\n      } catch (error) {\n        log.error(\"Failed to fetch node details from server, using local.\", error);\n      }\n\n      const nodeDetails = fetchLocalConfig(this.network as TORUS_NETWORK_TYPE);\n      if (!nodeDetails) throw new Error(\"Failed to fetch node details\");\n      this.setNodeDetails(nodeDetails);\n      return this._nodeDetails;\n    } catch (error) {\n      log.error(\"Failed to fetch node details\", error);\n      throw error;\n    }\n  }\n\n  async getMetadataUrl(): Promise<string> {\n    if (Object.values(TORUS_LEGACY_NETWORK).includes(this.network as TORUS_LEGACY_NETWORK_TYPE)) {\n      return METADATA_MAP[this.network as TORUS_LEGACY_NETWORK_TYPE];\n    }\n    const nodeDetails = await this.getNodeDetails({ verifier: \"test-verifier\", verifierId: \"test-verifier-id\" });\n    return nodeDetails.torusNodeEndpoints[0].replace(\"/sss/jrpc\", \"/metadata\");\n  }\n\n  private setNodeDetails(nodeDetails: INodeDetails) {\n    const { currentEpoch, torusNodeEndpoints, torusNodeSSSEndpoints, torusNodeRSSEndpoints, torusNodeTSSEndpoints, torusNodePub, torusIndexes } =\n      nodeDetails;\n    this._torusNodeEndpoints = torusNodeEndpoints;\n    this._torusNodeSSSEndpoints = torusNodeSSSEndpoints || [];\n    this._torusNodeRSSEndpoints = torusNodeRSSEndpoints || [];\n    this._torusNodeTSSEndpoints = torusNodeTSSEndpoints || [];\n    this._torusNodePub = torusNodePub;\n    this._torusIndexes = torusIndexes;\n    this._currentEpoch = currentEpoch;\n    this.updated = true;\n  }\n}\n\nexport default NodeDetailManager;\n","export * from \"./interfaces\";\nexport { default, default as NodeDetailManager } from \"./nodeDetailManager\";\n"],"names":["FND_SERVER","METADATA_MAP","MULTI_CLUSTER_NETWORKS","TORUS_LEGACY_NETWORK","TORUS_SAPPHIRE_NETWORK","fetchLocalConfig","get","logger","log","getLogger","NodeDetailManager","constructor","network","SAPPHIRE_MAINNET","fndServerEndpoint","enableLogging","arguments","length","undefined","_defineProperty","updated","enableAll","disableAll","_nodeDetails","currentEpoch","_currentEpoch","torusNodeEndpoints","_torusNodeEndpoints","torusNodeSSSEndpoints","_torusNodeSSSEndpoints","torusNodeRSSEndpoints","_torusNodeRSSEndpoints","torusNodeTSSEndpoints","_torusNodeTSSEndpoints","torusNodePub","_torusNodePub","torusIndexes","_torusIndexes","getNodeDetails","_ref","verifier","verifierId","includes","nodeDetails","setNodeDetails","error","Error","getMetadataUrl","Object","values","replace","default"],"sourceRoot":""}