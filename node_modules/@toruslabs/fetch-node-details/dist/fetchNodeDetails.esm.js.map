{"version":3,"file":"fetchNodeDetails.esm.js","sources":["../src/nodeDetailManager.ts"],"sourcesContent":["import {\n  FND_SERVER,\n  INodeDetails,\n  INodePub,\n  METADATA_MAP,\n  MULTI_CLUSTER_NETWORKS,\n  TORUS_LEGACY_NETWORK,\n  TORUS_LEGACY_NETWORK_TYPE,\n  TORUS_NETWORK_TYPE,\n  TORUS_SAPPHIRE_NETWORK,\n} from \"@toruslabs/constants\";\nimport { fetchLocalConfig } from \"@toruslabs/fnd-base\";\nimport { get } from \"@toruslabs/http-helpers\";\nimport logger from \"loglevel\";\n\nimport { NodeDetailManagerParams } from \"./interfaces\";\n\nconst log = logger.getLogger(\"fnd\");\n\nclass NodeDetailManager {\n  private fndServerEndpoint = `${FND_SERVER}/node-details`;\n\n  private _currentEpoch = \"1\";\n\n  private _torusNodeEndpoints: string[] = [];\n\n  private _torusNodeRSSEndpoints: string[] = [];\n\n  private _torusNodeSSSEndpoints: string[] = [];\n\n  private _torusNodeTSSEndpoints: string[] = [];\n\n  private _torusNodePub: INodePub[] = [];\n\n  private _torusIndexes: number[] = [];\n\n  private updated: boolean;\n\n  private network: TORUS_NETWORK_TYPE;\n\n  constructor({ network = TORUS_SAPPHIRE_NETWORK.SAPPHIRE_MAINNET, fndServerEndpoint, enableLogging = false }: NodeDetailManagerParams = {}) {\n    this.network = network;\n\n    this.updated = false;\n    if (fndServerEndpoint) {\n      this.fndServerEndpoint = fndServerEndpoint;\n    }\n    if (enableLogging) {\n      log.enableAll();\n    } else {\n      log.disableAll();\n    }\n  }\n\n  get _nodeDetails(): INodeDetails {\n    return {\n      currentEpoch: this._currentEpoch,\n      torusNodeEndpoints: this._torusNodeEndpoints,\n      torusNodeSSSEndpoints: this._torusNodeSSSEndpoints,\n      torusNodeRSSEndpoints: this._torusNodeRSSEndpoints,\n      torusNodeTSSEndpoints: this._torusNodeTSSEndpoints,\n      torusNodePub: this._torusNodePub,\n      torusIndexes: this._torusIndexes,\n      updated: this.updated,\n    };\n  }\n\n  async getNodeDetails({ verifier, verifierId }: { verifier: string; verifierId: string }): Promise<INodeDetails> {\n    try {\n      if (this.updated && !MULTI_CLUSTER_NETWORKS.includes(this.network as TORUS_LEGACY_NETWORK_TYPE)) return this._nodeDetails;\n\n      try {\n        const { nodeDetails } = await get<{ nodeDetails: INodeDetails }>(\n          `${this.fndServerEndpoint}?network=${this.network}&verifier=${verifier}&verifierId=${verifierId}`\n        );\n        this.setNodeDetails(nodeDetails);\n\n        return this._nodeDetails;\n      } catch (error) {\n        log.error(\"Failed to fetch node details from server, using local.\", error);\n      }\n\n      const nodeDetails = fetchLocalConfig(this.network as TORUS_NETWORK_TYPE);\n      if (!nodeDetails) throw new Error(\"Failed to fetch node details\");\n      this.setNodeDetails(nodeDetails);\n      return this._nodeDetails;\n    } catch (error) {\n      log.error(\"Failed to fetch node details\", error);\n      throw error;\n    }\n  }\n\n  async getMetadataUrl(): Promise<string> {\n    if (Object.values(TORUS_LEGACY_NETWORK).includes(this.network as TORUS_LEGACY_NETWORK_TYPE)) {\n      return METADATA_MAP[this.network as TORUS_LEGACY_NETWORK_TYPE];\n    }\n    const nodeDetails = await this.getNodeDetails({ verifier: \"test-verifier\", verifierId: \"test-verifier-id\" });\n    return nodeDetails.torusNodeEndpoints[0].replace(\"/sss/jrpc\", \"/metadata\");\n  }\n\n  private setNodeDetails(nodeDetails: INodeDetails) {\n    const { currentEpoch, torusNodeEndpoints, torusNodeSSSEndpoints, torusNodeRSSEndpoints, torusNodeTSSEndpoints, torusNodePub, torusIndexes } =\n      nodeDetails;\n    this._torusNodeEndpoints = torusNodeEndpoints;\n    this._torusNodeSSSEndpoints = torusNodeSSSEndpoints || [];\n    this._torusNodeRSSEndpoints = torusNodeRSSEndpoints || [];\n    this._torusNodeTSSEndpoints = torusNodeTSSEndpoints || [];\n    this._torusNodePub = torusNodePub;\n    this._torusIndexes = torusIndexes;\n    this._currentEpoch = currentEpoch;\n    this.updated = true;\n  }\n}\n\nexport default NodeDetailManager;\n"],"names":["log","logger","getLogger","NodeDetailManager","constructor","network","TORUS_SAPPHIRE_NETWORK","SAPPHIRE_MAINNET","fndServerEndpoint","enableLogging","arguments","length","undefined","_defineProperty","FND_SERVER","updated","enableAll","disableAll","_nodeDetails","currentEpoch","_currentEpoch","torusNodeEndpoints","_torusNodeEndpoints","torusNodeSSSEndpoints","_torusNodeSSSEndpoints","torusNodeRSSEndpoints","_torusNodeRSSEndpoints","torusNodeTSSEndpoints","_torusNodeTSSEndpoints","torusNodePub","_torusNodePub","torusIndexes","_torusIndexes","getNodeDetails","_ref","verifier","verifierId","MULTI_CLUSTER_NETWORKS","includes","nodeDetails","get","setNodeDetails","error","fetchLocalConfig","Error","getMetadataUrl","Object","values","TORUS_LEGACY_NETWORK","METADATA_MAP","replace"],"mappings":"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"}