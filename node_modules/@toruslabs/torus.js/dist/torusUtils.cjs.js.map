{"version":3,"file":"torusUtils.cjs.js","mappings":"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","sources":["webpack://@toruslabs/torus.js/webpack/bootstrap","webpack://@toruslabs/torus.js/webpack/runtime/compat get default export","webpack://@toruslabs/torus.js/webpack/runtime/define property getters","webpack://@toruslabs/torus.js/webpack/runtime/hasOwnProperty shorthand","webpack://@toruslabs/torus.js/webpack/runtime/make namespace object","webpack://@toruslabs/torus.js/./src/constants.ts","webpack://@toruslabs/torus.js/external commonjs2 \"json-stable-stringify\"","webpack://@toruslabs/torus.js/./src/helpers/common.ts","webpack://@toruslabs/torus.js/./src/helpers/errorUtils.ts","webpack://@toruslabs/torus.js/external commonjs2 \"bn.js\"","webpack://@toruslabs/torus.js/external commonjs \"ethereum-cryptography/keccak\"","webpack://@toruslabs/torus.js/external commonjs2 \"loglevel\"","webpack://@toruslabs/torus.js/./src/loglevel.ts","webpack://@toruslabs/torus.js/./src/helpers/keyUtils.ts","webpack://@toruslabs/torus.js/external commonjs2 \"@toruslabs/eccrypto\"","webpack://@toruslabs/torus.js/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@toruslabs/torus.js/./src/Point.ts","webpack://@toruslabs/torus.js/./src/Share.ts","webpack://@toruslabs/torus.js/./src/Polynomial.ts","webpack://@toruslabs/torus.js/./src/helpers/langrangeInterpolatePoly.ts","webpack://@toruslabs/torus.js/external commonjs2 \"@babel/runtime/helpers/objectSpread2\"","webpack://@toruslabs/torus.js/external commonjs2 \"@toruslabs/http-helpers\"","webpack://@toruslabs/torus.js/./src/helpers/metadataUtils.ts","webpack://@toruslabs/torus.js/external commonjs2 \"@toruslabs/constants\"","webpack://@toruslabs/torus.js/./src/config.ts","webpack://@toruslabs/torus.js/./src/some.ts","webpack://@toruslabs/torus.js/./src/helpers/nodeUtils.ts","webpack://@toruslabs/torus.js/./src/helpers/index.ts","webpack://@toruslabs/torus.js/external commonjs2 \"elliptic\"","webpack://@toruslabs/torus.js/./src/torus.ts","webpack://@toruslabs/torus.js/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","export const JRPC_METHODS = {\n  GET_OR_SET_KEY: \"GetPubKeyOrKeyAssign\",\n  COMMITMENT_REQUEST: \"CommitmentRequest\",\n  IMPORT_SHARE: \"ImportShare\",\n  GET_SHARE_OR_KEY_ASSIGN: \"GetShareOrKeyAssign\",\n};\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"json-stable-stringify\");","import { Ecies } from \"@toruslabs/eccrypto\";\nimport JsonStringify from \"json-stable-stringify\";\n\nimport { EciesHex, VerifierLookupResponse } from \"../interfaces\";\n\n// this function normalizes the result from nodes before passing the result to threshold check function\n// For ex: some fields returns by nodes might be different from each other\n// like created_at field might vary and nonce_data might not be returned by all nodes because\n// of the metadata implementation in sapphire.\nexport const normalizeKeysResult = (result: VerifierLookupResponse) => {\n  const finalResult: Pick<VerifierLookupResponse, \"keys\" | \"is_new_key\"> = {\n    keys: [],\n    is_new_key: result.is_new_key,\n  };\n  if (result && result.keys && result.keys.length > 0) {\n    finalResult.keys = result.keys.map((key) => {\n      return {\n        pub_key_X: key.pub_key_X,\n        pub_key_Y: key.pub_key_Y,\n        address: key.address,\n      };\n    });\n  }\n  return finalResult;\n};\n\nexport const kCombinations = (s: number | number[], k: number): number[][] => {\n  let set = s;\n  if (typeof set === \"number\") {\n    set = Array.from({ length: set }, (_, i) => i);\n  }\n  if (k > set.length || k <= 0) {\n    return [];\n  }\n\n  if (k === set.length) {\n    return [set];\n  }\n\n  if (k === 1) {\n    return set.reduce((acc, cur) => [...acc, [cur]], [] as number[][]);\n  }\n\n  const combs: number[][] = [];\n  let tailCombs: number[][] = [];\n\n  for (let i = 0; i <= set.length - k + 1; i += 1) {\n    tailCombs = kCombinations(set.slice(i + 1), k - 1);\n    for (let j = 0; j < tailCombs.length; j += 1) {\n      combs.push([set[i], ...tailCombs[j]]);\n    }\n  }\n\n  return combs;\n};\n\nexport const thresholdSame = <T>(arr: T[], t: number): T | undefined => {\n  const hashMap: Record<string, number> = {};\n  for (let i = 0; i < arr.length; i += 1) {\n    const str = JsonStringify(arr[i]);\n    hashMap[str] = hashMap[str] ? hashMap[str] + 1 : 1;\n    if (hashMap[str] === t) {\n      return arr[i];\n    }\n  }\n  return undefined;\n};\n\nexport function encParamsBufToHex(encParams: Ecies): EciesHex {\n  return {\n    iv: Buffer.from(encParams.iv).toString(\"hex\"),\n    ephemPublicKey: Buffer.from(encParams.ephemPublicKey).toString(\"hex\"),\n    ciphertext: Buffer.from(encParams.ciphertext).toString(\"hex\"),\n    mac: Buffer.from(encParams.mac).toString(\"hex\"),\n    mode: \"AES256\",\n  };\n}\n\nexport function encParamsHexToBuf(eciesData: Omit<EciesHex, \"ciphertext\">): Omit<Ecies, \"ciphertext\"> {\n  return {\n    ephemPublicKey: Buffer.from(eciesData.ephemPublicKey, \"hex\"),\n    iv: Buffer.from(eciesData.iv, \"hex\"),\n    mac: Buffer.from(eciesData.mac, \"hex\"),\n  };\n}\n","export class GetOrSetNonceError extends Error {}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bn.js\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"ethereum-cryptography/keccak\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"loglevel\");","import loglevel from \"loglevel\";\n\nconst log = loglevel.getLogger(\"torus.js\");\nlog.disableAll();\n\nexport default log;\n","import BN from \"bn.js\";\nimport { ec } from \"elliptic\";\nimport { keccak256 as keccakHash } from \"ethereum-cryptography/keccak\";\n\nimport log from \"../loglevel\";\n\nexport function keccak256(a: Buffer): string {\n  const hash = Buffer.from(keccakHash(a)).toString(\"hex\");\n  return `0x${hash}`;\n}\n\nexport function stripHexPrefix(str: string): string {\n  return str.startsWith(\"0x\") ? str.slice(2) : str;\n}\n\nexport function toChecksumAddress(hexAddress: string): string {\n  const address = stripHexPrefix(hexAddress).toLowerCase();\n\n  const buf = Buffer.from(address, \"utf8\");\n  const hash = Buffer.from(keccakHash(buf)).toString(\"hex\");\n  let ret = \"0x\";\n\n  for (let i = 0; i < address.length; i++) {\n    if (parseInt(hash[i], 16) >= 8) {\n      ret += address[i].toUpperCase();\n    } else {\n      ret += address[i];\n    }\n  }\n\n  return ret;\n}\n\nexport function generateAddressFromPrivKey(ecCurve: ec, privateKey: BN): string {\n  const key = ecCurve.keyFromPrivate(privateKey.toString(\"hex\", 64), \"hex\");\n  const publicKey = key.getPublic().encode(\"hex\", false).slice(2);\n  log.info(publicKey, \"public key\");\n  const evmAddressLower = `0x${keccak256(Buffer.from(publicKey, \"hex\")).slice(64 - 38)}`;\n  return toChecksumAddress(evmAddressLower);\n}\n\nexport function generateAddressFromPubKey(ecCurve: ec, publicKeyX: BN, publicKeyY: BN): string {\n  const key = ecCurve.keyFromPublic({ x: publicKeyX.toString(\"hex\", 64), y: publicKeyY.toString(\"hex\", 64) });\n  const publicKey = key.getPublic().encode(\"hex\", false).slice(2);\n  log.info(key.getPublic().encode(\"hex\", false), \"public key\");\n  const evmAddressLower = `0x${keccak256(Buffer.from(publicKey, \"hex\")).slice(64 - 38)}`;\n  return toChecksumAddress(evmAddressLower);\n}\n\nexport function getPostboxKeyFrom1OutOf1(ecCurve: ec, privKey: string, nonce: string): string {\n  const privKeyBN = new BN(privKey, 16);\n  const nonceBN = new BN(nonce, 16);\n  return privKeyBN.sub(nonceBN).umod(ecCurve.curve.n).toString(\"hex\");\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/eccrypto\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","import BN from \"bn.js\";\nimport { ec as EC } from \"elliptic\";\n\nimport { BNString } from \"./interfaces\";\n\nclass Point {\n  x: BN;\n\n  y: BN;\n\n  ecCurve: EC;\n\n  constructor(x: BNString, y: BNString, ecCurve: EC) {\n    this.x = new BN(x, \"hex\");\n    this.y = new BN(y, \"hex\");\n    this.ecCurve = ecCurve;\n  }\n\n  encode(enc: string): Buffer {\n    switch (enc) {\n      case \"arr\":\n        return Buffer.concat([Buffer.from(\"04\", \"hex\"), Buffer.from(this.x.toString(\"hex\"), \"hex\"), Buffer.from(this.y.toString(\"hex\"), \"hex\")]);\n      case \"elliptic-compressed\": {\n        const key = this.ecCurve.keyFromPublic({ x: this.x.toString(\"hex\", 64), y: this.y.toString(\"hex\", 64) }, \"hex\");\n        return Buffer.from(key.getPublic(true, \"hex\"));\n      }\n      default:\n        throw new Error(\"encoding doesn't exist in Point\");\n    }\n  }\n}\n\nexport default Point;\n","import BN from \"bn.js\";\n\nimport { BNString, StringifiedType } from \"./interfaces\";\n\nclass Share {\n  share: BN;\n\n  shareIndex: BN;\n\n  constructor(shareIndex: BNString, share: BNString) {\n    this.share = new BN(share, \"hex\");\n    this.shareIndex = new BN(shareIndex, \"hex\");\n  }\n\n  static fromJSON(value: StringifiedType): Share {\n    const { share, shareIndex } = value;\n    return new Share(shareIndex as BNString, share as BNString);\n  }\n\n  toJSON(): StringifiedType {\n    return {\n      share: this.share.toString(\"hex\"),\n      shareIndex: this.shareIndex.toString(\"hex\"),\n    };\n  }\n}\n\nexport default Share;\n","import BN from \"bn.js\";\nimport { ec as EC } from \"elliptic\";\n\nimport { BNString } from \"./interfaces\";\nimport Share from \"./Share\";\n\nexport type ShareMap = {\n  [x: string]: Share;\n};\n\nclass Polynomial {\n  polynomial: BN[];\n\n  ecCurve: EC;\n\n  constructor(polynomial: BN[], ecCurve: EC) {\n    this.polynomial = polynomial;\n    this.ecCurve = ecCurve;\n  }\n\n  getThreshold(): number {\n    return this.polynomial.length;\n  }\n\n  polyEval(x: BNString): BN {\n    const tmpX = new BN(x, \"hex\");\n    let xi = new BN(tmpX);\n    let sum = new BN(0);\n    sum = sum.add(this.polynomial[0]);\n    for (let i = 1; i < this.polynomial.length; i += 1) {\n      const tmp = xi.mul(this.polynomial[i]);\n      sum = sum.add(tmp);\n      sum = sum.umod(this.ecCurve.curve.n);\n      xi = xi.mul(new BN(tmpX));\n      xi = xi.umod(this.ecCurve.curve.n);\n    }\n    return sum;\n  }\n\n  generateShares(shareIndexes: BNString[]): ShareMap {\n    const newShareIndexes = shareIndexes.map((index) => {\n      if (typeof index === \"number\") {\n        return new BN(index);\n      }\n      if (index instanceof BN) {\n        return index;\n      }\n      if (typeof index === \"string\") {\n        return new BN(index, \"hex\");\n      }\n      return index;\n    });\n\n    const shares: ShareMap = {};\n    for (let x = 0; x < newShareIndexes.length; x += 1) {\n      shares[newShareIndexes[x].toString(\"hex\", 64)] = new Share(newShareIndexes[x], this.polyEval(newShareIndexes[x]));\n    }\n    return shares;\n  }\n}\n\nexport default Polynomial;\n","import { generatePrivate } from \"@toruslabs/eccrypto\";\nimport BN from \"bn.js\";\nimport { ec as EC } from \"elliptic\";\n\nimport Point from \"../Point\";\nimport Polynomial from \"../Polynomial\";\nimport Share from \"../Share\";\n\nfunction generatePrivateExcludingIndexes(shareIndexes: BN[]): BN {\n  const key = new BN(generatePrivate());\n  if (shareIndexes.find((el) => el.eq(key))) {\n    return generatePrivateExcludingIndexes(shareIndexes);\n  }\n  return key;\n}\nconst generateEmptyBNArray = (length: number): BN[] => Array.from({ length }, () => new BN(0));\n\nconst denominator = (ecCurve: EC, i: number, innerPoints: Point[]) => {\n  let result = new BN(1);\n  const xi = innerPoints[i].x;\n  for (let j = innerPoints.length - 1; j >= 0; j -= 1) {\n    if (i !== j) {\n      let tmp = new BN(xi);\n      tmp = tmp.sub(innerPoints[j].x);\n      tmp = tmp.umod(ecCurve.curve.n);\n      result = result.mul(tmp);\n      result = result.umod(ecCurve.curve.n);\n    }\n  }\n  return result;\n};\n\nconst interpolationPoly = (ecCurve: EC, i: number, innerPoints: Point[]): BN[] => {\n  let coefficients = generateEmptyBNArray(innerPoints.length);\n  const d = denominator(ecCurve, i, innerPoints);\n  if (d.cmp(new BN(0)) === 0) {\n    throw new Error(\"Denominator for interpolationPoly is 0\");\n  }\n  coefficients[0] = d.invm(ecCurve.curve.n);\n  for (let k = 0; k < innerPoints.length; k += 1) {\n    const newCoefficients = generateEmptyBNArray(innerPoints.length);\n    if (k !== i) {\n      let j: number;\n      if (k < i) {\n        j = k + 1;\n      } else {\n        j = k;\n      }\n      j -= 1;\n      for (; j >= 0; j -= 1) {\n        newCoefficients[j + 1] = newCoefficients[j + 1].add(coefficients[j]).umod(ecCurve.curve.n);\n        let tmp = new BN(innerPoints[k].x);\n        tmp = tmp.mul(coefficients[j]).umod(ecCurve.curve.n);\n        newCoefficients[j] = newCoefficients[j].sub(tmp).umod(ecCurve.curve.n);\n      }\n      coefficients = newCoefficients;\n    }\n  }\n  return coefficients;\n};\n\nconst pointSort = (innerPoints: Point[]): Point[] => {\n  const pointArrClone = [...innerPoints];\n  pointArrClone.sort((a, b) => a.x.cmp(b.x));\n  return pointArrClone;\n};\n\nconst lagrange = (ecCurve: EC, unsortedPoints: Point[]) => {\n  const sortedPoints = pointSort(unsortedPoints);\n  const polynomial = generateEmptyBNArray(sortedPoints.length);\n  for (let i = 0; i < sortedPoints.length; i += 1) {\n    const coefficients = interpolationPoly(ecCurve, i, sortedPoints);\n    for (let k = 0; k < sortedPoints.length; k += 1) {\n      let tmp = new BN(sortedPoints[i].y);\n      tmp = tmp.mul(coefficients[k]);\n      polynomial[k] = polynomial[k].add(tmp).umod(ecCurve.curve.n);\n    }\n  }\n  return new Polynomial(polynomial, ecCurve);\n};\n\nexport function lagrangeInterpolatePolynomial(ecCurve: EC, points: Point[]): Polynomial {\n  return lagrange(ecCurve, points);\n}\n\nexport function lagrangeInterpolation(ecCurve: EC, shares: BN[], nodeIndex: BN[]): BN {\n  if (shares.length !== nodeIndex.length) {\n    throw new Error(\"shares not equal to nodeIndex length in lagrangeInterpolation\");\n  }\n  let secret = new BN(0);\n  for (let i = 0; i < shares.length; i += 1) {\n    let upper = new BN(1);\n    let lower = new BN(1);\n    for (let j = 0; j < shares.length; j += 1) {\n      if (i !== j) {\n        upper = upper.mul(nodeIndex[j].neg());\n        upper = upper.umod(ecCurve.curve.n);\n        let temp = nodeIndex[i].sub(nodeIndex[j]);\n        temp = temp.umod(ecCurve.curve.n);\n        lower = lower.mul(temp).umod(ecCurve.curve.n);\n      }\n    }\n    let delta = upper.mul(lower.invm(ecCurve.curve.n)).umod(ecCurve.curve.n);\n    delta = delta.mul(shares[i]).umod(ecCurve.curve.n);\n    secret = secret.add(delta);\n  }\n  return secret.umod(ecCurve.curve.n);\n}\n\n// generateRandomPolynomial - determinisiticShares are assumed random\nexport function generateRandomPolynomial(ecCurve: EC, degree: number, secret?: BN, deterministicShares?: Share[]): Polynomial {\n  let actualS = secret;\n  if (!secret) {\n    actualS = generatePrivateExcludingIndexes([new BN(0)]);\n  }\n  if (!deterministicShares) {\n    const poly = [actualS];\n    for (let i = 0; i < degree; i += 1) {\n      const share = generatePrivateExcludingIndexes(poly);\n      poly.push(share);\n    }\n    return new Polynomial(poly, ecCurve);\n  }\n  if (!Array.isArray(deterministicShares)) {\n    throw new Error(\"deterministic shares in generateRandomPolynomial should be an array\");\n  }\n\n  if (deterministicShares.length > degree) {\n    throw new Error(\"deterministicShares in generateRandomPolynomial should be less or equal than degree to ensure an element of randomness\");\n  }\n  const points: Record<string, Point> = {};\n  deterministicShares.forEach((share) => {\n    points[share.shareIndex.toString(\"hex\", 64)] = new Point(share.shareIndex, share.share, ecCurve);\n  });\n  for (let i = 0; i < degree - deterministicShares.length; i += 1) {\n    let shareIndex = generatePrivateExcludingIndexes([new BN(0)]);\n    while (points[shareIndex.toString(\"hex\", 64)] !== undefined) {\n      shareIndex = generatePrivateExcludingIndexes([new BN(0)]);\n    }\n    points[shareIndex.toString(\"hex\", 64)] = new Point(shareIndex, new BN(generatePrivate()), ecCurve);\n  }\n  points[\"0\"] = new Point(new BN(0), actualS, ecCurve);\n  return lagrangeInterpolatePolynomial(ecCurve, Object.values(points));\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/objectSpread2\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/http-helpers\");","import { decrypt } from \"@toruslabs/eccrypto\";\nimport { Data, post } from \"@toruslabs/http-helpers\";\nimport BN from \"bn.js\";\nimport { ec } from \"elliptic\";\nimport stringify from \"json-stable-stringify\";\nimport log from \"loglevel\";\n\nimport { EciesHex, GetOrSetNonceResult, MetadataParams } from \"../interfaces\";\nimport { encParamsHexToBuf } from \"./common\";\nimport { keccak256 } from \"./keyUtils\";\n\nexport function convertMetadataToNonce(params: { message?: string }) {\n  if (!params || !params.message) {\n    return new BN(0);\n  }\n  return new BN(params.message, 16);\n}\n\nexport async function decryptNodeData(eciesData: EciesHex, ciphertextHex: string, privKey: Buffer): Promise<Buffer> {\n  const metadata = encParamsHexToBuf(eciesData);\n  const decryptedSigBuffer = await decrypt(privKey, {\n    ...metadata,\n    ciphertext: Buffer.from(ciphertextHex, \"hex\"),\n  });\n  return decryptedSigBuffer;\n}\n\nexport function generateMetadataParams(ecCurve: ec, serverTimeOffset: number, message: string, privateKey: BN): MetadataParams {\n  const key = ecCurve.keyFromPrivate(privateKey.toString(\"hex\", 64));\n  const setData = {\n    data: message,\n    timestamp: new BN(~~(serverTimeOffset + Date.now() / 1000)).toString(16),\n  };\n  const sig = key.sign(keccak256(Buffer.from(stringify(setData), \"utf8\")).slice(2));\n  return {\n    pub_key_X: key.getPublic().getX().toString(\"hex\"), // DO NOT PAD THIS. BACKEND DOESN'T\n    pub_key_Y: key.getPublic().getY().toString(\"hex\"), // DO NOT PAD THIS. BACKEND DOESN'T\n    set_data: setData,\n    signature: Buffer.from(sig.r.toString(16, 64) + sig.s.toString(16, 64) + new BN(\"\").toString(16, 2), \"hex\").toString(\"base64\"),\n  };\n}\n\nexport async function getMetadata(\n  legacyMetadataHost: string,\n  data: Omit<MetadataParams, \"set_data\" | \"signature\">,\n  options: RequestInit = {}\n): Promise<BN> {\n  try {\n    const metadataResponse = await post<{ message?: string }>(`${legacyMetadataHost}/get`, data, options, { useAPIKey: true });\n    if (!metadataResponse || !metadataResponse.message) {\n      return new BN(0);\n    }\n    return new BN(metadataResponse.message, 16); // nonce\n  } catch (error) {\n    log.error(\"get metadata error\", error);\n    return new BN(0);\n  }\n}\n\nexport async function getOrSetNonce(\n  legacyMetadataHost: string,\n  ecCurve: ec,\n  serverTimeOffset: number,\n  X: string,\n  Y: string,\n  privKey?: BN,\n  getOnly = false\n): Promise<GetOrSetNonceResult> {\n  let data: Data;\n  const msg = getOnly ? \"getNonce\" : \"getOrSetNonce\";\n  if (privKey) {\n    data = generateMetadataParams(ecCurve, serverTimeOffset, msg, privKey);\n  } else {\n    data = {\n      pub_key_X: X,\n      pub_key_Y: Y,\n      set_data: { data: msg },\n    };\n  }\n  return post<GetOrSetNonceResult>(`${legacyMetadataHost}/get_or_set_nonce`, data, undefined, { useAPIKey: true });\n}\n\nexport async function getNonce(\n  legacyMetadataHost: string,\n  ecCurve: ec,\n  serverTimeOffset: number,\n  X: string,\n  Y: string,\n  privKey?: BN\n): Promise<GetOrSetNonceResult> {\n  return getOrSetNonce(legacyMetadataHost, ecCurve, serverTimeOffset, X, Y, privKey, true);\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/constants\");","export const config = {\n  logRequestTracing: false,\n};\n","function capitalizeFirstLetter(str: string): string {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nexport class SomeError<T> extends Error {\n  errors: Error[];\n\n  responses: T[];\n\n  predicate: string;\n\n  constructor({ errors, responses, predicate }: { errors: Error[]; responses: T[]; predicate: string }) {\n    super(\"Unable to resolve enough promises.\");\n    this.errors = errors;\n    this.responses = responses;\n    this.predicate = predicate;\n  }\n\n  get message() {\n    return `${super.message}. ${this.errors.length} errors: ${this.errors.map((x) => x.message || x).join(\", \")} and ${\n      this.responses.length\n    } responses: ${JSON.stringify(this.responses)}`;\n  }\n\n  toString() {\n    return this.message;\n  }\n}\n\nexport const Some = <K, T>(promises: Promise<K>[], predicate: (resultArr: K[], { resolved }: { resolved: boolean }) => Promise<T>): Promise<T> =>\n  new Promise((resolve, reject) => {\n    let finishedCount = 0;\n    const sharedState = { resolved: false };\n    const errorArr: Error[] = new Array(promises.length).fill(undefined);\n    const resultArr: K[] = new Array(promises.length).fill(undefined);\n    let predicateError: Error | string;\n    // eslint-disable-next-line no-promise-executor-return\n    return promises.forEach((x, index) => {\n      return (\n        x\n          .then((resp: K) => {\n            resultArr[index] = resp;\n            return undefined;\n          })\n          .catch((error: Error) => {\n            errorArr[index] = error;\n          })\n          // eslint-disable-next-line promise/no-return-in-finally\n          .finally(() => {\n            if (sharedState.resolved) return;\n            return predicate(resultArr.slice(0), sharedState)\n              .then((data) => {\n                sharedState.resolved = true;\n                resolve(data);\n                return undefined;\n              })\n              .catch((error) => {\n                // log only the last predicate error\n                predicateError = error;\n              })\n              .finally(() => {\n                finishedCount += 1;\n                if (finishedCount === promises.length) {\n                  const errors = Object.values(\n                    resultArr.reduce((acc: Record<string, string>, z) => {\n                      if (z) {\n                        const { id, error } = z as { id?: string; error?: { data?: string } };\n                        if (error?.data?.length > 0) {\n                          if (error.data.startsWith(\"Error occurred while verifying params\")) acc[id] = capitalizeFirstLetter(error.data);\n                          else acc[id] = error.data;\n                        }\n                      }\n                      return acc;\n                    }, {})\n                  );\n\n                  if (errors.length > 0) {\n                    // Format-able errors\n                    const msg = errors.length > 1 ? `\\n${errors.map((it) => `• ${it}`).join(\"\\n\")}` : errors[0];\n                    reject(new Error(msg));\n                  } else {\n                    reject(\n                      new SomeError({\n                        errors: errorArr,\n                        responses: resultArr,\n                        predicate: (predicateError as Error)?.message || (predicateError as string),\n                      })\n                    );\n                  }\n                }\n              });\n          })\n      );\n    });\n  });\n","import { LEGACY_NETWORKS_ROUTE_MAP, TORUS_LEGACY_NETWORK_TYPE, TORUS_NETWORK_TYPE } from \"@toruslabs/constants\";\nimport { generatePrivate, getPublic } from \"@toruslabs/eccrypto\";\nimport { generateJsonRPCObject, get, post } from \"@toruslabs/http-helpers\";\nimport BN from \"bn.js\";\nimport { curve, ec } from \"elliptic\";\n\nimport { config } from \"../config\";\nimport { JRPC_METHODS } from \"../constants\";\nimport {\n  CommitmentRequestResult,\n  GetOrSetNonceResult,\n  ImportedShare,\n  ImportShareRequestResult,\n  JRPCResponse,\n  KeyAssignInput,\n  KeyLookupResult,\n  LegacyKeyLookupResult,\n  LegacyVerifierLookupResponse,\n  SessionToken,\n  ShareRequestResult,\n  SignerResponse,\n  TorusKey,\n  UserType,\n  v2NonceResultType,\n  VerifierLookupResponse,\n  VerifierParams,\n} from \"../interfaces\";\nimport log from \"../loglevel\";\nimport { Some } from \"../some\";\nimport { kCombinations, normalizeKeysResult, thresholdSame } from \"./common\";\nimport { generateAddressFromPrivKey, generateAddressFromPubKey, keccak256 } from \"./keyUtils\";\nimport { lagrangeInterpolation } from \"./langrangeInterpolatePoly\";\nimport { decryptNodeData, getMetadata, getOrSetNonce } from \"./metadataUtils\";\n\nexport const GetPubKeyOrKeyAssign = async (params: {\n  endpoints: string[];\n  network: TORUS_NETWORK_TYPE;\n  verifier: string;\n  verifierId: string;\n  extendedVerifierId?: string;\n}): Promise<KeyLookupResult> => {\n  const { endpoints, network, verifier, verifierId, extendedVerifierId } = params;\n  const lookupPromises = endpoints.map((x) =>\n    post<JRPCResponse<VerifierLookupResponse>>(\n      x,\n      generateJsonRPCObject(JRPC_METHODS.GET_OR_SET_KEY, {\n        verifier,\n        verifier_id: verifierId.toString(),\n        extended_verifier_id: extendedVerifierId,\n        one_key_flow: true,\n        fetch_node_index: true,\n      }),\n      null,\n      { logTracingHeader: config.logRequestTracing }\n    ).catch((err) => log.error(`${JRPC_METHODS.GET_OR_SET_KEY} request failed`, err))\n  );\n\n  let nonceResult: GetOrSetNonceResult | undefined;\n  const nodeIndexes: number[] = [];\n  const result = await Some<void | JRPCResponse<VerifierLookupResponse>, KeyLookupResult>(lookupPromises, (lookupResults) => {\n    const lookupPubKeys = lookupResults.filter((x1) => {\n      if (x1 && !x1.error) {\n        if (!nonceResult) {\n          // currently only one node returns metadata nonce\n          // other nodes returns empty object\n          // pubNonce must be available to derive the public key\n          const pubNonceX = (x1.result?.keys[0].nonce_data as v2NonceResultType)?.pubNonce?.x;\n          if (pubNonceX) {\n            nonceResult = x1.result.keys[0].nonce_data;\n          }\n        }\n        return x1;\n      }\n      return false;\n    });\n    const errorResult = thresholdSame(\n      lookupPubKeys.map((x2) => x2 && x2.error),\n      ~~(endpoints.length / 2) + 1\n    );\n\n    const keyResult = thresholdSame(\n      lookupPubKeys.map((x3) => x3 && normalizeKeysResult(x3.result)),\n      ~~(endpoints.length / 2) + 1\n    );\n\n    // nonceResult must exist except for extendedVerifierId and legacy networks along with keyResult\n    if ((keyResult && (nonceResult || extendedVerifierId || LEGACY_NETWORKS_ROUTE_MAP[network as TORUS_LEGACY_NETWORK_TYPE])) || errorResult) {\n      if (keyResult) {\n        lookupResults.forEach((x1) => {\n          if (x1 && x1.result) {\n            const currentNodePubKey = x1.result.keys[0].pub_key_X.toLowerCase();\n            const thresholdPubKey = keyResult.keys[0].pub_key_X.toLowerCase();\n            // push only those indexes for nodes who are returning pub key matching with threshold pub key.\n            // this check is important when different nodes have different keys assigned to a user.\n            if (currentNodePubKey === thresholdPubKey) {\n              const nodeIndex = parseInt(x1.result.node_index);\n              if (nodeIndex) nodeIndexes.push(nodeIndex);\n            }\n          }\n        });\n      }\n      return Promise.resolve({ keyResult, nodeIndexes, errorResult, nonceResult });\n    }\n    return Promise.reject(\n      new Error(\n        `invalid public key result: ${JSON.stringify(lookupResults)} and nonce result:${JSON.stringify(\n          nonceResult || {}\n        )} for verifier: ${verifier}, verifierId: ${verifierId} and extendedVerifierId: ${extendedVerifierId} `\n      )\n    );\n  });\n\n  return result;\n};\n\nexport async function retrieveOrImportShare(params: {\n  legacyMetadataHost: string;\n  serverTimeOffset: number;\n  enableOneKey: boolean;\n  ecCurve: ec;\n  allowHost: string;\n  network: string;\n  clientId: string;\n  endpoints: string[];\n  verifier: string;\n  verifierParams: VerifierParams;\n  idToken: string;\n  importedShares?: ImportedShare[];\n  extraParams: Record<string, unknown>;\n}): Promise<TorusKey> {\n  const {\n    legacyMetadataHost,\n    serverTimeOffset,\n    enableOneKey,\n    ecCurve,\n    allowHost,\n    network,\n    clientId,\n    endpoints,\n    verifier,\n    verifierParams,\n    idToken,\n    importedShares,\n    extraParams,\n  } = params;\n  await get<void>(\n    allowHost,\n    {\n      headers: {\n        verifier,\n        verifierId: verifierParams.verifier_id,\n        network,\n        clientId,\n        enableGating: \"true\",\n      },\n    },\n    { useAPIKey: true }\n  );\n  const promiseArr = [];\n\n  // generate temporary private and public key that is used to secure receive shares\n  const sessionAuthKey = generatePrivate();\n  const pubKey = getPublic(sessionAuthKey).toString(\"hex\");\n  const pubKeyX = pubKey.slice(2, 66);\n  const pubKeyY = pubKey.slice(66);\n  const tokenCommitment = keccak256(Buffer.from(idToken, \"utf8\"));\n  let isImportShareReq = false;\n  if (importedShares && importedShares.length > 0) {\n    if (importedShares.length !== endpoints.length) {\n      throw new Error(\"Invalid imported shares length\");\n    }\n    isImportShareReq = true;\n  }\n\n  // make commitment requests to endpoints\n  for (let i = 0; i < endpoints.length; i += 1) {\n    /*\n      CommitmentRequestParams struct {\n        MessagePrefix      string `json:\"messageprefix\"`\n        TokenCommitment    string `json:\"tokencommitment\"`\n        TempPubX           string `json:\"temppubx\"`\n        TempPubY           string `json:\"temppuby\"`\n        VerifierIdentifier string `json:\"verifieridentifier\"`\n      } \n      */\n    const p = post<JRPCResponse<CommitmentRequestResult>>(\n      endpoints[i],\n      generateJsonRPCObject(JRPC_METHODS.COMMITMENT_REQUEST, {\n        messageprefix: \"mug00\",\n        tokencommitment: tokenCommitment.slice(2),\n        temppubx: pubKeyX,\n        temppuby: pubKeyY,\n        verifieridentifier: verifier,\n      }),\n      null,\n      { logTracingHeader: config.logRequestTracing }\n    ).catch((err) => {\n      log.error(\"commitment error\", err);\n    });\n    promiseArr.push(p);\n  }\n  // send share request once k + t number of commitment requests have completed\n  return Some<void | JRPCResponse<CommitmentRequestResult>, (void | JRPCResponse<CommitmentRequestResult>)[]>(promiseArr, (resultArr) => {\n    const completedRequests = resultArr.filter((x) => {\n      if (!x || typeof x !== \"object\") {\n        return false;\n      }\n      if (x.error) {\n        return false;\n      }\n      return true;\n    });\n\n    // we need to get commitments from all endpoints for importing share\n    if (importedShares.length > 0 && completedRequests.length === endpoints.length) {\n      return Promise.resolve(resultArr);\n    } else if (importedShares.length === 0 && completedRequests.length >= ~~((endpoints.length * 3) / 4) + 1) {\n      const requiredNodeResult = completedRequests.find((resp: void | JRPCResponse<CommitmentRequestResult>) => {\n        if (resp && resp.result?.nodeindex === \"1\") {\n          return true;\n        }\n        return false;\n      });\n\n      if (requiredNodeResult) {\n        return Promise.resolve(resultArr);\n      }\n    }\n\n    return Promise.reject(new Error(`invalid ${JSON.stringify(resultArr)}`));\n  })\n    .then((responses) => {\n      const promiseArrRequest: Promise<void | JRPCResponse<ShareRequestResult>>[] = [];\n      const nodeSigs: CommitmentRequestResult[] = [];\n      for (let i = 0; i < responses.length; i += 1) {\n        const x = responses[i];\n        if (!x || typeof x !== \"object\") {\n          continue;\n        }\n        if (x.error) {\n          continue;\n        }\n        if (x) nodeSigs.push((x as JRPCResponse<CommitmentRequestResult>).result);\n      }\n      for (let i = 0; i < endpoints.length; i += 1) {\n        const x = responses[i];\n        if (!x || typeof x !== \"object\") {\n          continue;\n        }\n        if (x.error) {\n          continue;\n        }\n        if (isImportShareReq) {\n          const importedShare = importedShares[i];\n          const p = post<JRPCResponse<ImportShareRequestResult>>(\n            endpoints[i],\n            generateJsonRPCObject(JRPC_METHODS.IMPORT_SHARE, {\n              encrypted: \"yes\",\n              use_temp: true,\n              item: [\n                {\n                  ...verifierParams,\n                  idtoken: idToken,\n                  nodesignatures: nodeSigs,\n                  verifieridentifier: verifier,\n                  pub_key_x: importedShare.pub_key_x,\n                  pub_key_y: importedShare.pub_key_y,\n                  encrypted_share: importedShare.encrypted_share,\n                  encrypted_share_metadata: importedShare.encrypted_share_metadata,\n                  node_index: importedShare.node_index,\n                  key_type: importedShare.key_type,\n                  nonce_data: importedShare.nonce_data,\n                  nonce_signature: importedShare.nonce_signature,\n                  ...extraParams,\n                },\n              ],\n              one_key_flow: true,\n            }),\n            null,\n            { logTracingHeader: config.logRequestTracing }\n          ).catch((err) => log.error(\"share req\", err));\n          promiseArrRequest.push(p);\n        } else {\n          const p = post<JRPCResponse<ShareRequestResult>>(\n            endpoints[i],\n            generateJsonRPCObject(JRPC_METHODS.GET_SHARE_OR_KEY_ASSIGN, {\n              encrypted: \"yes\",\n              use_temp: true,\n              item: [\n                {\n                  ...verifierParams,\n                  idtoken: idToken,\n                  nodesignatures: nodeSigs,\n                  verifieridentifier: verifier,\n                  ...extraParams,\n                },\n              ],\n              one_key_flow: true,\n            }),\n            null,\n            { logTracingHeader: config.logRequestTracing }\n          ).catch((err) => log.error(\"share req\", err));\n          promiseArrRequest.push(p);\n        }\n      }\n      let thresholdNonceData: GetOrSetNonceResult;\n      return Some<\n        void | JRPCResponse<ShareRequestResult>,\n        | { privateKey: BN; sessionTokenData: SessionToken[]; thresholdNonceData: GetOrSetNonceResult; nodeIndexes: BN[]; isNewKey: boolean }\n        | undefined\n      >(promiseArrRequest, async (shareResponses, sharedState) => {\n        // check if threshold number of nodes have returned the same user public key\n        const completedRequests = shareResponses.filter((x) => {\n          if (!x || typeof x !== \"object\") {\n            return false;\n          }\n          if (x.error) {\n            return false;\n          }\n          return true;\n        });\n        const pubkeys = shareResponses.map((x) => {\n          if (x && x.result && x.result.keys[0].public_key) {\n            if (!thresholdNonceData && !verifierParams.extended_verifier_id) {\n              const pubNonce = (x.result.keys[0].nonce_data as v2NonceResultType)?.pubNonce?.x;\n              if (pubNonce) {\n                thresholdNonceData = x.result.keys[0].nonce_data;\n              }\n            }\n            return x.result.keys[0].public_key;\n          }\n          return undefined;\n        });\n\n        const thresholdPublicKey = thresholdSame(pubkeys, ~~(endpoints.length / 2) + 1);\n\n        if (!thresholdPublicKey) {\n          throw new Error(\"invalid result from nodes, threshold number of public key results are not matching\");\n        }\n\n        // if both thresholdNonceData and extended_verifier_id are not available\n        // then we need to throw other wise address would be incorrect.\n        if (!thresholdNonceData && !verifierParams.extended_verifier_id && !LEGACY_NETWORKS_ROUTE_MAP[network as TORUS_LEGACY_NETWORK_TYPE]) {\n          throw new Error(\n            `invalid metadata result from nodes, nonce metadata is empty for verifier: ${verifier} and verifierId: ${verifierParams.verifier_id}`\n          );\n        }\n\n        const thresholdReqCount = importedShares.length > 0 ? endpoints.length : ~~(endpoints.length / 2) + 1;\n        // optimistically run lagrange interpolation once threshold number of shares have been received\n        // this is matched against the user public key to ensure that shares are consistent\n        // Note: no need of thresholdMetadataNonce for extended_verifier_id key\n        if (\n          completedRequests.length >= thresholdReqCount &&\n          thresholdPublicKey &&\n          (thresholdNonceData || verifierParams.extended_verifier_id || LEGACY_NETWORKS_ROUTE_MAP[network as TORUS_LEGACY_NETWORK_TYPE])\n        ) {\n          const sharePromises: Promise<void | Buffer>[] = [];\n          const sessionTokenSigPromises: Promise<void | Buffer>[] = [];\n          const sessionTokenPromises: Promise<void | Buffer>[] = [];\n          const nodeIndexes: BN[] = [];\n          const sessionTokenData: SessionToken[] = [];\n          const isNewKeyResponses: string[] = [];\n\n          for (let i = 0; i < completedRequests.length; i += 1) {\n            const currentShareResponse = completedRequests[i] as JRPCResponse<ShareRequestResult>;\n            const {\n              session_tokens: sessionTokens,\n              session_token_metadata: sessionTokenMetadata,\n              session_token_sigs: sessionTokenSigs,\n              session_token_sig_metadata: sessionTokenSigMetadata,\n              keys,\n              is_new_key: isNewKey,\n            } = currentShareResponse.result;\n\n            isNewKeyResponses.push(isNewKey);\n\n            if (sessionTokenSigs?.length > 0) {\n              // decrypt sessionSig if enc metadata is sent\n              if (sessionTokenSigMetadata && sessionTokenSigMetadata[0]?.ephemPublicKey) {\n                sessionTokenSigPromises.push(\n                  decryptNodeData(sessionTokenSigMetadata[0], sessionTokenSigs[0], sessionAuthKey).catch((err) =>\n                    log.debug(\"session sig decryption\", err)\n                  )\n                );\n              } else {\n                sessionTokenSigPromises.push(Promise.resolve(Buffer.from(sessionTokenSigs[0], \"hex\")));\n              }\n            } else {\n              sessionTokenSigPromises.push(Promise.resolve(undefined));\n            }\n\n            if (sessionTokens?.length > 0) {\n              // decrypt session token if enc metadata is sent\n              if (sessionTokenMetadata && sessionTokenMetadata[0]?.ephemPublicKey) {\n                sessionTokenPromises.push(\n                  decryptNodeData(sessionTokenMetadata[0], sessionTokens[0], sessionAuthKey).catch((err) =>\n                    log.debug(\"session token sig decryption\", err)\n                  )\n                );\n              } else {\n                sessionTokenPromises.push(Promise.resolve(Buffer.from(sessionTokens[0], \"base64\")));\n              }\n            } else {\n              sessionTokenPromises.push(Promise.resolve(undefined));\n            }\n\n            if (keys?.length > 0) {\n              const latestKey = currentShareResponse.result.keys[0];\n              nodeIndexes.push(new BN(latestKey.node_index));\n\n              if (latestKey.share_metadata) {\n                sharePromises.push(\n                  decryptNodeData(\n                    latestKey.share_metadata,\n                    Buffer.from(latestKey.share, \"base64\").toString(\"binary\").padStart(64, \"0\"),\n                    sessionAuthKey\n                  ).catch((err) => log.debug(\"share decryption\", err))\n                );\n              }\n            } else {\n              nodeIndexes.push(undefined);\n              sharePromises.push(Promise.resolve(undefined));\n            }\n          }\n          const allPromises = await Promise.all(sharePromises.concat(sessionTokenSigPromises).concat(sessionTokenPromises));\n          const sharesResolved = allPromises.slice(0, sharePromises.length);\n          const sessionSigsResolved = allPromises.slice(sharePromises.length, sharePromises.length + sessionTokenSigPromises.length);\n          const sessionTokensResolved = allPromises.slice(sharePromises.length + sessionTokenSigPromises.length, allPromises.length);\n          const validSigs = sessionSigsResolved.filter((sig) => {\n            if (sig) {\n              return true;\n            }\n            return false;\n          });\n\n          const minThresholdRequired = ~~(endpoints.length / 2) + 1;\n          if (!verifierParams.extended_verifier_id && validSigs.length < minThresholdRequired) {\n            throw new Error(`Insufficient number of signatures from nodes, required: ${minThresholdRequired}, found: ${validSigs.length}`);\n          }\n\n          const validTokens = sessionTokensResolved.filter((token) => {\n            if (token) {\n              return true;\n            }\n            return false;\n          });\n\n          if (!verifierParams.extended_verifier_id && validTokens.length < minThresholdRequired) {\n            throw new Error(`Insufficient number of session tokens from nodes, required: ${minThresholdRequired}, found: ${validTokens.length}`);\n          }\n          sessionTokensResolved.forEach((x, index) => {\n            if (!x) sessionTokenData.push(undefined);\n            else\n              sessionTokenData.push({\n                token: x.toString(\"base64\"),\n                signature: (sessionSigsResolved[index] as Buffer).toString(\"hex\"),\n                node_pubx: (completedRequests[index] as JRPCResponse<ShareRequestResult>).result.node_pubx,\n                node_puby: (completedRequests[index] as JRPCResponse<ShareRequestResult>).result.node_puby,\n              });\n          });\n\n          if (sharedState.resolved) return undefined;\n\n          const decryptedShares = sharesResolved.reduce(\n            (acc, curr, index) => {\n              if (curr) acc.push({ index: nodeIndexes[index], value: new BN(curr) });\n              return acc;\n            },\n            [] as { index: BN; value: BN }[]\n          );\n          // run lagrange interpolation on all subsets, faster in the optimistic scenario than berlekamp-welch due to early exit\n          const allCombis = kCombinations(decryptedShares.length, ~~(endpoints.length / 2) + 1);\n\n          let privateKey: BN | null = null;\n          for (let j = 0; j < allCombis.length; j += 1) {\n            const currentCombi = allCombis[j];\n            const currentCombiShares = decryptedShares.filter((_, index) => currentCombi.includes(index));\n            const shares = currentCombiShares.map((x) => x.value);\n            const indices = currentCombiShares.map((x) => x.index);\n            const derivedPrivateKey = lagrangeInterpolation(ecCurve, shares, indices);\n            if (!derivedPrivateKey) continue;\n            const decryptedPubKey = getPublic(Buffer.from(derivedPrivateKey.toString(16, 64), \"hex\")).toString(\"hex\");\n            const decryptedPubKeyX = decryptedPubKey.slice(2, 66);\n            const decryptedPubKeyY = decryptedPubKey.slice(66);\n            if (\n              new BN(decryptedPubKeyX, 16).cmp(new BN(thresholdPublicKey.X, 16)) === 0 &&\n              new BN(decryptedPubKeyY, 16).cmp(new BN(thresholdPublicKey.Y, 16)) === 0\n            ) {\n              privateKey = derivedPrivateKey;\n              break;\n            }\n          }\n\n          if (privateKey === undefined || privateKey === null) {\n            throw new Error(\"could not derive private key\");\n          }\n          const thresholdIsNewKey = thresholdSame(isNewKeyResponses, ~~(endpoints.length / 2) + 1);\n\n          return { privateKey, sessionTokenData, thresholdNonceData, nodeIndexes, isNewKey: thresholdIsNewKey === \"true\" };\n        }\n        throw new Error(\"Invalid\");\n      });\n    })\n    .then(async (res) => {\n      const { privateKey, sessionTokenData, thresholdNonceData, nodeIndexes, isNewKey } = res;\n      let nonceResult = thresholdNonceData;\n      if (!privateKey) throw new Error(\"Invalid private key returned\");\n      const oAuthKey = privateKey;\n      const oAuthPubKey = getPublic(Buffer.from(oAuthKey.toString(16, 64), \"hex\")).toString(\"hex\");\n      const oAuthPubkeyX = oAuthPubKey.slice(2, 66);\n      const oAuthPubkeyY = oAuthPubKey.slice(66);\n      let metadataNonce = new BN(nonceResult?.nonce ? nonceResult.nonce.padStart(64, \"0\") : \"0\", \"hex\");\n      let finalPubKey: curve.base.BasePoint;\n      let pubNonce: { X: string; Y: string } | undefined;\n      let typeOfUser: UserType = \"v1\";\n      // extended_verifier_id is only exception for torus-test-health verifier\n      // otherwise extended verifier id should not even return shares.\n      if (verifierParams.extended_verifier_id) {\n        typeOfUser = \"v2\";\n        // for tss key no need to add pub nonce\n        finalPubKey = ecCurve.keyFromPublic({ x: oAuthPubkeyX, y: oAuthPubkeyY }).getPublic();\n      } else if (LEGACY_NETWORKS_ROUTE_MAP[network as TORUS_LEGACY_NETWORK_TYPE]) {\n        if (enableOneKey) {\n          nonceResult = await getOrSetNonce(legacyMetadataHost, ecCurve, serverTimeOffset, oAuthPubkeyX, oAuthPubkeyY, oAuthKey, !isNewKey);\n          metadataNonce = new BN(nonceResult.nonce || \"0\", 16);\n          typeOfUser = nonceResult.typeOfUser;\n          if (typeOfUser === \"v2\") {\n            pubNonce = { X: (nonceResult as v2NonceResultType).pubNonce.x, Y: (nonceResult as v2NonceResultType).pubNonce.y };\n            finalPubKey = ecCurve\n              .keyFromPublic({ x: oAuthPubkeyX, y: oAuthPubkeyY })\n              .getPublic()\n              .add(\n                ecCurve\n                  .keyFromPublic({ x: (nonceResult as v2NonceResultType).pubNonce.x, y: (nonceResult as v2NonceResultType).pubNonce.y })\n                  .getPublic()\n              );\n          } else {\n            typeOfUser = \"v1\";\n            // for imported keys in legacy networks\n            metadataNonce = await getMetadata(legacyMetadataHost, { pub_key_X: oAuthPubkeyX, pub_key_Y: oAuthPubkeyY });\n            const privateKeyWithNonce = oAuthKey.add(metadataNonce).umod(ecCurve.curve.n);\n            finalPubKey = ecCurve.keyFromPrivate(privateKeyWithNonce.toString(16, 64), \"hex\").getPublic();\n          }\n        } else {\n          typeOfUser = \"v1\";\n          // for imported keys in legacy networks\n          metadataNonce = await getMetadata(legacyMetadataHost, { pub_key_X: oAuthPubkeyX, pub_key_Y: oAuthPubkeyY });\n          const privateKeyWithNonce = oAuthKey.add(metadataNonce).umod(ecCurve.curve.n);\n          finalPubKey = ecCurve.keyFromPrivate(privateKeyWithNonce.toString(16, 64), \"hex\").getPublic();\n        }\n      } else {\n        typeOfUser = \"v2\";\n        finalPubKey = ecCurve\n          .keyFromPublic({ x: oAuthPubkeyX, y: oAuthPubkeyY })\n          .getPublic()\n          .add(\n            ecCurve.keyFromPublic({ x: (nonceResult as v2NonceResultType).pubNonce.x, y: (nonceResult as v2NonceResultType).pubNonce.y }).getPublic()\n          );\n        pubNonce = { X: (nonceResult as v2NonceResultType).pubNonce.x, Y: (nonceResult as v2NonceResultType).pubNonce.y };\n      }\n\n      if (!finalPubKey) {\n        throw new Error(\"Invalid public key, this might be a bug, please report this to web3auth team\");\n      }\n\n      const oAuthKeyAddress = generateAddressFromPrivKey(ecCurve, oAuthKey);\n\n      // deriving address from pub key coz pubkey is always available\n      // but finalPrivKey won't be available for  v2 user upgraded to 2/n\n      const finalEvmAddress = generateAddressFromPubKey(ecCurve, finalPubKey.getX(), finalPubKey.getY());\n      log.debug(\"> torus.js/retrieveShares\", { finalEvmAddress });\n      let finalPrivKey = \"\"; // it is empty for v2 user upgraded to 2/n\n      if (typeOfUser === \"v1\" || (typeOfUser === \"v2\" && metadataNonce.gt(new BN(0)))) {\n        const privateKeyWithNonce = oAuthKey.add(metadataNonce).umod(ecCurve.curve.n);\n        finalPrivKey = privateKeyWithNonce.toString(\"hex\", 64);\n      }\n\n      let isUpgraded: boolean | null = false;\n      if (typeOfUser === \"v1\") {\n        isUpgraded = null;\n      } else if (typeOfUser === \"v2\") {\n        isUpgraded = metadataNonce.eq(new BN(\"0\"));\n      }\n      // return reconstructed private key and ethereum address\n      return {\n        finalKeyData: {\n          evmAddress: finalEvmAddress,\n          X: finalPubKey.getX().toString(16, 64), // this is final pub x user before and after updating to 2/n\n          Y: finalPubKey.getY().toString(16, 64), // this is final pub y user before and after updating to 2/n\n          privKey: finalPrivKey,\n        },\n        oAuthKeyData: {\n          evmAddress: oAuthKeyAddress,\n          X: oAuthPubkeyX,\n          Y: oAuthPubkeyY,\n          privKey: oAuthKey.toString(\"hex\", 64).padStart(64, \"0\"),\n        },\n        sessionData: {\n          sessionTokenData,\n          sessionAuthKey: sessionAuthKey.toString(\"hex\").padStart(64, \"0\"),\n        },\n        metadata: {\n          pubNonce,\n          nonce: metadataNonce,\n          typeOfUser,\n          upgraded: isUpgraded,\n        },\n        nodesData: {\n          nodeIndexes: nodeIndexes.map((x) => x.toNumber()),\n        },\n      } as TorusKey;\n    });\n}\n\nexport const legacyKeyLookup = async (endpoints: string[], verifier: string, verifierId: string): Promise<LegacyKeyLookupResult> => {\n  const lookupPromises = endpoints.map((x) =>\n    post<JRPCResponse<LegacyVerifierLookupResponse>>(\n      x,\n      generateJsonRPCObject(\"VerifierLookupRequest\", {\n        verifier,\n        verifier_id: verifierId.toString(),\n      })\n    ).catch((err) => log.error(\"lookup request failed\", err))\n  );\n  return Some<void | JRPCResponse<LegacyVerifierLookupResponse>, LegacyKeyLookupResult>(lookupPromises, (lookupResults) => {\n    const lookupShares = lookupResults.filter((x1) => x1);\n    const errorResult = thresholdSame(\n      lookupShares.map((x2) => x2 && x2.error),\n      ~~(endpoints.length / 2) + 1\n    );\n    const keyResult = thresholdSame(\n      lookupShares.map((x3) => x3 && x3.result),\n      ~~(endpoints.length / 2) + 1\n    );\n    if (keyResult || errorResult) {\n      return Promise.resolve({ keyResult, errorResult });\n    }\n    return Promise.reject(new Error(`invalid results ${JSON.stringify(lookupResults)}`));\n  });\n};\n\nexport const legacyKeyAssign = async ({\n  endpoints,\n  torusNodePubs,\n  lastPoint,\n  firstPoint,\n  verifier,\n  verifierId,\n  signerHost,\n  network,\n  clientId,\n}: KeyAssignInput): Promise<void> => {\n  let nodeNum: number;\n  let initialPoint: number | undefined;\n  if (lastPoint === undefined) {\n    nodeNum = Math.floor(Math.random() * endpoints.length);\n    // nodeNum = endpoints.indexOf(\"https://torus-node.binancex.dev/jrpc\");\n    log.info(\"keyassign\", nodeNum, endpoints[nodeNum]);\n    initialPoint = nodeNum;\n  } else {\n    nodeNum = lastPoint % endpoints.length;\n  }\n  if (nodeNum === firstPoint) throw new Error(\"Looped through all\");\n  if (firstPoint !== undefined) initialPoint = firstPoint;\n\n  const data = generateJsonRPCObject(\"KeyAssign\", {\n    verifier,\n    verifier_id: verifierId.toString(),\n  });\n  try {\n    const signedData = await post<SignerResponse>(\n      signerHost,\n      data,\n      {\n        headers: {\n          pubKeyX: torusNodePubs[nodeNum].X,\n          pubKeyY: torusNodePubs[nodeNum].Y,\n          network,\n          clientId,\n        },\n      },\n      { useAPIKey: true }\n    );\n    return await post<void>(\n      endpoints[nodeNum],\n      { ...data, ...signedData },\n      {\n        headers: {\n          \"Content-Type\": \"application/json; charset=utf-8\",\n        },\n      }\n    );\n  } catch (error2: unknown) {\n    const error = error2 as { status: number; message: string };\n    log.error(error.status, error.message, error, \"key assign error\");\n    const acceptedErrorMsgs = [\n      // Slow node\n      \"Timed out\",\n      \"Failed to fetch\",\n      \"cancelled\",\n      \"NetworkError when attempting to fetch resource.\",\n      // Happens when the node is not reachable (dns issue etc)\n      \"TypeError: Failed to fetch\", // All except iOS and Firefox\n      \"TypeError: cancelled\", // iOS\n      \"TypeError: NetworkError when attempting to fetch resource.\", // Firefox\n    ];\n    if (\n      error?.status === 502 ||\n      error?.status === 504 ||\n      error?.status === 401 ||\n      acceptedErrorMsgs.includes(error.message) ||\n      acceptedErrorMsgs.some((x) => error.message?.includes(x)) ||\n      (error.message && error.message.includes(\"reason: getaddrinfo EAI_AGAIN\"))\n    )\n      return legacyKeyAssign({\n        endpoints,\n        torusNodePubs,\n        lastPoint: nodeNum + 1,\n        firstPoint: initialPoint,\n        verifier,\n        verifierId,\n        signerHost,\n        network,\n        clientId,\n      });\n    throw new Error(\n      `Sorry, the Torus Network that powers Web3Auth is currently very busy.\n    We will generate your key in time. Pls try again later. \\n\n    ${error.message || \"\"}`\n    );\n  }\n};\n\nexport const legacyWaitKeyLookup = (endpoints: string[], verifier: string, verifierId: string, timeout: number): Promise<LegacyKeyLookupResult> =>\n  new Promise((resolve, reject) => {\n    setTimeout(() => {\n      legacyKeyLookup(endpoints, verifier, verifierId).then(resolve).catch(reject);\n    }, timeout);\n  });\n","export * from \"./common\";\nexport * from \"./errorUtils\";\nexport * from \"./keyUtils\";\nexport * from \"./langrangeInterpolatePoly\";\nexport * from \"./metadataUtils\";\nexport * from \"./nodeUtils\";\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"elliptic\");","import {\n  INodePub,\n  JRPCResponse,\n  LEGACY_NETWORKS_ROUTE_MAP,\n  METADATA_MAP,\n  SIGNER_MAP,\n  TORUS_LEGACY_NETWORK_TYPE,\n  TORUS_NETWORK_TYPE,\n} from \"@toruslabs/constants\";\nimport { decrypt, Ecies, encrypt, generatePrivate, getPublic } from \"@toruslabs/eccrypto\";\nimport { generateJsonRPCObject, get, post, setAPIKey, setEmbedHost } from \"@toruslabs/http-helpers\";\nimport BN from \"bn.js\";\nimport { curve, ec as EC } from \"elliptic\";\nimport stringify from \"json-stable-stringify\";\n\nimport { config } from \"./config\";\nimport {\n  encParamsBufToHex,\n  generateAddressFromPrivKey,\n  generateAddressFromPubKey,\n  generateRandomPolynomial,\n  getMetadata,\n  getNonce,\n  getOrSetNonce,\n  GetOrSetNonceError,\n  GetPubKeyOrKeyAssign,\n  kCombinations,\n  keccak256,\n  lagrangeInterpolation,\n  legacyKeyAssign,\n  legacyKeyLookup,\n  legacyWaitKeyLookup,\n  retrieveOrImportShare,\n  thresholdSame,\n} from \"./helpers\";\nimport {\n  CommitmentRequestResult,\n  GetOrSetNonceResult,\n  ImportedShare,\n  LegacyShareRequestResult,\n  LegacyVerifierLookupResponse,\n  NonceMetadataParams,\n  SetNonceData,\n  TorusCtorOptions,\n  TorusKey,\n  TorusPublicKey,\n  UserType,\n  v2NonceResultType,\n  VerifierParams,\n} from \"./interfaces\";\nimport log from \"./loglevel\";\nimport { Some } from \"./some\";\n\n// Implement threshold logic wrappers around public APIs\n// of Torus nodes to handle malicious node responses\nclass Torus {\n  public allowHost: string;\n\n  public serverTimeOffset: number;\n\n  public network: TORUS_NETWORK_TYPE;\n\n  public clientId: string;\n\n  public ec: EC;\n\n  public enableOneKey: boolean;\n\n  private signerHost: string;\n\n  private legacyMetadataHost: string;\n\n  constructor({ enableOneKey = false, clientId, network, serverTimeOffset = 0, allowHost, legacyMetadataHost }: TorusCtorOptions) {\n    if (!clientId) throw Error(\"Please provide a valid clientId in constructor\");\n    if (!network) throw Error(\"Please provide a valid network in constructor\");\n    this.ec = new EC(\"secp256k1\");\n    this.serverTimeOffset = serverTimeOffset || 0; // ms\n    this.network = network;\n    this.clientId = clientId;\n    this.allowHost = allowHost || `${SIGNER_MAP[network]}/api/allow`;\n    this.enableOneKey = enableOneKey;\n    this.legacyMetadataHost = legacyMetadataHost || METADATA_MAP[network as TORUS_LEGACY_NETWORK_TYPE];\n    this.signerHost = `${SIGNER_MAP[network as TORUS_LEGACY_NETWORK_TYPE]}/api/sign`;\n  }\n\n  public get isLegacyNetwork(): boolean {\n    const legacyNetwork = LEGACY_NETWORKS_ROUTE_MAP[this.network as TORUS_LEGACY_NETWORK_TYPE];\n    if (legacyNetwork && !legacyNetwork.migrationCompleted) return true;\n    return false;\n  }\n\n  static enableLogging(v = true): void {\n    if (v) {\n      log.enableAll();\n      config.logRequestTracing = true;\n    } else log.disableAll();\n  }\n\n  static setAPIKey(apiKey: string): void {\n    setAPIKey(apiKey);\n  }\n\n  static setEmbedHost(embedHost: string): void {\n    setEmbedHost(embedHost);\n  }\n\n  static isGetOrSetNonceError(err: unknown): boolean {\n    return err instanceof GetOrSetNonceError;\n  }\n\n  static getPostboxKey(torusKey: TorusKey): string {\n    if (torusKey.metadata.typeOfUser === \"v1\") {\n      return torusKey.finalKeyData.privKey || torusKey.oAuthKeyData.privKey;\n    }\n    return torusKey.oAuthKeyData.privKey;\n  }\n\n  async retrieveShares(\n    endpoints: string[],\n    indexes: number[],\n    verifier: string,\n    verifierParams: VerifierParams,\n    idToken: string,\n    extraParams: Record<string, unknown> = {}\n  ): Promise<TorusKey> {\n    if (this.isLegacyNetwork) return this.legacyRetrieveShares(endpoints, indexes, verifier, verifierParams, idToken, extraParams);\n    return retrieveOrImportShare({\n      legacyMetadataHost: this.legacyMetadataHost,\n      serverTimeOffset: this.serverTimeOffset,\n      enableOneKey: this.enableOneKey,\n      ecCurve: this.ec,\n      allowHost: this.allowHost,\n      network: this.network,\n      clientId: this.clientId,\n      endpoints,\n      verifier,\n      verifierParams,\n      idToken,\n      importedShares: [],\n      extraParams,\n    });\n  }\n\n  async getPublicAddress(\n    endpoints: string[],\n    torusNodePubs: INodePub[],\n    { verifier, verifierId, extendedVerifierId }: { verifier: string; verifierId: string; extendedVerifierId?: string }\n  ): Promise<TorusPublicKey> {\n    if (this.isLegacyNetwork) return this.getLegacyPublicAddress(endpoints, torusNodePubs, { verifier, verifierId }, this.enableOneKey);\n    return this.getNewPublicAddress(endpoints, { verifier, verifierId, extendedVerifierId }, this.enableOneKey);\n  }\n\n  async importPrivateKey(\n    endpoints: string[],\n    nodeIndexes: number[],\n    nodePubkeys: INodePub[],\n    verifier: string,\n    verifierParams: VerifierParams,\n    idToken: string,\n    newPrivateKey: string,\n    extraParams: Record<string, unknown> = {}\n  ): Promise<TorusKey> {\n    if (this.isLegacyNetwork) throw new Error(\"This function is not supported on legacy networks\");\n    if (endpoints.length !== nodeIndexes.length) {\n      throw new Error(`length of endpoints array must be same as length of nodeIndexes array`);\n    }\n    const threshold = ~~(endpoints.length / 2) + 1;\n    const degree = threshold - 1;\n    const nodeIndexesBn: BN[] = [];\n\n    const key = this.ec.keyFromPrivate(newPrivateKey.padStart(64, \"0\"), \"hex\");\n    for (const nodeIndex of nodeIndexes) {\n      nodeIndexesBn.push(new BN(nodeIndex));\n    }\n    const privKeyBn = key.getPrivate();\n    const randomNonce = new BN(generatePrivate());\n\n    const oAuthKey = privKeyBn.sub(randomNonce).umod(this.ec.curve.n);\n    const oAuthPubKey = this.ec.keyFromPrivate(oAuthKey.toString(\"hex\").padStart(64, \"0\")).getPublic();\n    const poly = generateRandomPolynomial(this.ec, degree, oAuthKey);\n    const shares = poly.generateShares(nodeIndexesBn);\n    const nonceParams = this.generateNonceMetadataParams(\"getOrSetNonce\", oAuthKey, randomNonce);\n    const nonceData = Buffer.from(stringify(nonceParams.set_data), \"utf8\").toString(\"base64\");\n    const sharesData: ImportedShare[] = [];\n    const encPromises: Promise<Ecies>[] = [];\n    for (let i = 0; i < nodeIndexesBn.length; i++) {\n      const shareJson = shares[nodeIndexesBn[i].toString(\"hex\", 64)].toJSON() as Record<string, string>;\n      if (!nodePubkeys[i]) {\n        throw new Error(`Missing node pub key for node index: ${nodeIndexesBn[i].toString(\"hex\", 64)}`);\n      }\n      const nodePubKey = this.ec.keyFromPublic({ x: nodePubkeys[i].X, y: nodePubkeys[i].Y });\n      encPromises.push(encrypt(Buffer.from(nodePubKey.getPublic().encodeCompressed(\"hex\"), \"hex\"), Buffer.from(shareJson.share, \"hex\")));\n    }\n    const encShares = await Promise.all(encPromises);\n    for (let i = 0; i < nodeIndexesBn.length; i++) {\n      const shareJson = shares[nodeIndexesBn[i].toString(\"hex\", 64)].toJSON() as Record<string, string>;\n      const encParams = encShares[i];\n      const encParamsMetadata = encParamsBufToHex(encParams);\n      const shareData: ImportedShare = {\n        pub_key_x: oAuthPubKey.getX().toString(\"hex\", 64),\n        pub_key_y: oAuthPubKey.getY().toString(\"hex\", 64),\n        encrypted_share: encParamsMetadata.ciphertext,\n        encrypted_share_metadata: encParamsMetadata,\n        node_index: Number.parseInt(shareJson.shareIndex, 16),\n        key_type: \"secp256k1\",\n        nonce_data: nonceData,\n        nonce_signature: nonceParams.signature,\n      };\n      sharesData.push(shareData);\n    }\n\n    return retrieveOrImportShare({\n      legacyMetadataHost: this.legacyMetadataHost,\n      serverTimeOffset: this.serverTimeOffset,\n      enableOneKey: this.enableOneKey,\n      ecCurve: this.ec,\n      allowHost: this.allowHost,\n      network: this.network,\n      clientId: this.clientId,\n      endpoints,\n      verifier,\n      verifierParams,\n      idToken,\n      importedShares: sharesData,\n      extraParams,\n    });\n  }\n\n  /**\n   * Note: use this function only for openlogin tkey account lookups.\n   * this is a legacy function, use getPublicAddress instead for new networks\n   */\n  async getUserTypeAndAddress(\n    endpoints: string[],\n    torusNodePubs: INodePub[],\n    { verifier, verifierId, extendedVerifierId }: { verifier: string; verifierId: string; extendedVerifierId?: string }\n  ): Promise<TorusPublicKey> {\n    if (!this.isLegacyNetwork)\n      return this.getNewPublicAddress(endpoints, { verifier, verifierId, extendedVerifierId }, true) as Promise<TorusPublicKey>;\n    return this.getLegacyPublicAddress(endpoints, torusNodePubs, { verifier, verifierId }, true);\n  }\n\n  private async legacyRetrieveShares(\n    endpoints: string[],\n    indexes: number[],\n    verifier: string,\n    verifierParams: VerifierParams,\n    idToken: string,\n    extraParams: Record<string, unknown> = {}\n  ): Promise<TorusKey> {\n    const promiseArr = [];\n    await get<void>(\n      this.allowHost,\n      {\n        headers: {\n          verifier,\n          verifierId: verifierParams.verifier_id,\n          network: this.network,\n          clientId: this.clientId,\n          enableGating: \"true\",\n        },\n      },\n      { useAPIKey: true }\n    );\n    /*\n      CommitmentRequestParams struct {\n        MessagePrefix      string `json:\"messageprefix\"`\n        TokenCommitment    string `json:\"tokencommitment\"`\n        TempPubX           string `json:\"temppubx\"`\n        TempPubY           string `json:\"temppuby\"`\n        VerifierIdentifier string `json:\"verifieridentifier\"`\n      } \n      */\n\n    // generate temporary private and public key that is used to secure receive shares\n    const tmpKey = generatePrivate();\n    const pubKey = getPublic(tmpKey).toString(\"hex\");\n    const pubKeyX = pubKey.slice(2, 66);\n    const pubKeyY = pubKey.slice(66);\n    const tokenCommitment = keccak256(Buffer.from(idToken, \"utf8\"));\n\n    // make commitment requests to endpoints\n    for (let i = 0; i < endpoints.length; i += 1) {\n      const p = post<JRPCResponse<CommitmentRequestResult>>(\n        endpoints[i],\n        generateJsonRPCObject(\"CommitmentRequest\", {\n          messageprefix: \"mug00\",\n          tokencommitment: tokenCommitment.slice(2),\n          temppubx: pubKeyX,\n          temppuby: pubKeyY,\n          verifieridentifier: verifier,\n        })\n      ).catch((err) => {\n        log.error(\"commitment\", err);\n      });\n      promiseArr.push(p);\n    }\n    /*\n      ShareRequestParams struct {\n        Item []bijson.RawMessage `json:\"item\"`\n      }\n      ShareRequestItem struct {\n        IDToken            string          `json:\"idtoken\"`\n        NodeSignatures     []NodeSignature `json:\"nodesignatures\"`\n        VerifierIdentifier string          `json:\"verifieridentifier\"`\n      }\n      NodeSignature struct {\n        Signature   string\n        Data        string\n        NodePubKeyX string\n        NodePubKeyY string\n      }\n      CommitmentRequestResult struct {\n        Signature string `json:\"signature\"`\n        Data      string `json:\"data\"`\n        NodePubX  string `json:\"nodepubx\"`\n        NodePubY  string `json:\"nodepuby\"`\n      }\n      */\n    // send share request once k + t number of commitment requests have completed\n    return Some<void | JRPCResponse<CommitmentRequestResult>, (void | JRPCResponse<CommitmentRequestResult>)[]>(promiseArr, (resultArr) => {\n      const completedRequests = resultArr.filter((x) => {\n        if (!x || typeof x !== \"object\") {\n          return false;\n        }\n        if (x.error) {\n          return false;\n        }\n        return true;\n      });\n      if (completedRequests.length >= ~~(endpoints.length / 4) * 3 + 1) {\n        return Promise.resolve(resultArr);\n      }\n      return Promise.reject(new Error(`invalid ${JSON.stringify(resultArr)}`));\n    })\n      .then((responses) => {\n        const promiseArrRequest: Promise<void | JRPCResponse<LegacyShareRequestResult>>[] = [];\n        const nodeSigs = [];\n        for (let i = 0; i < responses.length; i += 1) {\n          if (responses[i]) nodeSigs.push((responses[i] as JRPCResponse<CommitmentRequestResult>).result);\n        }\n        for (let i = 0; i < endpoints.length; i += 1) {\n          const p = post<JRPCResponse<LegacyShareRequestResult>>(\n            endpoints[i],\n            generateJsonRPCObject(\"ShareRequest\", {\n              encrypted: \"yes\",\n              item: [{ ...verifierParams, idtoken: idToken, nodesignatures: nodeSigs, verifieridentifier: verifier, ...extraParams }],\n            })\n          ).catch((err) => log.error(\"share req\", err));\n          promiseArrRequest.push(p);\n        }\n        return Some<void | JRPCResponse<LegacyShareRequestResult>, BN | undefined>(promiseArrRequest, async (shareResponses, sharedState) => {\n          /*\n              ShareRequestResult struct {\n                Keys []KeyAssignment\n              }\n                      / KeyAssignmentPublic -\n              type KeyAssignmentPublic struct {\n                Index     big.Int\n                PublicKey common.Point\n                Threshold int\n                Verifiers map[string][]string // Verifier => VerifierID\n              }\n\n              // KeyAssignment -\n              type KeyAssignment struct {\n                KeyAssignmentPublic\n                Share big.Int // Or Si\n              }\n            */\n          // check if threshold number of nodes have returned the same user public key\n          const completedRequests = shareResponses.filter((x) => x);\n          const thresholdPublicKey = thresholdSame(\n            shareResponses.map((x) => x && x.result && x.result.keys[0].PublicKey),\n            ~~(endpoints.length / 2) + 1\n          );\n          // optimistically run lagrange interpolation once threshold number of shares have been received\n          // this is matched against the user public key to ensure that shares are consistent\n          if (completedRequests.length >= ~~(endpoints.length / 2) + 1 && thresholdPublicKey) {\n            const sharePromises: Promise<void | Buffer>[] = [];\n            const nodeIndexes: BN[] = [];\n            for (let i = 0; i < shareResponses.length; i += 1) {\n              const currentShareResponse = shareResponses[i] as JRPCResponse<LegacyShareRequestResult>;\n              if (currentShareResponse?.result?.keys?.length > 0) {\n                currentShareResponse.result.keys.sort((a, b) => new BN(a.Index, 16).cmp(new BN(b.Index, 16)));\n                const firstKey = currentShareResponse.result.keys[0];\n                if (firstKey.Metadata) {\n                  const metadata = {\n                    ephemPublicKey: Buffer.from(firstKey.Metadata.ephemPublicKey, \"hex\"),\n                    iv: Buffer.from(firstKey.Metadata.iv, \"hex\"),\n                    mac: Buffer.from(firstKey.Metadata.mac, \"hex\"),\n                    // mode: Buffer.from(firstKey.Metadata.mode, \"hex\"),\n                  };\n                  sharePromises.push(\n                    decrypt(tmpKey, {\n                      ...metadata,\n                      ciphertext: Buffer.from(Buffer.from(firstKey.Share, \"base64\").toString(\"binary\").padStart(64, \"0\"), \"hex\"),\n                    }).catch((err) => log.debug(\"share decryption\", err))\n                  );\n                } else {\n                  sharePromises.push(Promise.resolve(Buffer.from(firstKey.Share.padStart(64, \"0\"), \"hex\")));\n                }\n              } else {\n                sharePromises.push(Promise.resolve(undefined));\n              }\n              nodeIndexes.push(new BN(indexes[i], 16));\n            }\n            const sharesResolved = await Promise.all(sharePromises);\n            if (sharedState.resolved) return undefined;\n\n            const decryptedShares = sharesResolved.reduce(\n              (acc, curr, index) => {\n                if (curr) acc.push({ index: nodeIndexes[index], value: new BN(curr) });\n                return acc;\n              },\n              [] as { index: BN; value: BN }[]\n            );\n            // run lagrange interpolation on all subsets, faster in the optimistic scenario than berlekamp-welch due to early exit\n            const allCombis = kCombinations(decryptedShares.length, ~~(endpoints.length / 2) + 1);\n            let privateKey: BN | null = null;\n            for (let j = 0; j < allCombis.length; j += 1) {\n              const currentCombi = allCombis[j];\n              const currentCombiShares = decryptedShares.filter((_, index) => currentCombi.includes(index));\n              const shares = currentCombiShares.map((x) => x.value);\n              const indices = currentCombiShares.map((x) => x.index);\n              const derivedPrivateKey = lagrangeInterpolation(this.ec, shares, indices);\n              if (!derivedPrivateKey) continue;\n              const decryptedPubKey = getPublic(Buffer.from(derivedPrivateKey.toString(16, 64), \"hex\")).toString(\"hex\");\n              const decryptedPubKeyX = decryptedPubKey.slice(2, 66);\n              const decryptedPubKeyY = decryptedPubKey.slice(66);\n              if (\n                new BN(decryptedPubKeyX, 16).cmp(new BN(thresholdPublicKey.X, 16)) === 0 &&\n                new BN(decryptedPubKeyY, 16).cmp(new BN(thresholdPublicKey.Y, 16)) === 0\n              ) {\n                privateKey = derivedPrivateKey;\n                break;\n              }\n            }\n            if (privateKey === undefined || privateKey === null) {\n              throw new Error(\"could not derive private key\");\n            }\n            return privateKey;\n          }\n          throw new Error(\"invalid\");\n        });\n      })\n      .then(async (returnedKey) => {\n        const oAuthKey = returnedKey;\n        if (!oAuthKey) throw new Error(\"Invalid private key returned\");\n        const oAuthPubKey = getPublic(Buffer.from(oAuthKey.toString(16, 64), \"hex\")).toString(\"hex\");\n        const oAuthKeyX = oAuthPubKey.slice(2, 66);\n        const oAuthKeyY = oAuthPubKey.slice(66);\n        let metadataNonce: BN;\n        let finalPubKey: curve.base.BasePoint;\n        let typeOfUser: UserType = \"v1\";\n        let pubKeyNonceResult: { X: string; Y: string } | undefined;\n        if (this.enableOneKey) {\n          const nonceResult = await getNonce(this.legacyMetadataHost, this.ec, this.serverTimeOffset, oAuthKeyX, oAuthKeyY, oAuthKey);\n          metadataNonce = new BN(nonceResult.nonce || \"0\", 16);\n          typeOfUser = nonceResult.typeOfUser;\n          if (typeOfUser === \"v2\") {\n            finalPubKey = this.ec\n              .keyFromPublic({ x: oAuthKeyX, y: oAuthKeyY })\n              .getPublic()\n              .add(\n                this.ec\n                  .keyFromPublic({ x: (nonceResult as v2NonceResultType).pubNonce.x, y: (nonceResult as v2NonceResultType).pubNonce.y })\n                  .getPublic()\n              );\n            pubKeyNonceResult = { X: (nonceResult as v2NonceResultType).pubNonce.x, Y: (nonceResult as v2NonceResultType).pubNonce.y };\n          } else {\n            // for imported keys in legacy networks\n            metadataNonce = await getMetadata(this.legacyMetadataHost, { pub_key_X: oAuthKeyX, pub_key_Y: oAuthKeyY });\n            const privateKeyWithNonce = oAuthKey.add(metadataNonce).umod(this.ec.curve.n);\n            finalPubKey = this.ec.keyFromPrivate(privateKeyWithNonce.toString(\"hex\"), \"hex\").getPublic();\n          }\n        } else {\n          // for imported keys in legacy networks\n          metadataNonce = await getMetadata(this.legacyMetadataHost, { pub_key_X: oAuthKeyX, pub_key_Y: oAuthKeyY });\n          const privateKeyWithNonce = oAuthKey.add(metadataNonce).umod(this.ec.curve.n);\n          finalPubKey = this.ec.keyFromPrivate(privateKeyWithNonce.toString(\"hex\"), \"hex\").getPublic();\n        }\n\n        const oAuthKeyAddress = generateAddressFromPrivKey(this.ec, oAuthKey);\n\n        let finalPrivKey = \"\"; // it is empty for v2 user upgraded to 2/n\n        if (typeOfUser === \"v1\" || (typeOfUser === \"v2\" && metadataNonce.gt(new BN(0)))) {\n          const privateKeyWithNonce = oAuthKey.add(metadataNonce).umod(this.ec.curve.n);\n          finalPrivKey = privateKeyWithNonce.toString(\"hex\", 64).padStart(64, \"0\");\n        }\n\n        let isUpgraded: boolean | null = false;\n        if (typeOfUser === \"v1\") {\n          isUpgraded = null;\n        } else if (typeOfUser === \"v2\") {\n          isUpgraded = metadataNonce.eq(new BN(\"0\"));\n        }\n\n        // deriving address from pub key coz pubkey is always available\n        // but finalPrivKey won't be available for  v2 user upgraded to 2/n\n        let finalEvmAddress = \"\";\n        if (finalPubKey) {\n          finalEvmAddress = generateAddressFromPubKey(this.ec, finalPubKey.getX(), finalPubKey.getY());\n          log.debug(\"> torus.js/retrieveShares\", { finalEvmAddress });\n        } else {\n          throw new Error(\"Invalid public key, this might be a bug, please report this to web3auth team\");\n        }\n\n        return {\n          finalKeyData: {\n            evmAddress: finalEvmAddress,\n            X: finalPubKey ? finalPubKey.getX().toString(16, 64) : \"\", // this is final pub x user before and after updating to 2/n\n            Y: finalPubKey ? finalPubKey.getY().toString(16, 64) : \"\", // this is final pub y user before and after updating to 2/n\n            privKey: finalPrivKey,\n          },\n          oAuthKeyData: {\n            evmAddress: oAuthKeyAddress,\n            X: oAuthKeyX,\n            Y: oAuthKeyY,\n            privKey: oAuthKey.toString(\"hex\", 64).padStart(64, \"0\"),\n          },\n          sessionData: {\n            sessionTokenData: [],\n            sessionAuthKey: \"\",\n          },\n          metadata: {\n            pubNonce: pubKeyNonceResult,\n            nonce: metadataNonce,\n            typeOfUser: typeOfUser as UserType,\n            upgraded: isUpgraded,\n          },\n          nodesData: {\n            nodeIndexes: [],\n          },\n        };\n      });\n  }\n\n  private async getLegacyPublicAddress(\n    endpoints: string[],\n    torusNodePubs: INodePub[],\n    { verifier, verifierId }: { verifier: string; verifierId: string },\n    enableOneKey: boolean\n  ): Promise<TorusPublicKey> {\n    log.debug(\"> torus.js/getPublicAddress\", { endpoints, torusNodePubs, verifier, verifierId });\n\n    let finalKeyResult: LegacyVerifierLookupResponse | undefined;\n    let isNewKey = false;\n\n    const { keyResult, errorResult } = (await legacyKeyLookup(endpoints, verifier, verifierId)) || {};\n    if (errorResult && JSON.stringify(errorResult).includes(\"Verifier not supported\")) {\n      // change error msg\n      throw new Error(`Verifier not supported. Check if you: \\n\n      1. Are on the right network (Torus testnet/mainnet) \\n\n      2. Have setup a verifier on dashboard.web3auth.io?`);\n    } else if (errorResult && JSON.stringify(errorResult).includes(\"Verifier + VerifierID has not yet been assigned\")) {\n      await legacyKeyAssign({\n        endpoints,\n        torusNodePubs,\n        lastPoint: undefined,\n        firstPoint: undefined,\n        verifier,\n        verifierId,\n        signerHost: this.signerHost,\n        network: this.network,\n        clientId: this.clientId,\n      });\n      const assignResult = await legacyWaitKeyLookup(endpoints, verifier, verifierId, 1000);\n      finalKeyResult = assignResult?.keyResult;\n      isNewKey = true;\n    } else if (keyResult) {\n      finalKeyResult = keyResult;\n    } else {\n      throw new Error(`node results do not match at first lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`);\n    }\n    log.debug(\"> torus.js/getPublicAddress\", { finalKeyResult, isNewKey });\n\n    if (finalKeyResult) {\n      return this.formatLegacyPublicKeyData({\n        finalKeyResult,\n        isNewKey,\n        enableOneKey,\n      });\n    }\n    throw new Error(`node results do not match at final lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`);\n  }\n\n  private generateNonceMetadataParams(operation: string, privateKey: BN, nonce?: BN): NonceMetadataParams {\n    const key = this.ec.keyFromPrivate(privateKey.toString(\"hex\", 64));\n    const setData: Partial<SetNonceData> = {\n      operation,\n      timestamp: new BN(~~(this.serverTimeOffset + Date.now() / 1000)).toString(16),\n    };\n\n    if (nonce) {\n      setData.data = nonce.toString(\"hex\", 64);\n    }\n    const sig = key.sign(keccak256(Buffer.from(stringify(setData), \"utf8\")).slice(2));\n    return {\n      pub_key_X: key.getPublic().getX().toString(\"hex\", 64),\n      pub_key_Y: key.getPublic().getY().toString(\"hex\", 64),\n      set_data: setData,\n      signature: Buffer.from(sig.r.toString(16, 64) + sig.s.toString(16, 64) + new BN(\"\").toString(16, 2), \"hex\").toString(\"base64\"),\n    };\n  }\n\n  private async getNewPublicAddress(\n    endpoints: string[],\n    { verifier, verifierId, extendedVerifierId }: { verifier: string; verifierId: string; extendedVerifierId?: string },\n    enableOneKey: boolean\n  ): Promise<TorusPublicKey> {\n    log.debug(\"> torus.js/getPublicAddress\", { endpoints, verifier, verifierId });\n    const keyAssignResult = await GetPubKeyOrKeyAssign({\n      endpoints,\n      network: this.network,\n      verifier,\n      verifierId,\n      extendedVerifierId,\n    });\n    const { errorResult, keyResult, nodeIndexes = [] } = keyAssignResult;\n    const { nonceResult } = keyAssignResult;\n    if (errorResult && JSON.stringify(errorResult).toLowerCase().includes(\"verifier not supported\")) {\n      // change error msg\n      throw new Error(`Verifier not supported. Check if you: \\n\n      1. Are on the right network (Torus testnet/mainnet) \\n\n      2. Have setup a verifier on dashboard.web3auth.io?`);\n    }\n    if (errorResult) {\n      throw new Error(`node results do not match at first lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`);\n    }\n    log.debug(\"> torus.js/getPublicAddress\", { keyResult });\n    if (!keyResult?.keys) {\n      throw new Error(`node results do not match at final lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`);\n    }\n\n    // no need of nonce for extendedVerifierId (tss verifier id)\n    if (!nonceResult && !extendedVerifierId && !LEGACY_NETWORKS_ROUTE_MAP[this.network as TORUS_LEGACY_NETWORK_TYPE]) {\n      throw new GetOrSetNonceError(\"metadata nonce is missing in share response\");\n    }\n    const { pub_key_X: X, pub_key_Y: Y } = keyResult.keys[0];\n    let pubNonce: { X: string; Y: string } | undefined;\n    const nonce = new BN(nonceResult?.nonce || \"0\", 16);\n    let oAuthPubKey: curve.base.BasePoint;\n    let finalPubKey: curve.base.BasePoint;\n    if (extendedVerifierId) {\n      // for tss key no need to add pub nonce\n      finalPubKey = this.ec.keyFromPublic({ x: X, y: Y }).getPublic();\n      oAuthPubKey = finalPubKey;\n    } else if (LEGACY_NETWORKS_ROUTE_MAP[this.network as TORUS_LEGACY_NETWORK_TYPE]) {\n      return this.formatLegacyPublicKeyData({\n        isNewKey: keyResult.is_new_key,\n        enableOneKey,\n        finalKeyResult: {\n          keys: keyResult.keys,\n        },\n      });\n    } else {\n      const v2NonceResult = nonceResult as v2NonceResultType;\n      oAuthPubKey = this.ec.keyFromPublic({ x: X, y: Y }).getPublic();\n      finalPubKey = this.ec\n        .keyFromPublic({ x: X, y: Y })\n        .getPublic()\n        .add(this.ec.keyFromPublic({ x: v2NonceResult.pubNonce.x, y: v2NonceResult.pubNonce.y }).getPublic());\n\n      pubNonce = { X: v2NonceResult.pubNonce.x, Y: v2NonceResult.pubNonce.y };\n    }\n\n    if (!oAuthPubKey) {\n      throw new Error(\"Unable to derive oAuthPubKey\");\n    }\n    const oAuthX = oAuthPubKey.getX().toString(16, 64);\n    const oAuthY = oAuthPubKey.getY().toString(16, 64);\n    const oAuthAddress = generateAddressFromPubKey(this.ec, oAuthPubKey.getX(), oAuthPubKey.getY());\n    log.debug(\"> torus.js/getPublicAddress, oAuthKeyData\", { X: oAuthX, Y: oAuthY, oAuthAddress, nonce: nonce?.toString(16), pubNonce });\n\n    if (!finalPubKey) {\n      throw new Error(\"Unable to derive finalPubKey\");\n    }\n    const finalX = finalPubKey ? finalPubKey.getX().toString(16, 64) : \"\";\n    const finalY = finalPubKey ? finalPubKey.getY().toString(16, 64) : \"\";\n    const finalAddress = finalPubKey ? generateAddressFromPubKey(this.ec, finalPubKey.getX(), finalPubKey.getY()) : \"\";\n    return {\n      oAuthKeyData: {\n        evmAddress: oAuthAddress,\n        X: oAuthX,\n        Y: oAuthY,\n      },\n      finalKeyData: {\n        evmAddress: finalAddress,\n        X: finalX,\n        Y: finalY,\n      },\n      metadata: {\n        pubNonce,\n        nonce,\n        upgraded: (nonceResult as v2NonceResultType)?.upgraded || false,\n        typeOfUser: \"v2\",\n      },\n      nodesData: {\n        nodeIndexes,\n      },\n    };\n  }\n\n  private async formatLegacyPublicKeyData(params: {\n    finalKeyResult: LegacyVerifierLookupResponse;\n    enableOneKey: boolean;\n    isNewKey: boolean;\n  }): Promise<TorusPublicKey> {\n    const { finalKeyResult, enableOneKey, isNewKey } = params;\n    const { pub_key_X: X, pub_key_Y: Y } = finalKeyResult.keys[0];\n    let nonceResult: GetOrSetNonceResult;\n    let nonce: BN;\n    let finalPubKey: curve.base.BasePoint;\n    let typeOfUser: GetOrSetNonceResult[\"typeOfUser\"];\n    let pubNonce: { X: string; Y: string } | undefined;\n\n    const oAuthPubKey = this.ec.keyFromPublic({ x: X, y: Y }).getPublic();\n\n    if (enableOneKey) {\n      try {\n        nonceResult = await getOrSetNonce(this.legacyMetadataHost, this.ec, this.serverTimeOffset, X, Y, undefined, !isNewKey);\n        nonce = new BN(nonceResult.nonce || \"0\", 16);\n        typeOfUser = nonceResult.typeOfUser;\n      } catch {\n        throw new GetOrSetNonceError();\n      }\n      if (nonceResult.typeOfUser === \"v1\") {\n        nonce = await getMetadata(this.legacyMetadataHost, { pub_key_X: X, pub_key_Y: Y });\n        finalPubKey = this.ec\n          .keyFromPublic({ x: X, y: Y })\n          .getPublic()\n          .add(this.ec.keyFromPrivate(nonce.toString(16, 64), \"hex\").getPublic());\n      } else if (nonceResult.typeOfUser === \"v2\") {\n        finalPubKey = this.ec\n          .keyFromPublic({ x: X, y: Y })\n          .getPublic()\n          .add(this.ec.keyFromPublic({ x: nonceResult.pubNonce.x, y: nonceResult.pubNonce.y }).getPublic());\n        pubNonce = { X: nonceResult.pubNonce.x, Y: nonceResult.pubNonce.y };\n      } else {\n        throw new Error(\"getOrSetNonce should always return typeOfUser.\");\n      }\n    } else {\n      typeOfUser = \"v1\";\n      nonce = await getMetadata(this.legacyMetadataHost, { pub_key_X: X, pub_key_Y: Y });\n      finalPubKey = this.ec\n        .keyFromPublic({ x: X, y: Y })\n        .getPublic()\n        .add(this.ec.keyFromPrivate(nonce.toString(16, 64), \"hex\").getPublic());\n    }\n\n    if (!oAuthPubKey) {\n      throw new Error(\"Unable to derive oAuthPubKey\");\n    }\n    const oAuthX = oAuthPubKey.getX().toString(16, 64);\n    const oAuthY = oAuthPubKey.getY().toString(16, 64);\n    const oAuthAddress = generateAddressFromPubKey(this.ec, oAuthPubKey.getX(), oAuthPubKey.getY());\n    log.debug(\"> torus.js/getPublicAddress, oAuthKeyData\", { X: oAuthX, Y: oAuthY, oAuthAddress, nonce: nonce?.toString(16), pubNonce });\n\n    if (typeOfUser === \"v2\" && !finalPubKey) {\n      throw new Error(\"Unable to derive finalPubKey\");\n    }\n    const finalX = finalPubKey ? finalPubKey.getX().toString(16, 64) : \"\";\n    const finalY = finalPubKey ? finalPubKey.getY().toString(16, 64) : \"\";\n    const finalAddress = finalPubKey ? generateAddressFromPubKey(this.ec, finalPubKey.getX(), finalPubKey.getY()) : \"\";\n    return {\n      oAuthKeyData: {\n        evmAddress: oAuthAddress,\n        X: oAuthX,\n        Y: oAuthY,\n      },\n      finalKeyData: {\n        evmAddress: finalAddress,\n        X: finalX,\n        Y: finalY,\n      },\n      metadata: {\n        pubNonce,\n        nonce,\n        upgraded: (nonceResult as v2NonceResultType)?.upgraded || false,\n        typeOfUser,\n      },\n      nodesData: {\n        nodeIndexes: [],\n      },\n    };\n  }\n}\n\nexport default Torus;\n","export * from \"./constants\";\nexport * from \"./helpers\";\nexport * from \"./interfaces\";\nexport { default as Point } from \"./Point\";\nexport { default as Polynomial } from \"./Polynomial\";\nexport { default as Share } from \"./Share\";\nexport { default } from \"./torus\";\n"],"names":["JRPC_METHODS","GET_OR_SET_KEY","COMMITMENT_REQUEST","IMPORT_SHARE","GET_SHARE_OR_KEY_ASSIGN","JsonStringify","normalizeKeysResult","result","finalResult","keys","is_new_key","length","map","key","pub_key_X","pub_key_Y","address","kCombinations","s","k","set","Array","from","_","i","reduce","acc","cur","combs","tailCombs","slice","j","push","thresholdSame","arr","t","hashMap","str","undefined","encParamsBufToHex","encParams","iv","Buffer","toString","ephemPublicKey","ciphertext","mac","mode","encParamsHexToBuf","eciesData","GetOrSetNonceError","Error","loglevel","log","getLogger","disableAll","BN","keccak256","keccakHash","a","hash","stripHexPrefix","startsWith","toChecksumAddress","hexAddress","toLowerCase","buf","ret","parseInt","toUpperCase","generateAddressFromPrivKey","ecCurve","privateKey","keyFromPrivate","publicKey","getPublic","encode","info","evmAddressLower","generateAddressFromPubKey","publicKeyX","publicKeyY","keyFromPublic","x","y","getPostboxKeyFrom1OutOf1","privKey","nonce","privKeyBN","nonceBN","sub","umod","curve","n","Point","constructor","_defineProperty","enc","concat","Share","shareIndex","share","fromJSON","value","toJSON","Polynomial","polynomial","getThreshold","polyEval","tmpX","xi","sum","add","tmp","mul","generateShares","shareIndexes","newShareIndexes","index","shares","generatePrivate","generatePrivateExcludingIndexes","find","el","eq","generateEmptyBNArray","denominator","innerPoints","interpolationPoly","coefficients","d","cmp","invm","newCoefficients","pointSort","pointArrClone","sort","b","lagrange","unsortedPoints","sortedPoints","lagrangeInterpolatePolynomial","points","lagrangeInterpolation","nodeIndex","secret","upper","lower","neg","temp","delta","generateRandomPolynomial","degree","deterministicShares","actualS","poly","isArray","forEach","Object","values","decrypt","post","stringify","convertMetadataToNonce","params","message","decryptNodeData","ciphertextHex","metadata","decryptedSigBuffer","_objectSpread","generateMetadataParams","serverTimeOffset","setData","data","timestamp","Date","now","sig","sign","getX","getY","set_data","signature","r","getMetadata","legacyMetadataHost","options","arguments","metadataResponse","useAPIKey","error","getOrSetNonce","X","Y","getOnly","msg","getNonce","config","logRequestTracing","capitalizeFirstLetter","charAt","SomeError","_ref","errors","responses","predicate","join","JSON","Some","promises","Promise","resolve","reject","finishedCount","sharedState","resolved","errorArr","fill","resultArr","predicateError","then","resp","catch","finally","z","_error$data","id","it","_predicateError","LEGACY_NETWORKS_ROUTE_MAP","generateJsonRPCObject","get","GetPubKeyOrKeyAssign","endpoints","network","verifier","verifierId","extendedVerifierId","lookupPromises","verifier_id","extended_verifier_id","one_key_flow","fetch_node_index","logTracingHeader","err","nonceResult","nodeIndexes","lookupResults","lookupPubKeys","filter","x1","_x1$result","pubNonceX","nonce_data","pubNonce","errorResult","x2","keyResult","x3","currentNodePubKey","thresholdPubKey","node_index","retrieveOrImportShare","enableOneKey","allowHost","clientId","verifierParams","idToken","importedShares","extraParams","headers","enableGating","promiseArr","sessionAuthKey","pubKey","pubKeyX","pubKeyY","tokenCommitment","isImportShareReq","p","messageprefix","tokencommitment","temppubx","temppuby","verifieridentifier","completedRequests","requiredNodeResult","_resp$result","nodeindex","promiseArrRequest","nodeSigs","importedShare","encrypted","use_temp","item","idtoken","nodesignatures","pub_key_x","pub_key_y","encrypted_share","encrypted_share_metadata","key_type","nonce_signature","thresholdNonceData","shareResponses","pubkeys","public_key","_x$result$keys$0$nonc","thresholdPublicKey","thresholdReqCount","sharePromises","sessionTokenSigPromises","sessionTokenPromises","sessionTokenData","isNewKeyResponses","currentShareResponse","session_tokens","sessionTokens","session_token_metadata","sessionTokenMetadata","session_token_sigs","sessionTokenSigs","session_token_sig_metadata","sessionTokenSigMetadata","isNewKey","_sessionTokenSigMetad","debug","_sessionTokenMetadata","latestKey","share_metadata","padStart","allPromises","all","sharesResolved","sessionSigsResolved","sessionTokensResolved","validSigs","minThresholdRequired","validTokens","token","node_pubx","node_puby","decryptedShares","curr","allCombis","currentCombi","currentCombiShares","includes","indices","derivedPrivateKey","decryptedPubKey","decryptedPubKeyX","decryptedPubKeyY","thresholdIsNewKey","res","_nonceResult","oAuthKey","oAuthPubKey","oAuthPubkeyX","oAuthPubkeyY","metadataNonce","finalPubKey","typeOfUser","privateKeyWithNonce","oAuthKeyAddress","finalEvmAddress","finalPrivKey","gt","isUpgraded","finalKeyData","evmAddress","oAuthKeyData","sessionData","upgraded","nodesData","toNumber","legacyKeyLookup","lookupShares","legacyKeyAssign","torusNodePubs","lastPoint","firstPoint","signerHost","nodeNum","initialPoint","Math","floor","random","signedData","error2","status","acceptedErrorMsgs","some","_error$message","legacyWaitKeyLookup","timeout","setTimeout","METADATA_MAP","SIGNER_MAP","encrypt","setAPIKey","setEmbedHost","ec","EC","Torus","isLegacyNetwork","legacyNetwork","migrationCompleted","enableLogging","v","enableAll","apiKey","embedHost","isGetOrSetNonceError","getPostboxKey","torusKey","retrieveShares","indexes","legacyRetrieveShares","getPublicAddress","_ref2","getLegacyPublicAddress","getNewPublicAddress","importPrivateKey","nodePubkeys","newPrivateKey","threshold","nodeIndexesBn","privKeyBn","getPrivate","randomNonce","nonceParams","generateNonceMetadataParams","nonceData","sharesData","encPromises","shareJson","nodePubKey","encodeCompressed","encShares","encParamsMetadata","shareData","Number","getUserTypeAndAddress","_ref3","tmpKey","PublicKey","_currentShareResponse","Index","firstKey","Metadata","returnedKey","oAuthKeyX","oAuthKeyY","pubKeyNonceResult","_ref4","finalKeyResult","assignResult","formatLegacyPublicKeyData","operation","_ref5","keyAssignResult","v2NonceResult","oAuthX","oAuthY","oAuthAddress","finalX","finalY","finalAddress","_nonce","default"],"sourceRoot":""}