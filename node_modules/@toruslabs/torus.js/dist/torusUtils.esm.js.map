{"version":3,"file":"torusUtils.esm.js","sources":["../src/constants.ts","../src/helpers/common.ts","../src/helpers/errorUtils.ts","../src/loglevel.ts","../src/helpers/keyUtils.ts","../src/Point.ts","../src/Share.ts","../src/Polynomial.ts","../src/helpers/langrangeInterpolatePoly.ts","../src/helpers/metadataUtils.ts","../src/config.ts","../src/some.ts","../src/helpers/nodeUtils.ts","../src/torus.ts"],"sourcesContent":["export const JRPC_METHODS = {\n  GET_OR_SET_KEY: \"GetPubKeyOrKeyAssign\",\n  COMMITMENT_REQUEST: \"CommitmentRequest\",\n  IMPORT_SHARE: \"ImportShare\",\n  GET_SHARE_OR_KEY_ASSIGN: \"GetShareOrKeyAssign\",\n};\n","import { Ecies } from \"@toruslabs/eccrypto\";\nimport JsonStringify from \"json-stable-stringify\";\n\nimport { EciesHex, VerifierLookupResponse } from \"../interfaces\";\n\n// this function normalizes the result from nodes before passing the result to threshold check function\n// For ex: some fields returns by nodes might be different from each other\n// like created_at field might vary and nonce_data might not be returned by all nodes because\n// of the metadata implementation in sapphire.\nexport const normalizeKeysResult = (result: VerifierLookupResponse) => {\n  const finalResult: Pick<VerifierLookupResponse, \"keys\" | \"is_new_key\"> = {\n    keys: [],\n    is_new_key: result.is_new_key,\n  };\n  if (result && result.keys && result.keys.length > 0) {\n    finalResult.keys = result.keys.map((key) => {\n      return {\n        pub_key_X: key.pub_key_X,\n        pub_key_Y: key.pub_key_Y,\n        address: key.address,\n      };\n    });\n  }\n  return finalResult;\n};\n\nexport const kCombinations = (s: number | number[], k: number): number[][] => {\n  let set = s;\n  if (typeof set === \"number\") {\n    set = Array.from({ length: set }, (_, i) => i);\n  }\n  if (k > set.length || k <= 0) {\n    return [];\n  }\n\n  if (k === set.length) {\n    return [set];\n  }\n\n  if (k === 1) {\n    return set.reduce((acc, cur) => [...acc, [cur]], [] as number[][]);\n  }\n\n  const combs: number[][] = [];\n  let tailCombs: number[][] = [];\n\n  for (let i = 0; i <= set.length - k + 1; i += 1) {\n    tailCombs = kCombinations(set.slice(i + 1), k - 1);\n    for (let j = 0; j < tailCombs.length; j += 1) {\n      combs.push([set[i], ...tailCombs[j]]);\n    }\n  }\n\n  return combs;\n};\n\nexport const thresholdSame = <T>(arr: T[], t: number): T | undefined => {\n  const hashMap: Record<string, number> = {};\n  for (let i = 0; i < arr.length; i += 1) {\n    const str = JsonStringify(arr[i]);\n    hashMap[str] = hashMap[str] ? hashMap[str] + 1 : 1;\n    if (hashMap[str] === t) {\n      return arr[i];\n    }\n  }\n  return undefined;\n};\n\nexport function encParamsBufToHex(encParams: Ecies): EciesHex {\n  return {\n    iv: Buffer.from(encParams.iv).toString(\"hex\"),\n    ephemPublicKey: Buffer.from(encParams.ephemPublicKey).toString(\"hex\"),\n    ciphertext: Buffer.from(encParams.ciphertext).toString(\"hex\"),\n    mac: Buffer.from(encParams.mac).toString(\"hex\"),\n    mode: \"AES256\",\n  };\n}\n\nexport function encParamsHexToBuf(eciesData: Omit<EciesHex, \"ciphertext\">): Omit<Ecies, \"ciphertext\"> {\n  return {\n    ephemPublicKey: Buffer.from(eciesData.ephemPublicKey, \"hex\"),\n    iv: Buffer.from(eciesData.iv, \"hex\"),\n    mac: Buffer.from(eciesData.mac, \"hex\"),\n  };\n}\n","export class GetOrSetNonceError extends Error {}\n","import loglevel from \"loglevel\";\n\nconst log = loglevel.getLogger(\"torus.js\");\nlog.disableAll();\n\nexport default log;\n","import BN from \"bn.js\";\nimport { ec } from \"elliptic\";\nimport { keccak256 as keccakHash } from \"ethereum-cryptography/keccak\";\n\nimport log from \"../loglevel\";\n\nexport function keccak256(a: Buffer): string {\n  const hash = Buffer.from(keccakHash(a)).toString(\"hex\");\n  return `0x${hash}`;\n}\n\nexport function stripHexPrefix(str: string): string {\n  return str.startsWith(\"0x\") ? str.slice(2) : str;\n}\n\nexport function toChecksumAddress(hexAddress: string): string {\n  const address = stripHexPrefix(hexAddress).toLowerCase();\n\n  const buf = Buffer.from(address, \"utf8\");\n  const hash = Buffer.from(keccakHash(buf)).toString(\"hex\");\n  let ret = \"0x\";\n\n  for (let i = 0; i < address.length; i++) {\n    if (parseInt(hash[i], 16) >= 8) {\n      ret += address[i].toUpperCase();\n    } else {\n      ret += address[i];\n    }\n  }\n\n  return ret;\n}\n\nexport function generateAddressFromPrivKey(ecCurve: ec, privateKey: BN): string {\n  const key = ecCurve.keyFromPrivate(privateKey.toString(\"hex\", 64), \"hex\");\n  const publicKey = key.getPublic().encode(\"hex\", false).slice(2);\n  log.info(publicKey, \"public key\");\n  const evmAddressLower = `0x${keccak256(Buffer.from(publicKey, \"hex\")).slice(64 - 38)}`;\n  return toChecksumAddress(evmAddressLower);\n}\n\nexport function generateAddressFromPubKey(ecCurve: ec, publicKeyX: BN, publicKeyY: BN): string {\n  const key = ecCurve.keyFromPublic({ x: publicKeyX.toString(\"hex\", 64), y: publicKeyY.toString(\"hex\", 64) });\n  const publicKey = key.getPublic().encode(\"hex\", false).slice(2);\n  log.info(key.getPublic().encode(\"hex\", false), \"public key\");\n  const evmAddressLower = `0x${keccak256(Buffer.from(publicKey, \"hex\")).slice(64 - 38)}`;\n  return toChecksumAddress(evmAddressLower);\n}\n\nexport function getPostboxKeyFrom1OutOf1(ecCurve: ec, privKey: string, nonce: string): string {\n  const privKeyBN = new BN(privKey, 16);\n  const nonceBN = new BN(nonce, 16);\n  return privKeyBN.sub(nonceBN).umod(ecCurve.curve.n).toString(\"hex\");\n}\n","import BN from \"bn.js\";\nimport { ec as EC } from \"elliptic\";\n\nimport { BNString } from \"./interfaces\";\n\nclass Point {\n  x: BN;\n\n  y: BN;\n\n  ecCurve: EC;\n\n  constructor(x: BNString, y: BNString, ecCurve: EC) {\n    this.x = new BN(x, \"hex\");\n    this.y = new BN(y, \"hex\");\n    this.ecCurve = ecCurve;\n  }\n\n  encode(enc: string): Buffer {\n    switch (enc) {\n      case \"arr\":\n        return Buffer.concat([Buffer.from(\"04\", \"hex\"), Buffer.from(this.x.toString(\"hex\"), \"hex\"), Buffer.from(this.y.toString(\"hex\"), \"hex\")]);\n      case \"elliptic-compressed\": {\n        const key = this.ecCurve.keyFromPublic({ x: this.x.toString(\"hex\", 64), y: this.y.toString(\"hex\", 64) }, \"hex\");\n        return Buffer.from(key.getPublic(true, \"hex\"));\n      }\n      default:\n        throw new Error(\"encoding doesn't exist in Point\");\n    }\n  }\n}\n\nexport default Point;\n","import BN from \"bn.js\";\n\nimport { BNString, StringifiedType } from \"./interfaces\";\n\nclass Share {\n  share: BN;\n\n  shareIndex: BN;\n\n  constructor(shareIndex: BNString, share: BNString) {\n    this.share = new BN(share, \"hex\");\n    this.shareIndex = new BN(shareIndex, \"hex\");\n  }\n\n  static fromJSON(value: StringifiedType): Share {\n    const { share, shareIndex } = value;\n    return new Share(shareIndex as BNString, share as BNString);\n  }\n\n  toJSON(): StringifiedType {\n    return {\n      share: this.share.toString(\"hex\"),\n      shareIndex: this.shareIndex.toString(\"hex\"),\n    };\n  }\n}\n\nexport default Share;\n","import BN from \"bn.js\";\nimport { ec as EC } from \"elliptic\";\n\nimport { BNString } from \"./interfaces\";\nimport Share from \"./Share\";\n\nexport type ShareMap = {\n  [x: string]: Share;\n};\n\nclass Polynomial {\n  polynomial: BN[];\n\n  ecCurve: EC;\n\n  constructor(polynomial: BN[], ecCurve: EC) {\n    this.polynomial = polynomial;\n    this.ecCurve = ecCurve;\n  }\n\n  getThreshold(): number {\n    return this.polynomial.length;\n  }\n\n  polyEval(x: BNString): BN {\n    const tmpX = new BN(x, \"hex\");\n    let xi = new BN(tmpX);\n    let sum = new BN(0);\n    sum = sum.add(this.polynomial[0]);\n    for (let i = 1; i < this.polynomial.length; i += 1) {\n      const tmp = xi.mul(this.polynomial[i]);\n      sum = sum.add(tmp);\n      sum = sum.umod(this.ecCurve.curve.n);\n      xi = xi.mul(new BN(tmpX));\n      xi = xi.umod(this.ecCurve.curve.n);\n    }\n    return sum;\n  }\n\n  generateShares(shareIndexes: BNString[]): ShareMap {\n    const newShareIndexes = shareIndexes.map((index) => {\n      if (typeof index === \"number\") {\n        return new BN(index);\n      }\n      if (index instanceof BN) {\n        return index;\n      }\n      if (typeof index === \"string\") {\n        return new BN(index, \"hex\");\n      }\n      return index;\n    });\n\n    const shares: ShareMap = {};\n    for (let x = 0; x < newShareIndexes.length; x += 1) {\n      shares[newShareIndexes[x].toString(\"hex\", 64)] = new Share(newShareIndexes[x], this.polyEval(newShareIndexes[x]));\n    }\n    return shares;\n  }\n}\n\nexport default Polynomial;\n","import { generatePrivate } from \"@toruslabs/eccrypto\";\nimport BN from \"bn.js\";\nimport { ec as EC } from \"elliptic\";\n\nimport Point from \"../Point\";\nimport Polynomial from \"../Polynomial\";\nimport Share from \"../Share\";\n\nfunction generatePrivateExcludingIndexes(shareIndexes: BN[]): BN {\n  const key = new BN(generatePrivate());\n  if (shareIndexes.find((el) => el.eq(key))) {\n    return generatePrivateExcludingIndexes(shareIndexes);\n  }\n  return key;\n}\nconst generateEmptyBNArray = (length: number): BN[] => Array.from({ length }, () => new BN(0));\n\nconst denominator = (ecCurve: EC, i: number, innerPoints: Point[]) => {\n  let result = new BN(1);\n  const xi = innerPoints[i].x;\n  for (let j = innerPoints.length - 1; j >= 0; j -= 1) {\n    if (i !== j) {\n      let tmp = new BN(xi);\n      tmp = tmp.sub(innerPoints[j].x);\n      tmp = tmp.umod(ecCurve.curve.n);\n      result = result.mul(tmp);\n      result = result.umod(ecCurve.curve.n);\n    }\n  }\n  return result;\n};\n\nconst interpolationPoly = (ecCurve: EC, i: number, innerPoints: Point[]): BN[] => {\n  let coefficients = generateEmptyBNArray(innerPoints.length);\n  const d = denominator(ecCurve, i, innerPoints);\n  if (d.cmp(new BN(0)) === 0) {\n    throw new Error(\"Denominator for interpolationPoly is 0\");\n  }\n  coefficients[0] = d.invm(ecCurve.curve.n);\n  for (let k = 0; k < innerPoints.length; k += 1) {\n    const newCoefficients = generateEmptyBNArray(innerPoints.length);\n    if (k !== i) {\n      let j: number;\n      if (k < i) {\n        j = k + 1;\n      } else {\n        j = k;\n      }\n      j -= 1;\n      for (; j >= 0; j -= 1) {\n        newCoefficients[j + 1] = newCoefficients[j + 1].add(coefficients[j]).umod(ecCurve.curve.n);\n        let tmp = new BN(innerPoints[k].x);\n        tmp = tmp.mul(coefficients[j]).umod(ecCurve.curve.n);\n        newCoefficients[j] = newCoefficients[j].sub(tmp).umod(ecCurve.curve.n);\n      }\n      coefficients = newCoefficients;\n    }\n  }\n  return coefficients;\n};\n\nconst pointSort = (innerPoints: Point[]): Point[] => {\n  const pointArrClone = [...innerPoints];\n  pointArrClone.sort((a, b) => a.x.cmp(b.x));\n  return pointArrClone;\n};\n\nconst lagrange = (ecCurve: EC, unsortedPoints: Point[]) => {\n  const sortedPoints = pointSort(unsortedPoints);\n  const polynomial = generateEmptyBNArray(sortedPoints.length);\n  for (let i = 0; i < sortedPoints.length; i += 1) {\n    const coefficients = interpolationPoly(ecCurve, i, sortedPoints);\n    for (let k = 0; k < sortedPoints.length; k += 1) {\n      let tmp = new BN(sortedPoints[i].y);\n      tmp = tmp.mul(coefficients[k]);\n      polynomial[k] = polynomial[k].add(tmp).umod(ecCurve.curve.n);\n    }\n  }\n  return new Polynomial(polynomial, ecCurve);\n};\n\nexport function lagrangeInterpolatePolynomial(ecCurve: EC, points: Point[]): Polynomial {\n  return lagrange(ecCurve, points);\n}\n\nexport function lagrangeInterpolation(ecCurve: EC, shares: BN[], nodeIndex: BN[]): BN {\n  if (shares.length !== nodeIndex.length) {\n    throw new Error(\"shares not equal to nodeIndex length in lagrangeInterpolation\");\n  }\n  let secret = new BN(0);\n  for (let i = 0; i < shares.length; i += 1) {\n    let upper = new BN(1);\n    let lower = new BN(1);\n    for (let j = 0; j < shares.length; j += 1) {\n      if (i !== j) {\n        upper = upper.mul(nodeIndex[j].neg());\n        upper = upper.umod(ecCurve.curve.n);\n        let temp = nodeIndex[i].sub(nodeIndex[j]);\n        temp = temp.umod(ecCurve.curve.n);\n        lower = lower.mul(temp).umod(ecCurve.curve.n);\n      }\n    }\n    let delta = upper.mul(lower.invm(ecCurve.curve.n)).umod(ecCurve.curve.n);\n    delta = delta.mul(shares[i]).umod(ecCurve.curve.n);\n    secret = secret.add(delta);\n  }\n  return secret.umod(ecCurve.curve.n);\n}\n\n// generateRandomPolynomial - determinisiticShares are assumed random\nexport function generateRandomPolynomial(ecCurve: EC, degree: number, secret?: BN, deterministicShares?: Share[]): Polynomial {\n  let actualS = secret;\n  if (!secret) {\n    actualS = generatePrivateExcludingIndexes([new BN(0)]);\n  }\n  if (!deterministicShares) {\n    const poly = [actualS];\n    for (let i = 0; i < degree; i += 1) {\n      const share = generatePrivateExcludingIndexes(poly);\n      poly.push(share);\n    }\n    return new Polynomial(poly, ecCurve);\n  }\n  if (!Array.isArray(deterministicShares)) {\n    throw new Error(\"deterministic shares in generateRandomPolynomial should be an array\");\n  }\n\n  if (deterministicShares.length > degree) {\n    throw new Error(\"deterministicShares in generateRandomPolynomial should be less or equal than degree to ensure an element of randomness\");\n  }\n  const points: Record<string, Point> = {};\n  deterministicShares.forEach((share) => {\n    points[share.shareIndex.toString(\"hex\", 64)] = new Point(share.shareIndex, share.share, ecCurve);\n  });\n  for (let i = 0; i < degree - deterministicShares.length; i += 1) {\n    let shareIndex = generatePrivateExcludingIndexes([new BN(0)]);\n    while (points[shareIndex.toString(\"hex\", 64)] !== undefined) {\n      shareIndex = generatePrivateExcludingIndexes([new BN(0)]);\n    }\n    points[shareIndex.toString(\"hex\", 64)] = new Point(shareIndex, new BN(generatePrivate()), ecCurve);\n  }\n  points[\"0\"] = new Point(new BN(0), actualS, ecCurve);\n  return lagrangeInterpolatePolynomial(ecCurve, Object.values(points));\n}\n","import { decrypt } from \"@toruslabs/eccrypto\";\nimport { Data, post } from \"@toruslabs/http-helpers\";\nimport BN from \"bn.js\";\nimport { ec } from \"elliptic\";\nimport stringify from \"json-stable-stringify\";\nimport log from \"loglevel\";\n\nimport { EciesHex, GetOrSetNonceResult, MetadataParams } from \"../interfaces\";\nimport { encParamsHexToBuf } from \"./common\";\nimport { keccak256 } from \"./keyUtils\";\n\nexport function convertMetadataToNonce(params: { message?: string }) {\n  if (!params || !params.message) {\n    return new BN(0);\n  }\n  return new BN(params.message, 16);\n}\n\nexport async function decryptNodeData(eciesData: EciesHex, ciphertextHex: string, privKey: Buffer): Promise<Buffer> {\n  const metadata = encParamsHexToBuf(eciesData);\n  const decryptedSigBuffer = await decrypt(privKey, {\n    ...metadata,\n    ciphertext: Buffer.from(ciphertextHex, \"hex\"),\n  });\n  return decryptedSigBuffer;\n}\n\nexport function generateMetadataParams(ecCurve: ec, serverTimeOffset: number, message: string, privateKey: BN): MetadataParams {\n  const key = ecCurve.keyFromPrivate(privateKey.toString(\"hex\", 64));\n  const setData = {\n    data: message,\n    timestamp: new BN(~~(serverTimeOffset + Date.now() / 1000)).toString(16),\n  };\n  const sig = key.sign(keccak256(Buffer.from(stringify(setData), \"utf8\")).slice(2));\n  return {\n    pub_key_X: key.getPublic().getX().toString(\"hex\"), // DO NOT PAD THIS. BACKEND DOESN'T\n    pub_key_Y: key.getPublic().getY().toString(\"hex\"), // DO NOT PAD THIS. BACKEND DOESN'T\n    set_data: setData,\n    signature: Buffer.from(sig.r.toString(16, 64) + sig.s.toString(16, 64) + new BN(\"\").toString(16, 2), \"hex\").toString(\"base64\"),\n  };\n}\n\nexport async function getMetadata(\n  legacyMetadataHost: string,\n  data: Omit<MetadataParams, \"set_data\" | \"signature\">,\n  options: RequestInit = {}\n): Promise<BN> {\n  try {\n    const metadataResponse = await post<{ message?: string }>(`${legacyMetadataHost}/get`, data, options, { useAPIKey: true });\n    if (!metadataResponse || !metadataResponse.message) {\n      return new BN(0);\n    }\n    return new BN(metadataResponse.message, 16); // nonce\n  } catch (error) {\n    log.error(\"get metadata error\", error);\n    return new BN(0);\n  }\n}\n\nexport async function getOrSetNonce(\n  legacyMetadataHost: string,\n  ecCurve: ec,\n  serverTimeOffset: number,\n  X: string,\n  Y: string,\n  privKey?: BN,\n  getOnly = false\n): Promise<GetOrSetNonceResult> {\n  let data: Data;\n  const msg = getOnly ? \"getNonce\" : \"getOrSetNonce\";\n  if (privKey) {\n    data = generateMetadataParams(ecCurve, serverTimeOffset, msg, privKey);\n  } else {\n    data = {\n      pub_key_X: X,\n      pub_key_Y: Y,\n      set_data: { data: msg },\n    };\n  }\n  return post<GetOrSetNonceResult>(`${legacyMetadataHost}/get_or_set_nonce`, data, undefined, { useAPIKey: true });\n}\n\nexport async function getNonce(\n  legacyMetadataHost: string,\n  ecCurve: ec,\n  serverTimeOffset: number,\n  X: string,\n  Y: string,\n  privKey?: BN\n): Promise<GetOrSetNonceResult> {\n  return getOrSetNonce(legacyMetadataHost, ecCurve, serverTimeOffset, X, Y, privKey, true);\n}\n","export const config = {\n  logRequestTracing: false,\n};\n","function capitalizeFirstLetter(str: string): string {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nexport class SomeError<T> extends Error {\n  errors: Error[];\n\n  responses: T[];\n\n  predicate: string;\n\n  constructor({ errors, responses, predicate }: { errors: Error[]; responses: T[]; predicate: string }) {\n    super(\"Unable to resolve enough promises.\");\n    this.errors = errors;\n    this.responses = responses;\n    this.predicate = predicate;\n  }\n\n  get message() {\n    return `${super.message}. ${this.errors.length} errors: ${this.errors.map((x) => x.message || x).join(\", \")} and ${\n      this.responses.length\n    } responses: ${JSON.stringify(this.responses)}`;\n  }\n\n  toString() {\n    return this.message;\n  }\n}\n\nexport const Some = <K, T>(promises: Promise<K>[], predicate: (resultArr: K[], { resolved }: { resolved: boolean }) => Promise<T>): Promise<T> =>\n  new Promise((resolve, reject) => {\n    let finishedCount = 0;\n    const sharedState = { resolved: false };\n    const errorArr: Error[] = new Array(promises.length).fill(undefined);\n    const resultArr: K[] = new Array(promises.length).fill(undefined);\n    let predicateError: Error | string;\n    // eslint-disable-next-line no-promise-executor-return\n    return promises.forEach((x, index) => {\n      return (\n        x\n          .then((resp: K) => {\n            resultArr[index] = resp;\n            return undefined;\n          })\n          .catch((error: Error) => {\n            errorArr[index] = error;\n          })\n          // eslint-disable-next-line promise/no-return-in-finally\n          .finally(() => {\n            if (sharedState.resolved) return;\n            return predicate(resultArr.slice(0), sharedState)\n              .then((data) => {\n                sharedState.resolved = true;\n                resolve(data);\n                return undefined;\n              })\n              .catch((error) => {\n                // log only the last predicate error\n                predicateError = error;\n              })\n              .finally(() => {\n                finishedCount += 1;\n                if (finishedCount === promises.length) {\n                  const errors = Object.values(\n                    resultArr.reduce((acc: Record<string, string>, z) => {\n                      if (z) {\n                        const { id, error } = z as { id?: string; error?: { data?: string } };\n                        if (error?.data?.length > 0) {\n                          if (error.data.startsWith(\"Error occurred while verifying params\")) acc[id] = capitalizeFirstLetter(error.data);\n                          else acc[id] = error.data;\n                        }\n                      }\n                      return acc;\n                    }, {})\n                  );\n\n                  if (errors.length > 0) {\n                    // Format-able errors\n                    const msg = errors.length > 1 ? `\\n${errors.map((it) => `• ${it}`).join(\"\\n\")}` : errors[0];\n                    reject(new Error(msg));\n                  } else {\n                    reject(\n                      new SomeError({\n                        errors: errorArr,\n                        responses: resultArr,\n                        predicate: (predicateError as Error)?.message || (predicateError as string),\n                      })\n                    );\n                  }\n                }\n              });\n          })\n      );\n    });\n  });\n","import { LEGACY_NETWORKS_ROUTE_MAP, TORUS_LEGACY_NETWORK_TYPE, TORUS_NETWORK_TYPE } from \"@toruslabs/constants\";\nimport { generatePrivate, getPublic } from \"@toruslabs/eccrypto\";\nimport { generateJsonRPCObject, get, post } from \"@toruslabs/http-helpers\";\nimport BN from \"bn.js\";\nimport { curve, ec } from \"elliptic\";\n\nimport { config } from \"../config\";\nimport { JRPC_METHODS } from \"../constants\";\nimport {\n  CommitmentRequestResult,\n  GetOrSetNonceResult,\n  ImportedShare,\n  ImportShareRequestResult,\n  JRPCResponse,\n  KeyAssignInput,\n  KeyLookupResult,\n  LegacyKeyLookupResult,\n  LegacyVerifierLookupResponse,\n  SessionToken,\n  ShareRequestResult,\n  SignerResponse,\n  TorusKey,\n  UserType,\n  v2NonceResultType,\n  VerifierLookupResponse,\n  VerifierParams,\n} from \"../interfaces\";\nimport log from \"../loglevel\";\nimport { Some } from \"../some\";\nimport { kCombinations, normalizeKeysResult, thresholdSame } from \"./common\";\nimport { generateAddressFromPrivKey, generateAddressFromPubKey, keccak256 } from \"./keyUtils\";\nimport { lagrangeInterpolation } from \"./langrangeInterpolatePoly\";\nimport { decryptNodeData, getMetadata, getOrSetNonce } from \"./metadataUtils\";\n\nexport const GetPubKeyOrKeyAssign = async (params: {\n  endpoints: string[];\n  network: TORUS_NETWORK_TYPE;\n  verifier: string;\n  verifierId: string;\n  extendedVerifierId?: string;\n}): Promise<KeyLookupResult> => {\n  const { endpoints, network, verifier, verifierId, extendedVerifierId } = params;\n  const lookupPromises = endpoints.map((x) =>\n    post<JRPCResponse<VerifierLookupResponse>>(\n      x,\n      generateJsonRPCObject(JRPC_METHODS.GET_OR_SET_KEY, {\n        verifier,\n        verifier_id: verifierId.toString(),\n        extended_verifier_id: extendedVerifierId,\n        one_key_flow: true,\n        fetch_node_index: true,\n      }),\n      null,\n      { logTracingHeader: config.logRequestTracing }\n    ).catch((err) => log.error(`${JRPC_METHODS.GET_OR_SET_KEY} request failed`, err))\n  );\n\n  let nonceResult: GetOrSetNonceResult | undefined;\n  const nodeIndexes: number[] = [];\n  const result = await Some<void | JRPCResponse<VerifierLookupResponse>, KeyLookupResult>(lookupPromises, (lookupResults) => {\n    const lookupPubKeys = lookupResults.filter((x1) => {\n      if (x1 && !x1.error) {\n        if (!nonceResult) {\n          // currently only one node returns metadata nonce\n          // other nodes returns empty object\n          // pubNonce must be available to derive the public key\n          const pubNonceX = (x1.result?.keys[0].nonce_data as v2NonceResultType)?.pubNonce?.x;\n          if (pubNonceX) {\n            nonceResult = x1.result.keys[0].nonce_data;\n          }\n        }\n        return x1;\n      }\n      return false;\n    });\n    const errorResult = thresholdSame(\n      lookupPubKeys.map((x2) => x2 && x2.error),\n      ~~(endpoints.length / 2) + 1\n    );\n\n    const keyResult = thresholdSame(\n      lookupPubKeys.map((x3) => x3 && normalizeKeysResult(x3.result)),\n      ~~(endpoints.length / 2) + 1\n    );\n\n    // nonceResult must exist except for extendedVerifierId and legacy networks along with keyResult\n    if ((keyResult && (nonceResult || extendedVerifierId || LEGACY_NETWORKS_ROUTE_MAP[network as TORUS_LEGACY_NETWORK_TYPE])) || errorResult) {\n      if (keyResult) {\n        lookupResults.forEach((x1) => {\n          if (x1 && x1.result) {\n            const currentNodePubKey = x1.result.keys[0].pub_key_X.toLowerCase();\n            const thresholdPubKey = keyResult.keys[0].pub_key_X.toLowerCase();\n            // push only those indexes for nodes who are returning pub key matching with threshold pub key.\n            // this check is important when different nodes have different keys assigned to a user.\n            if (currentNodePubKey === thresholdPubKey) {\n              const nodeIndex = parseInt(x1.result.node_index);\n              if (nodeIndex) nodeIndexes.push(nodeIndex);\n            }\n          }\n        });\n      }\n      return Promise.resolve({ keyResult, nodeIndexes, errorResult, nonceResult });\n    }\n    return Promise.reject(\n      new Error(\n        `invalid public key result: ${JSON.stringify(lookupResults)} and nonce result:${JSON.stringify(\n          nonceResult || {}\n        )} for verifier: ${verifier}, verifierId: ${verifierId} and extendedVerifierId: ${extendedVerifierId} `\n      )\n    );\n  });\n\n  return result;\n};\n\nexport async function retrieveOrImportShare(params: {\n  legacyMetadataHost: string;\n  serverTimeOffset: number;\n  enableOneKey: boolean;\n  ecCurve: ec;\n  allowHost: string;\n  network: string;\n  clientId: string;\n  endpoints: string[];\n  verifier: string;\n  verifierParams: VerifierParams;\n  idToken: string;\n  importedShares?: ImportedShare[];\n  extraParams: Record<string, unknown>;\n}): Promise<TorusKey> {\n  const {\n    legacyMetadataHost,\n    serverTimeOffset,\n    enableOneKey,\n    ecCurve,\n    allowHost,\n    network,\n    clientId,\n    endpoints,\n    verifier,\n    verifierParams,\n    idToken,\n    importedShares,\n    extraParams,\n  } = params;\n  await get<void>(\n    allowHost,\n    {\n      headers: {\n        verifier,\n        verifierId: verifierParams.verifier_id,\n        network,\n        clientId,\n        enableGating: \"true\",\n      },\n    },\n    { useAPIKey: true }\n  );\n  const promiseArr = [];\n\n  // generate temporary private and public key that is used to secure receive shares\n  const sessionAuthKey = generatePrivate();\n  const pubKey = getPublic(sessionAuthKey).toString(\"hex\");\n  const pubKeyX = pubKey.slice(2, 66);\n  const pubKeyY = pubKey.slice(66);\n  const tokenCommitment = keccak256(Buffer.from(idToken, \"utf8\"));\n  let isImportShareReq = false;\n  if (importedShares && importedShares.length > 0) {\n    if (importedShares.length !== endpoints.length) {\n      throw new Error(\"Invalid imported shares length\");\n    }\n    isImportShareReq = true;\n  }\n\n  // make commitment requests to endpoints\n  for (let i = 0; i < endpoints.length; i += 1) {\n    /*\n      CommitmentRequestParams struct {\n        MessagePrefix      string `json:\"messageprefix\"`\n        TokenCommitment    string `json:\"tokencommitment\"`\n        TempPubX           string `json:\"temppubx\"`\n        TempPubY           string `json:\"temppuby\"`\n        VerifierIdentifier string `json:\"verifieridentifier\"`\n      } \n      */\n    const p = post<JRPCResponse<CommitmentRequestResult>>(\n      endpoints[i],\n      generateJsonRPCObject(JRPC_METHODS.COMMITMENT_REQUEST, {\n        messageprefix: \"mug00\",\n        tokencommitment: tokenCommitment.slice(2),\n        temppubx: pubKeyX,\n        temppuby: pubKeyY,\n        verifieridentifier: verifier,\n      }),\n      null,\n      { logTracingHeader: config.logRequestTracing }\n    ).catch((err) => {\n      log.error(\"commitment error\", err);\n    });\n    promiseArr.push(p);\n  }\n  // send share request once k + t number of commitment requests have completed\n  return Some<void | JRPCResponse<CommitmentRequestResult>, (void | JRPCResponse<CommitmentRequestResult>)[]>(promiseArr, (resultArr) => {\n    const completedRequests = resultArr.filter((x) => {\n      if (!x || typeof x !== \"object\") {\n        return false;\n      }\n      if (x.error) {\n        return false;\n      }\n      return true;\n    });\n\n    // we need to get commitments from all endpoints for importing share\n    if (importedShares.length > 0 && completedRequests.length === endpoints.length) {\n      return Promise.resolve(resultArr);\n    } else if (importedShares.length === 0 && completedRequests.length >= ~~((endpoints.length * 3) / 4) + 1) {\n      const requiredNodeResult = completedRequests.find((resp: void | JRPCResponse<CommitmentRequestResult>) => {\n        if (resp && resp.result?.nodeindex === \"1\") {\n          return true;\n        }\n        return false;\n      });\n\n      if (requiredNodeResult) {\n        return Promise.resolve(resultArr);\n      }\n    }\n\n    return Promise.reject(new Error(`invalid ${JSON.stringify(resultArr)}`));\n  })\n    .then((responses) => {\n      const promiseArrRequest: Promise<void | JRPCResponse<ShareRequestResult>>[] = [];\n      const nodeSigs: CommitmentRequestResult[] = [];\n      for (let i = 0; i < responses.length; i += 1) {\n        const x = responses[i];\n        if (!x || typeof x !== \"object\") {\n          continue;\n        }\n        if (x.error) {\n          continue;\n        }\n        if (x) nodeSigs.push((x as JRPCResponse<CommitmentRequestResult>).result);\n      }\n      for (let i = 0; i < endpoints.length; i += 1) {\n        const x = responses[i];\n        if (!x || typeof x !== \"object\") {\n          continue;\n        }\n        if (x.error) {\n          continue;\n        }\n        if (isImportShareReq) {\n          const importedShare = importedShares[i];\n          const p = post<JRPCResponse<ImportShareRequestResult>>(\n            endpoints[i],\n            generateJsonRPCObject(JRPC_METHODS.IMPORT_SHARE, {\n              encrypted: \"yes\",\n              use_temp: true,\n              item: [\n                {\n                  ...verifierParams,\n                  idtoken: idToken,\n                  nodesignatures: nodeSigs,\n                  verifieridentifier: verifier,\n                  pub_key_x: importedShare.pub_key_x,\n                  pub_key_y: importedShare.pub_key_y,\n                  encrypted_share: importedShare.encrypted_share,\n                  encrypted_share_metadata: importedShare.encrypted_share_metadata,\n                  node_index: importedShare.node_index,\n                  key_type: importedShare.key_type,\n                  nonce_data: importedShare.nonce_data,\n                  nonce_signature: importedShare.nonce_signature,\n                  ...extraParams,\n                },\n              ],\n              one_key_flow: true,\n            }),\n            null,\n            { logTracingHeader: config.logRequestTracing }\n          ).catch((err) => log.error(\"share req\", err));\n          promiseArrRequest.push(p);\n        } else {\n          const p = post<JRPCResponse<ShareRequestResult>>(\n            endpoints[i],\n            generateJsonRPCObject(JRPC_METHODS.GET_SHARE_OR_KEY_ASSIGN, {\n              encrypted: \"yes\",\n              use_temp: true,\n              item: [\n                {\n                  ...verifierParams,\n                  idtoken: idToken,\n                  nodesignatures: nodeSigs,\n                  verifieridentifier: verifier,\n                  ...extraParams,\n                },\n              ],\n              one_key_flow: true,\n            }),\n            null,\n            { logTracingHeader: config.logRequestTracing }\n          ).catch((err) => log.error(\"share req\", err));\n          promiseArrRequest.push(p);\n        }\n      }\n      let thresholdNonceData: GetOrSetNonceResult;\n      return Some<\n        void | JRPCResponse<ShareRequestResult>,\n        | { privateKey: BN; sessionTokenData: SessionToken[]; thresholdNonceData: GetOrSetNonceResult; nodeIndexes: BN[]; isNewKey: boolean }\n        | undefined\n      >(promiseArrRequest, async (shareResponses, sharedState) => {\n        // check if threshold number of nodes have returned the same user public key\n        const completedRequests = shareResponses.filter((x) => {\n          if (!x || typeof x !== \"object\") {\n            return false;\n          }\n          if (x.error) {\n            return false;\n          }\n          return true;\n        });\n        const pubkeys = shareResponses.map((x) => {\n          if (x && x.result && x.result.keys[0].public_key) {\n            if (!thresholdNonceData && !verifierParams.extended_verifier_id) {\n              const pubNonce = (x.result.keys[0].nonce_data as v2NonceResultType)?.pubNonce?.x;\n              if (pubNonce) {\n                thresholdNonceData = x.result.keys[0].nonce_data;\n              }\n            }\n            return x.result.keys[0].public_key;\n          }\n          return undefined;\n        });\n\n        const thresholdPublicKey = thresholdSame(pubkeys, ~~(endpoints.length / 2) + 1);\n\n        if (!thresholdPublicKey) {\n          throw new Error(\"invalid result from nodes, threshold number of public key results are not matching\");\n        }\n\n        // if both thresholdNonceData and extended_verifier_id are not available\n        // then we need to throw other wise address would be incorrect.\n        if (!thresholdNonceData && !verifierParams.extended_verifier_id && !LEGACY_NETWORKS_ROUTE_MAP[network as TORUS_LEGACY_NETWORK_TYPE]) {\n          throw new Error(\n            `invalid metadata result from nodes, nonce metadata is empty for verifier: ${verifier} and verifierId: ${verifierParams.verifier_id}`\n          );\n        }\n\n        const thresholdReqCount = importedShares.length > 0 ? endpoints.length : ~~(endpoints.length / 2) + 1;\n        // optimistically run lagrange interpolation once threshold number of shares have been received\n        // this is matched against the user public key to ensure that shares are consistent\n        // Note: no need of thresholdMetadataNonce for extended_verifier_id key\n        if (\n          completedRequests.length >= thresholdReqCount &&\n          thresholdPublicKey &&\n          (thresholdNonceData || verifierParams.extended_verifier_id || LEGACY_NETWORKS_ROUTE_MAP[network as TORUS_LEGACY_NETWORK_TYPE])\n        ) {\n          const sharePromises: Promise<void | Buffer>[] = [];\n          const sessionTokenSigPromises: Promise<void | Buffer>[] = [];\n          const sessionTokenPromises: Promise<void | Buffer>[] = [];\n          const nodeIndexes: BN[] = [];\n          const sessionTokenData: SessionToken[] = [];\n          const isNewKeyResponses: string[] = [];\n\n          for (let i = 0; i < completedRequests.length; i += 1) {\n            const currentShareResponse = completedRequests[i] as JRPCResponse<ShareRequestResult>;\n            const {\n              session_tokens: sessionTokens,\n              session_token_metadata: sessionTokenMetadata,\n              session_token_sigs: sessionTokenSigs,\n              session_token_sig_metadata: sessionTokenSigMetadata,\n              keys,\n              is_new_key: isNewKey,\n            } = currentShareResponse.result;\n\n            isNewKeyResponses.push(isNewKey);\n\n            if (sessionTokenSigs?.length > 0) {\n              // decrypt sessionSig if enc metadata is sent\n              if (sessionTokenSigMetadata && sessionTokenSigMetadata[0]?.ephemPublicKey) {\n                sessionTokenSigPromises.push(\n                  decryptNodeData(sessionTokenSigMetadata[0], sessionTokenSigs[0], sessionAuthKey).catch((err) =>\n                    log.debug(\"session sig decryption\", err)\n                  )\n                );\n              } else {\n                sessionTokenSigPromises.push(Promise.resolve(Buffer.from(sessionTokenSigs[0], \"hex\")));\n              }\n            } else {\n              sessionTokenSigPromises.push(Promise.resolve(undefined));\n            }\n\n            if (sessionTokens?.length > 0) {\n              // decrypt session token if enc metadata is sent\n              if (sessionTokenMetadata && sessionTokenMetadata[0]?.ephemPublicKey) {\n                sessionTokenPromises.push(\n                  decryptNodeData(sessionTokenMetadata[0], sessionTokens[0], sessionAuthKey).catch((err) =>\n                    log.debug(\"session token sig decryption\", err)\n                  )\n                );\n              } else {\n                sessionTokenPromises.push(Promise.resolve(Buffer.from(sessionTokens[0], \"base64\")));\n              }\n            } else {\n              sessionTokenPromises.push(Promise.resolve(undefined));\n            }\n\n            if (keys?.length > 0) {\n              const latestKey = currentShareResponse.result.keys[0];\n              nodeIndexes.push(new BN(latestKey.node_index));\n\n              if (latestKey.share_metadata) {\n                sharePromises.push(\n                  decryptNodeData(\n                    latestKey.share_metadata,\n                    Buffer.from(latestKey.share, \"base64\").toString(\"binary\").padStart(64, \"0\"),\n                    sessionAuthKey\n                  ).catch((err) => log.debug(\"share decryption\", err))\n                );\n              }\n            } else {\n              nodeIndexes.push(undefined);\n              sharePromises.push(Promise.resolve(undefined));\n            }\n          }\n          const allPromises = await Promise.all(sharePromises.concat(sessionTokenSigPromises).concat(sessionTokenPromises));\n          const sharesResolved = allPromises.slice(0, sharePromises.length);\n          const sessionSigsResolved = allPromises.slice(sharePromises.length, sharePromises.length + sessionTokenSigPromises.length);\n          const sessionTokensResolved = allPromises.slice(sharePromises.length + sessionTokenSigPromises.length, allPromises.length);\n          const validSigs = sessionSigsResolved.filter((sig) => {\n            if (sig) {\n              return true;\n            }\n            return false;\n          });\n\n          const minThresholdRequired = ~~(endpoints.length / 2) + 1;\n          if (!verifierParams.extended_verifier_id && validSigs.length < minThresholdRequired) {\n            throw new Error(`Insufficient number of signatures from nodes, required: ${minThresholdRequired}, found: ${validSigs.length}`);\n          }\n\n          const validTokens = sessionTokensResolved.filter((token) => {\n            if (token) {\n              return true;\n            }\n            return false;\n          });\n\n          if (!verifierParams.extended_verifier_id && validTokens.length < minThresholdRequired) {\n            throw new Error(`Insufficient number of session tokens from nodes, required: ${minThresholdRequired}, found: ${validTokens.length}`);\n          }\n          sessionTokensResolved.forEach((x, index) => {\n            if (!x) sessionTokenData.push(undefined);\n            else\n              sessionTokenData.push({\n                token: x.toString(\"base64\"),\n                signature: (sessionSigsResolved[index] as Buffer).toString(\"hex\"),\n                node_pubx: (completedRequests[index] as JRPCResponse<ShareRequestResult>).result.node_pubx,\n                node_puby: (completedRequests[index] as JRPCResponse<ShareRequestResult>).result.node_puby,\n              });\n          });\n\n          if (sharedState.resolved) return undefined;\n\n          const decryptedShares = sharesResolved.reduce(\n            (acc, curr, index) => {\n              if (curr) acc.push({ index: nodeIndexes[index], value: new BN(curr) });\n              return acc;\n            },\n            [] as { index: BN; value: BN }[]\n          );\n          // run lagrange interpolation on all subsets, faster in the optimistic scenario than berlekamp-welch due to early exit\n          const allCombis = kCombinations(decryptedShares.length, ~~(endpoints.length / 2) + 1);\n\n          let privateKey: BN | null = null;\n          for (let j = 0; j < allCombis.length; j += 1) {\n            const currentCombi = allCombis[j];\n            const currentCombiShares = decryptedShares.filter((_, index) => currentCombi.includes(index));\n            const shares = currentCombiShares.map((x) => x.value);\n            const indices = currentCombiShares.map((x) => x.index);\n            const derivedPrivateKey = lagrangeInterpolation(ecCurve, shares, indices);\n            if (!derivedPrivateKey) continue;\n            const decryptedPubKey = getPublic(Buffer.from(derivedPrivateKey.toString(16, 64), \"hex\")).toString(\"hex\");\n            const decryptedPubKeyX = decryptedPubKey.slice(2, 66);\n            const decryptedPubKeyY = decryptedPubKey.slice(66);\n            if (\n              new BN(decryptedPubKeyX, 16).cmp(new BN(thresholdPublicKey.X, 16)) === 0 &&\n              new BN(decryptedPubKeyY, 16).cmp(new BN(thresholdPublicKey.Y, 16)) === 0\n            ) {\n              privateKey = derivedPrivateKey;\n              break;\n            }\n          }\n\n          if (privateKey === undefined || privateKey === null) {\n            throw new Error(\"could not derive private key\");\n          }\n          const thresholdIsNewKey = thresholdSame(isNewKeyResponses, ~~(endpoints.length / 2) + 1);\n\n          return { privateKey, sessionTokenData, thresholdNonceData, nodeIndexes, isNewKey: thresholdIsNewKey === \"true\" };\n        }\n        throw new Error(\"Invalid\");\n      });\n    })\n    .then(async (res) => {\n      const { privateKey, sessionTokenData, thresholdNonceData, nodeIndexes, isNewKey } = res;\n      let nonceResult = thresholdNonceData;\n      if (!privateKey) throw new Error(\"Invalid private key returned\");\n      const oAuthKey = privateKey;\n      const oAuthPubKey = getPublic(Buffer.from(oAuthKey.toString(16, 64), \"hex\")).toString(\"hex\");\n      const oAuthPubkeyX = oAuthPubKey.slice(2, 66);\n      const oAuthPubkeyY = oAuthPubKey.slice(66);\n      let metadataNonce = new BN(nonceResult?.nonce ? nonceResult.nonce.padStart(64, \"0\") : \"0\", \"hex\");\n      let finalPubKey: curve.base.BasePoint;\n      let pubNonce: { X: string; Y: string } | undefined;\n      let typeOfUser: UserType = \"v1\";\n      // extended_verifier_id is only exception for torus-test-health verifier\n      // otherwise extended verifier id should not even return shares.\n      if (verifierParams.extended_verifier_id) {\n        typeOfUser = \"v2\";\n        // for tss key no need to add pub nonce\n        finalPubKey = ecCurve.keyFromPublic({ x: oAuthPubkeyX, y: oAuthPubkeyY }).getPublic();\n      } else if (LEGACY_NETWORKS_ROUTE_MAP[network as TORUS_LEGACY_NETWORK_TYPE]) {\n        if (enableOneKey) {\n          nonceResult = await getOrSetNonce(legacyMetadataHost, ecCurve, serverTimeOffset, oAuthPubkeyX, oAuthPubkeyY, oAuthKey, !isNewKey);\n          metadataNonce = new BN(nonceResult.nonce || \"0\", 16);\n          typeOfUser = nonceResult.typeOfUser;\n          if (typeOfUser === \"v2\") {\n            pubNonce = { X: (nonceResult as v2NonceResultType).pubNonce.x, Y: (nonceResult as v2NonceResultType).pubNonce.y };\n            finalPubKey = ecCurve\n              .keyFromPublic({ x: oAuthPubkeyX, y: oAuthPubkeyY })\n              .getPublic()\n              .add(\n                ecCurve\n                  .keyFromPublic({ x: (nonceResult as v2NonceResultType).pubNonce.x, y: (nonceResult as v2NonceResultType).pubNonce.y })\n                  .getPublic()\n              );\n          } else {\n            typeOfUser = \"v1\";\n            // for imported keys in legacy networks\n            metadataNonce = await getMetadata(legacyMetadataHost, { pub_key_X: oAuthPubkeyX, pub_key_Y: oAuthPubkeyY });\n            const privateKeyWithNonce = oAuthKey.add(metadataNonce).umod(ecCurve.curve.n);\n            finalPubKey = ecCurve.keyFromPrivate(privateKeyWithNonce.toString(16, 64), \"hex\").getPublic();\n          }\n        } else {\n          typeOfUser = \"v1\";\n          // for imported keys in legacy networks\n          metadataNonce = await getMetadata(legacyMetadataHost, { pub_key_X: oAuthPubkeyX, pub_key_Y: oAuthPubkeyY });\n          const privateKeyWithNonce = oAuthKey.add(metadataNonce).umod(ecCurve.curve.n);\n          finalPubKey = ecCurve.keyFromPrivate(privateKeyWithNonce.toString(16, 64), \"hex\").getPublic();\n        }\n      } else {\n        typeOfUser = \"v2\";\n        finalPubKey = ecCurve\n          .keyFromPublic({ x: oAuthPubkeyX, y: oAuthPubkeyY })\n          .getPublic()\n          .add(\n            ecCurve.keyFromPublic({ x: (nonceResult as v2NonceResultType).pubNonce.x, y: (nonceResult as v2NonceResultType).pubNonce.y }).getPublic()\n          );\n        pubNonce = { X: (nonceResult as v2NonceResultType).pubNonce.x, Y: (nonceResult as v2NonceResultType).pubNonce.y };\n      }\n\n      if (!finalPubKey) {\n        throw new Error(\"Invalid public key, this might be a bug, please report this to web3auth team\");\n      }\n\n      const oAuthKeyAddress = generateAddressFromPrivKey(ecCurve, oAuthKey);\n\n      // deriving address from pub key coz pubkey is always available\n      // but finalPrivKey won't be available for  v2 user upgraded to 2/n\n      const finalEvmAddress = generateAddressFromPubKey(ecCurve, finalPubKey.getX(), finalPubKey.getY());\n      log.debug(\"> torus.js/retrieveShares\", { finalEvmAddress });\n      let finalPrivKey = \"\"; // it is empty for v2 user upgraded to 2/n\n      if (typeOfUser === \"v1\" || (typeOfUser === \"v2\" && metadataNonce.gt(new BN(0)))) {\n        const privateKeyWithNonce = oAuthKey.add(metadataNonce).umod(ecCurve.curve.n);\n        finalPrivKey = privateKeyWithNonce.toString(\"hex\", 64);\n      }\n\n      let isUpgraded: boolean | null = false;\n      if (typeOfUser === \"v1\") {\n        isUpgraded = null;\n      } else if (typeOfUser === \"v2\") {\n        isUpgraded = metadataNonce.eq(new BN(\"0\"));\n      }\n      // return reconstructed private key and ethereum address\n      return {\n        finalKeyData: {\n          evmAddress: finalEvmAddress,\n          X: finalPubKey.getX().toString(16, 64), // this is final pub x user before and after updating to 2/n\n          Y: finalPubKey.getY().toString(16, 64), // this is final pub y user before and after updating to 2/n\n          privKey: finalPrivKey,\n        },\n        oAuthKeyData: {\n          evmAddress: oAuthKeyAddress,\n          X: oAuthPubkeyX,\n          Y: oAuthPubkeyY,\n          privKey: oAuthKey.toString(\"hex\", 64).padStart(64, \"0\"),\n        },\n        sessionData: {\n          sessionTokenData,\n          sessionAuthKey: sessionAuthKey.toString(\"hex\").padStart(64, \"0\"),\n        },\n        metadata: {\n          pubNonce,\n          nonce: metadataNonce,\n          typeOfUser,\n          upgraded: isUpgraded,\n        },\n        nodesData: {\n          nodeIndexes: nodeIndexes.map((x) => x.toNumber()),\n        },\n      } as TorusKey;\n    });\n}\n\nexport const legacyKeyLookup = async (endpoints: string[], verifier: string, verifierId: string): Promise<LegacyKeyLookupResult> => {\n  const lookupPromises = endpoints.map((x) =>\n    post<JRPCResponse<LegacyVerifierLookupResponse>>(\n      x,\n      generateJsonRPCObject(\"VerifierLookupRequest\", {\n        verifier,\n        verifier_id: verifierId.toString(),\n      })\n    ).catch((err) => log.error(\"lookup request failed\", err))\n  );\n  return Some<void | JRPCResponse<LegacyVerifierLookupResponse>, LegacyKeyLookupResult>(lookupPromises, (lookupResults) => {\n    const lookupShares = lookupResults.filter((x1) => x1);\n    const errorResult = thresholdSame(\n      lookupShares.map((x2) => x2 && x2.error),\n      ~~(endpoints.length / 2) + 1\n    );\n    const keyResult = thresholdSame(\n      lookupShares.map((x3) => x3 && x3.result),\n      ~~(endpoints.length / 2) + 1\n    );\n    if (keyResult || errorResult) {\n      return Promise.resolve({ keyResult, errorResult });\n    }\n    return Promise.reject(new Error(`invalid results ${JSON.stringify(lookupResults)}`));\n  });\n};\n\nexport const legacyKeyAssign = async ({\n  endpoints,\n  torusNodePubs,\n  lastPoint,\n  firstPoint,\n  verifier,\n  verifierId,\n  signerHost,\n  network,\n  clientId,\n}: KeyAssignInput): Promise<void> => {\n  let nodeNum: number;\n  let initialPoint: number | undefined;\n  if (lastPoint === undefined) {\n    nodeNum = Math.floor(Math.random() * endpoints.length);\n    // nodeNum = endpoints.indexOf(\"https://torus-node.binancex.dev/jrpc\");\n    log.info(\"keyassign\", nodeNum, endpoints[nodeNum]);\n    initialPoint = nodeNum;\n  } else {\n    nodeNum = lastPoint % endpoints.length;\n  }\n  if (nodeNum === firstPoint) throw new Error(\"Looped through all\");\n  if (firstPoint !== undefined) initialPoint = firstPoint;\n\n  const data = generateJsonRPCObject(\"KeyAssign\", {\n    verifier,\n    verifier_id: verifierId.toString(),\n  });\n  try {\n    const signedData = await post<SignerResponse>(\n      signerHost,\n      data,\n      {\n        headers: {\n          pubKeyX: torusNodePubs[nodeNum].X,\n          pubKeyY: torusNodePubs[nodeNum].Y,\n          network,\n          clientId,\n        },\n      },\n      { useAPIKey: true }\n    );\n    return await post<void>(\n      endpoints[nodeNum],\n      { ...data, ...signedData },\n      {\n        headers: {\n          \"Content-Type\": \"application/json; charset=utf-8\",\n        },\n      }\n    );\n  } catch (error2: unknown) {\n    const error = error2 as { status: number; message: string };\n    log.error(error.status, error.message, error, \"key assign error\");\n    const acceptedErrorMsgs = [\n      // Slow node\n      \"Timed out\",\n      \"Failed to fetch\",\n      \"cancelled\",\n      \"NetworkError when attempting to fetch resource.\",\n      // Happens when the node is not reachable (dns issue etc)\n      \"TypeError: Failed to fetch\", // All except iOS and Firefox\n      \"TypeError: cancelled\", // iOS\n      \"TypeError: NetworkError when attempting to fetch resource.\", // Firefox\n    ];\n    if (\n      error?.status === 502 ||\n      error?.status === 504 ||\n      error?.status === 401 ||\n      acceptedErrorMsgs.includes(error.message) ||\n      acceptedErrorMsgs.some((x) => error.message?.includes(x)) ||\n      (error.message && error.message.includes(\"reason: getaddrinfo EAI_AGAIN\"))\n    )\n      return legacyKeyAssign({\n        endpoints,\n        torusNodePubs,\n        lastPoint: nodeNum + 1,\n        firstPoint: initialPoint,\n        verifier,\n        verifierId,\n        signerHost,\n        network,\n        clientId,\n      });\n    throw new Error(\n      `Sorry, the Torus Network that powers Web3Auth is currently very busy.\n    We will generate your key in time. Pls try again later. \\n\n    ${error.message || \"\"}`\n    );\n  }\n};\n\nexport const legacyWaitKeyLookup = (endpoints: string[], verifier: string, verifierId: string, timeout: number): Promise<LegacyKeyLookupResult> =>\n  new Promise((resolve, reject) => {\n    setTimeout(() => {\n      legacyKeyLookup(endpoints, verifier, verifierId).then(resolve).catch(reject);\n    }, timeout);\n  });\n","import {\n  INodePub,\n  JRPCResponse,\n  LEGACY_NETWORKS_ROUTE_MAP,\n  METADATA_MAP,\n  SIGNER_MAP,\n  TORUS_LEGACY_NETWORK_TYPE,\n  TORUS_NETWORK_TYPE,\n} from \"@toruslabs/constants\";\nimport { decrypt, Ecies, encrypt, generatePrivate, getPublic } from \"@toruslabs/eccrypto\";\nimport { generateJsonRPCObject, get, post, setAPIKey, setEmbedHost } from \"@toruslabs/http-helpers\";\nimport BN from \"bn.js\";\nimport { curve, ec as EC } from \"elliptic\";\nimport stringify from \"json-stable-stringify\";\n\nimport { config } from \"./config\";\nimport {\n  encParamsBufToHex,\n  generateAddressFromPrivKey,\n  generateAddressFromPubKey,\n  generateRandomPolynomial,\n  getMetadata,\n  getNonce,\n  getOrSetNonce,\n  GetOrSetNonceError,\n  GetPubKeyOrKeyAssign,\n  kCombinations,\n  keccak256,\n  lagrangeInterpolation,\n  legacyKeyAssign,\n  legacyKeyLookup,\n  legacyWaitKeyLookup,\n  retrieveOrImportShare,\n  thresholdSame,\n} from \"./helpers\";\nimport {\n  CommitmentRequestResult,\n  GetOrSetNonceResult,\n  ImportedShare,\n  LegacyShareRequestResult,\n  LegacyVerifierLookupResponse,\n  NonceMetadataParams,\n  SetNonceData,\n  TorusCtorOptions,\n  TorusKey,\n  TorusPublicKey,\n  UserType,\n  v2NonceResultType,\n  VerifierParams,\n} from \"./interfaces\";\nimport log from \"./loglevel\";\nimport { Some } from \"./some\";\n\n// Implement threshold logic wrappers around public APIs\n// of Torus nodes to handle malicious node responses\nclass Torus {\n  public allowHost: string;\n\n  public serverTimeOffset: number;\n\n  public network: TORUS_NETWORK_TYPE;\n\n  public clientId: string;\n\n  public ec: EC;\n\n  public enableOneKey: boolean;\n\n  private signerHost: string;\n\n  private legacyMetadataHost: string;\n\n  constructor({ enableOneKey = false, clientId, network, serverTimeOffset = 0, allowHost, legacyMetadataHost }: TorusCtorOptions) {\n    if (!clientId) throw Error(\"Please provide a valid clientId in constructor\");\n    if (!network) throw Error(\"Please provide a valid network in constructor\");\n    this.ec = new EC(\"secp256k1\");\n    this.serverTimeOffset = serverTimeOffset || 0; // ms\n    this.network = network;\n    this.clientId = clientId;\n    this.allowHost = allowHost || `${SIGNER_MAP[network]}/api/allow`;\n    this.enableOneKey = enableOneKey;\n    this.legacyMetadataHost = legacyMetadataHost || METADATA_MAP[network as TORUS_LEGACY_NETWORK_TYPE];\n    this.signerHost = `${SIGNER_MAP[network as TORUS_LEGACY_NETWORK_TYPE]}/api/sign`;\n  }\n\n  public get isLegacyNetwork(): boolean {\n    const legacyNetwork = LEGACY_NETWORKS_ROUTE_MAP[this.network as TORUS_LEGACY_NETWORK_TYPE];\n    if (legacyNetwork && !legacyNetwork.migrationCompleted) return true;\n    return false;\n  }\n\n  static enableLogging(v = true): void {\n    if (v) {\n      log.enableAll();\n      config.logRequestTracing = true;\n    } else log.disableAll();\n  }\n\n  static setAPIKey(apiKey: string): void {\n    setAPIKey(apiKey);\n  }\n\n  static setEmbedHost(embedHost: string): void {\n    setEmbedHost(embedHost);\n  }\n\n  static isGetOrSetNonceError(err: unknown): boolean {\n    return err instanceof GetOrSetNonceError;\n  }\n\n  static getPostboxKey(torusKey: TorusKey): string {\n    if (torusKey.metadata.typeOfUser === \"v1\") {\n      return torusKey.finalKeyData.privKey || torusKey.oAuthKeyData.privKey;\n    }\n    return torusKey.oAuthKeyData.privKey;\n  }\n\n  async retrieveShares(\n    endpoints: string[],\n    indexes: number[],\n    verifier: string,\n    verifierParams: VerifierParams,\n    idToken: string,\n    extraParams: Record<string, unknown> = {}\n  ): Promise<TorusKey> {\n    if (this.isLegacyNetwork) return this.legacyRetrieveShares(endpoints, indexes, verifier, verifierParams, idToken, extraParams);\n    return retrieveOrImportShare({\n      legacyMetadataHost: this.legacyMetadataHost,\n      serverTimeOffset: this.serverTimeOffset,\n      enableOneKey: this.enableOneKey,\n      ecCurve: this.ec,\n      allowHost: this.allowHost,\n      network: this.network,\n      clientId: this.clientId,\n      endpoints,\n      verifier,\n      verifierParams,\n      idToken,\n      importedShares: [],\n      extraParams,\n    });\n  }\n\n  async getPublicAddress(\n    endpoints: string[],\n    torusNodePubs: INodePub[],\n    { verifier, verifierId, extendedVerifierId }: { verifier: string; verifierId: string; extendedVerifierId?: string }\n  ): Promise<TorusPublicKey> {\n    if (this.isLegacyNetwork) return this.getLegacyPublicAddress(endpoints, torusNodePubs, { verifier, verifierId }, this.enableOneKey);\n    return this.getNewPublicAddress(endpoints, { verifier, verifierId, extendedVerifierId }, this.enableOneKey);\n  }\n\n  async importPrivateKey(\n    endpoints: string[],\n    nodeIndexes: number[],\n    nodePubkeys: INodePub[],\n    verifier: string,\n    verifierParams: VerifierParams,\n    idToken: string,\n    newPrivateKey: string,\n    extraParams: Record<string, unknown> = {}\n  ): Promise<TorusKey> {\n    if (this.isLegacyNetwork) throw new Error(\"This function is not supported on legacy networks\");\n    if (endpoints.length !== nodeIndexes.length) {\n      throw new Error(`length of endpoints array must be same as length of nodeIndexes array`);\n    }\n    const threshold = ~~(endpoints.length / 2) + 1;\n    const degree = threshold - 1;\n    const nodeIndexesBn: BN[] = [];\n\n    const key = this.ec.keyFromPrivate(newPrivateKey.padStart(64, \"0\"), \"hex\");\n    for (const nodeIndex of nodeIndexes) {\n      nodeIndexesBn.push(new BN(nodeIndex));\n    }\n    const privKeyBn = key.getPrivate();\n    const randomNonce = new BN(generatePrivate());\n\n    const oAuthKey = privKeyBn.sub(randomNonce).umod(this.ec.curve.n);\n    const oAuthPubKey = this.ec.keyFromPrivate(oAuthKey.toString(\"hex\").padStart(64, \"0\")).getPublic();\n    const poly = generateRandomPolynomial(this.ec, degree, oAuthKey);\n    const shares = poly.generateShares(nodeIndexesBn);\n    const nonceParams = this.generateNonceMetadataParams(\"getOrSetNonce\", oAuthKey, randomNonce);\n    const nonceData = Buffer.from(stringify(nonceParams.set_data), \"utf8\").toString(\"base64\");\n    const sharesData: ImportedShare[] = [];\n    const encPromises: Promise<Ecies>[] = [];\n    for (let i = 0; i < nodeIndexesBn.length; i++) {\n      const shareJson = shares[nodeIndexesBn[i].toString(\"hex\", 64)].toJSON() as Record<string, string>;\n      if (!nodePubkeys[i]) {\n        throw new Error(`Missing node pub key for node index: ${nodeIndexesBn[i].toString(\"hex\", 64)}`);\n      }\n      const nodePubKey = this.ec.keyFromPublic({ x: nodePubkeys[i].X, y: nodePubkeys[i].Y });\n      encPromises.push(encrypt(Buffer.from(nodePubKey.getPublic().encodeCompressed(\"hex\"), \"hex\"), Buffer.from(shareJson.share, \"hex\")));\n    }\n    const encShares = await Promise.all(encPromises);\n    for (let i = 0; i < nodeIndexesBn.length; i++) {\n      const shareJson = shares[nodeIndexesBn[i].toString(\"hex\", 64)].toJSON() as Record<string, string>;\n      const encParams = encShares[i];\n      const encParamsMetadata = encParamsBufToHex(encParams);\n      const shareData: ImportedShare = {\n        pub_key_x: oAuthPubKey.getX().toString(\"hex\", 64),\n        pub_key_y: oAuthPubKey.getY().toString(\"hex\", 64),\n        encrypted_share: encParamsMetadata.ciphertext,\n        encrypted_share_metadata: encParamsMetadata,\n        node_index: Number.parseInt(shareJson.shareIndex, 16),\n        key_type: \"secp256k1\",\n        nonce_data: nonceData,\n        nonce_signature: nonceParams.signature,\n      };\n      sharesData.push(shareData);\n    }\n\n    return retrieveOrImportShare({\n      legacyMetadataHost: this.legacyMetadataHost,\n      serverTimeOffset: this.serverTimeOffset,\n      enableOneKey: this.enableOneKey,\n      ecCurve: this.ec,\n      allowHost: this.allowHost,\n      network: this.network,\n      clientId: this.clientId,\n      endpoints,\n      verifier,\n      verifierParams,\n      idToken,\n      importedShares: sharesData,\n      extraParams,\n    });\n  }\n\n  /**\n   * Note: use this function only for openlogin tkey account lookups.\n   * this is a legacy function, use getPublicAddress instead for new networks\n   */\n  async getUserTypeAndAddress(\n    endpoints: string[],\n    torusNodePubs: INodePub[],\n    { verifier, verifierId, extendedVerifierId }: { verifier: string; verifierId: string; extendedVerifierId?: string }\n  ): Promise<TorusPublicKey> {\n    if (!this.isLegacyNetwork)\n      return this.getNewPublicAddress(endpoints, { verifier, verifierId, extendedVerifierId }, true) as Promise<TorusPublicKey>;\n    return this.getLegacyPublicAddress(endpoints, torusNodePubs, { verifier, verifierId }, true);\n  }\n\n  private async legacyRetrieveShares(\n    endpoints: string[],\n    indexes: number[],\n    verifier: string,\n    verifierParams: VerifierParams,\n    idToken: string,\n    extraParams: Record<string, unknown> = {}\n  ): Promise<TorusKey> {\n    const promiseArr = [];\n    await get<void>(\n      this.allowHost,\n      {\n        headers: {\n          verifier,\n          verifierId: verifierParams.verifier_id,\n          network: this.network,\n          clientId: this.clientId,\n          enableGating: \"true\",\n        },\n      },\n      { useAPIKey: true }\n    );\n    /*\n      CommitmentRequestParams struct {\n        MessagePrefix      string `json:\"messageprefix\"`\n        TokenCommitment    string `json:\"tokencommitment\"`\n        TempPubX           string `json:\"temppubx\"`\n        TempPubY           string `json:\"temppuby\"`\n        VerifierIdentifier string `json:\"verifieridentifier\"`\n      } \n      */\n\n    // generate temporary private and public key that is used to secure receive shares\n    const tmpKey = generatePrivate();\n    const pubKey = getPublic(tmpKey).toString(\"hex\");\n    const pubKeyX = pubKey.slice(2, 66);\n    const pubKeyY = pubKey.slice(66);\n    const tokenCommitment = keccak256(Buffer.from(idToken, \"utf8\"));\n\n    // make commitment requests to endpoints\n    for (let i = 0; i < endpoints.length; i += 1) {\n      const p = post<JRPCResponse<CommitmentRequestResult>>(\n        endpoints[i],\n        generateJsonRPCObject(\"CommitmentRequest\", {\n          messageprefix: \"mug00\",\n          tokencommitment: tokenCommitment.slice(2),\n          temppubx: pubKeyX,\n          temppuby: pubKeyY,\n          verifieridentifier: verifier,\n        })\n      ).catch((err) => {\n        log.error(\"commitment\", err);\n      });\n      promiseArr.push(p);\n    }\n    /*\n      ShareRequestParams struct {\n        Item []bijson.RawMessage `json:\"item\"`\n      }\n      ShareRequestItem struct {\n        IDToken            string          `json:\"idtoken\"`\n        NodeSignatures     []NodeSignature `json:\"nodesignatures\"`\n        VerifierIdentifier string          `json:\"verifieridentifier\"`\n      }\n      NodeSignature struct {\n        Signature   string\n        Data        string\n        NodePubKeyX string\n        NodePubKeyY string\n      }\n      CommitmentRequestResult struct {\n        Signature string `json:\"signature\"`\n        Data      string `json:\"data\"`\n        NodePubX  string `json:\"nodepubx\"`\n        NodePubY  string `json:\"nodepuby\"`\n      }\n      */\n    // send share request once k + t number of commitment requests have completed\n    return Some<void | JRPCResponse<CommitmentRequestResult>, (void | JRPCResponse<CommitmentRequestResult>)[]>(promiseArr, (resultArr) => {\n      const completedRequests = resultArr.filter((x) => {\n        if (!x || typeof x !== \"object\") {\n          return false;\n        }\n        if (x.error) {\n          return false;\n        }\n        return true;\n      });\n      if (completedRequests.length >= ~~(endpoints.length / 4) * 3 + 1) {\n        return Promise.resolve(resultArr);\n      }\n      return Promise.reject(new Error(`invalid ${JSON.stringify(resultArr)}`));\n    })\n      .then((responses) => {\n        const promiseArrRequest: Promise<void | JRPCResponse<LegacyShareRequestResult>>[] = [];\n        const nodeSigs = [];\n        for (let i = 0; i < responses.length; i += 1) {\n          if (responses[i]) nodeSigs.push((responses[i] as JRPCResponse<CommitmentRequestResult>).result);\n        }\n        for (let i = 0; i < endpoints.length; i += 1) {\n          const p = post<JRPCResponse<LegacyShareRequestResult>>(\n            endpoints[i],\n            generateJsonRPCObject(\"ShareRequest\", {\n              encrypted: \"yes\",\n              item: [{ ...verifierParams, idtoken: idToken, nodesignatures: nodeSigs, verifieridentifier: verifier, ...extraParams }],\n            })\n          ).catch((err) => log.error(\"share req\", err));\n          promiseArrRequest.push(p);\n        }\n        return Some<void | JRPCResponse<LegacyShareRequestResult>, BN | undefined>(promiseArrRequest, async (shareResponses, sharedState) => {\n          /*\n              ShareRequestResult struct {\n                Keys []KeyAssignment\n              }\n                      / KeyAssignmentPublic -\n              type KeyAssignmentPublic struct {\n                Index     big.Int\n                PublicKey common.Point\n                Threshold int\n                Verifiers map[string][]string // Verifier => VerifierID\n              }\n\n              // KeyAssignment -\n              type KeyAssignment struct {\n                KeyAssignmentPublic\n                Share big.Int // Or Si\n              }\n            */\n          // check if threshold number of nodes have returned the same user public key\n          const completedRequests = shareResponses.filter((x) => x);\n          const thresholdPublicKey = thresholdSame(\n            shareResponses.map((x) => x && x.result && x.result.keys[0].PublicKey),\n            ~~(endpoints.length / 2) + 1\n          );\n          // optimistically run lagrange interpolation once threshold number of shares have been received\n          // this is matched against the user public key to ensure that shares are consistent\n          if (completedRequests.length >= ~~(endpoints.length / 2) + 1 && thresholdPublicKey) {\n            const sharePromises: Promise<void | Buffer>[] = [];\n            const nodeIndexes: BN[] = [];\n            for (let i = 0; i < shareResponses.length; i += 1) {\n              const currentShareResponse = shareResponses[i] as JRPCResponse<LegacyShareRequestResult>;\n              if (currentShareResponse?.result?.keys?.length > 0) {\n                currentShareResponse.result.keys.sort((a, b) => new BN(a.Index, 16).cmp(new BN(b.Index, 16)));\n                const firstKey = currentShareResponse.result.keys[0];\n                if (firstKey.Metadata) {\n                  const metadata = {\n                    ephemPublicKey: Buffer.from(firstKey.Metadata.ephemPublicKey, \"hex\"),\n                    iv: Buffer.from(firstKey.Metadata.iv, \"hex\"),\n                    mac: Buffer.from(firstKey.Metadata.mac, \"hex\"),\n                    // mode: Buffer.from(firstKey.Metadata.mode, \"hex\"),\n                  };\n                  sharePromises.push(\n                    decrypt(tmpKey, {\n                      ...metadata,\n                      ciphertext: Buffer.from(Buffer.from(firstKey.Share, \"base64\").toString(\"binary\").padStart(64, \"0\"), \"hex\"),\n                    }).catch((err) => log.debug(\"share decryption\", err))\n                  );\n                } else {\n                  sharePromises.push(Promise.resolve(Buffer.from(firstKey.Share.padStart(64, \"0\"), \"hex\")));\n                }\n              } else {\n                sharePromises.push(Promise.resolve(undefined));\n              }\n              nodeIndexes.push(new BN(indexes[i], 16));\n            }\n            const sharesResolved = await Promise.all(sharePromises);\n            if (sharedState.resolved) return undefined;\n\n            const decryptedShares = sharesResolved.reduce(\n              (acc, curr, index) => {\n                if (curr) acc.push({ index: nodeIndexes[index], value: new BN(curr) });\n                return acc;\n              },\n              [] as { index: BN; value: BN }[]\n            );\n            // run lagrange interpolation on all subsets, faster in the optimistic scenario than berlekamp-welch due to early exit\n            const allCombis = kCombinations(decryptedShares.length, ~~(endpoints.length / 2) + 1);\n            let privateKey: BN | null = null;\n            for (let j = 0; j < allCombis.length; j += 1) {\n              const currentCombi = allCombis[j];\n              const currentCombiShares = decryptedShares.filter((_, index) => currentCombi.includes(index));\n              const shares = currentCombiShares.map((x) => x.value);\n              const indices = currentCombiShares.map((x) => x.index);\n              const derivedPrivateKey = lagrangeInterpolation(this.ec, shares, indices);\n              if (!derivedPrivateKey) continue;\n              const decryptedPubKey = getPublic(Buffer.from(derivedPrivateKey.toString(16, 64), \"hex\")).toString(\"hex\");\n              const decryptedPubKeyX = decryptedPubKey.slice(2, 66);\n              const decryptedPubKeyY = decryptedPubKey.slice(66);\n              if (\n                new BN(decryptedPubKeyX, 16).cmp(new BN(thresholdPublicKey.X, 16)) === 0 &&\n                new BN(decryptedPubKeyY, 16).cmp(new BN(thresholdPublicKey.Y, 16)) === 0\n              ) {\n                privateKey = derivedPrivateKey;\n                break;\n              }\n            }\n            if (privateKey === undefined || privateKey === null) {\n              throw new Error(\"could not derive private key\");\n            }\n            return privateKey;\n          }\n          throw new Error(\"invalid\");\n        });\n      })\n      .then(async (returnedKey) => {\n        const oAuthKey = returnedKey;\n        if (!oAuthKey) throw new Error(\"Invalid private key returned\");\n        const oAuthPubKey = getPublic(Buffer.from(oAuthKey.toString(16, 64), \"hex\")).toString(\"hex\");\n        const oAuthKeyX = oAuthPubKey.slice(2, 66);\n        const oAuthKeyY = oAuthPubKey.slice(66);\n        let metadataNonce: BN;\n        let finalPubKey: curve.base.BasePoint;\n        let typeOfUser: UserType = \"v1\";\n        let pubKeyNonceResult: { X: string; Y: string } | undefined;\n        if (this.enableOneKey) {\n          const nonceResult = await getNonce(this.legacyMetadataHost, this.ec, this.serverTimeOffset, oAuthKeyX, oAuthKeyY, oAuthKey);\n          metadataNonce = new BN(nonceResult.nonce || \"0\", 16);\n          typeOfUser = nonceResult.typeOfUser;\n          if (typeOfUser === \"v2\") {\n            finalPubKey = this.ec\n              .keyFromPublic({ x: oAuthKeyX, y: oAuthKeyY })\n              .getPublic()\n              .add(\n                this.ec\n                  .keyFromPublic({ x: (nonceResult as v2NonceResultType).pubNonce.x, y: (nonceResult as v2NonceResultType).pubNonce.y })\n                  .getPublic()\n              );\n            pubKeyNonceResult = { X: (nonceResult as v2NonceResultType).pubNonce.x, Y: (nonceResult as v2NonceResultType).pubNonce.y };\n          } else {\n            // for imported keys in legacy networks\n            metadataNonce = await getMetadata(this.legacyMetadataHost, { pub_key_X: oAuthKeyX, pub_key_Y: oAuthKeyY });\n            const privateKeyWithNonce = oAuthKey.add(metadataNonce).umod(this.ec.curve.n);\n            finalPubKey = this.ec.keyFromPrivate(privateKeyWithNonce.toString(\"hex\"), \"hex\").getPublic();\n          }\n        } else {\n          // for imported keys in legacy networks\n          metadataNonce = await getMetadata(this.legacyMetadataHost, { pub_key_X: oAuthKeyX, pub_key_Y: oAuthKeyY });\n          const privateKeyWithNonce = oAuthKey.add(metadataNonce).umod(this.ec.curve.n);\n          finalPubKey = this.ec.keyFromPrivate(privateKeyWithNonce.toString(\"hex\"), \"hex\").getPublic();\n        }\n\n        const oAuthKeyAddress = generateAddressFromPrivKey(this.ec, oAuthKey);\n\n        let finalPrivKey = \"\"; // it is empty for v2 user upgraded to 2/n\n        if (typeOfUser === \"v1\" || (typeOfUser === \"v2\" && metadataNonce.gt(new BN(0)))) {\n          const privateKeyWithNonce = oAuthKey.add(metadataNonce).umod(this.ec.curve.n);\n          finalPrivKey = privateKeyWithNonce.toString(\"hex\", 64).padStart(64, \"0\");\n        }\n\n        let isUpgraded: boolean | null = false;\n        if (typeOfUser === \"v1\") {\n          isUpgraded = null;\n        } else if (typeOfUser === \"v2\") {\n          isUpgraded = metadataNonce.eq(new BN(\"0\"));\n        }\n\n        // deriving address from pub key coz pubkey is always available\n        // but finalPrivKey won't be available for  v2 user upgraded to 2/n\n        let finalEvmAddress = \"\";\n        if (finalPubKey) {\n          finalEvmAddress = generateAddressFromPubKey(this.ec, finalPubKey.getX(), finalPubKey.getY());\n          log.debug(\"> torus.js/retrieveShares\", { finalEvmAddress });\n        } else {\n          throw new Error(\"Invalid public key, this might be a bug, please report this to web3auth team\");\n        }\n\n        return {\n          finalKeyData: {\n            evmAddress: finalEvmAddress,\n            X: finalPubKey ? finalPubKey.getX().toString(16, 64) : \"\", // this is final pub x user before and after updating to 2/n\n            Y: finalPubKey ? finalPubKey.getY().toString(16, 64) : \"\", // this is final pub y user before and after updating to 2/n\n            privKey: finalPrivKey,\n          },\n          oAuthKeyData: {\n            evmAddress: oAuthKeyAddress,\n            X: oAuthKeyX,\n            Y: oAuthKeyY,\n            privKey: oAuthKey.toString(\"hex\", 64).padStart(64, \"0\"),\n          },\n          sessionData: {\n            sessionTokenData: [],\n            sessionAuthKey: \"\",\n          },\n          metadata: {\n            pubNonce: pubKeyNonceResult,\n            nonce: metadataNonce,\n            typeOfUser: typeOfUser as UserType,\n            upgraded: isUpgraded,\n          },\n          nodesData: {\n            nodeIndexes: [],\n          },\n        };\n      });\n  }\n\n  private async getLegacyPublicAddress(\n    endpoints: string[],\n    torusNodePubs: INodePub[],\n    { verifier, verifierId }: { verifier: string; verifierId: string },\n    enableOneKey: boolean\n  ): Promise<TorusPublicKey> {\n    log.debug(\"> torus.js/getPublicAddress\", { endpoints, torusNodePubs, verifier, verifierId });\n\n    let finalKeyResult: LegacyVerifierLookupResponse | undefined;\n    let isNewKey = false;\n\n    const { keyResult, errorResult } = (await legacyKeyLookup(endpoints, verifier, verifierId)) || {};\n    if (errorResult && JSON.stringify(errorResult).includes(\"Verifier not supported\")) {\n      // change error msg\n      throw new Error(`Verifier not supported. Check if you: \\n\n      1. Are on the right network (Torus testnet/mainnet) \\n\n      2. Have setup a verifier on dashboard.web3auth.io?`);\n    } else if (errorResult && JSON.stringify(errorResult).includes(\"Verifier + VerifierID has not yet been assigned\")) {\n      await legacyKeyAssign({\n        endpoints,\n        torusNodePubs,\n        lastPoint: undefined,\n        firstPoint: undefined,\n        verifier,\n        verifierId,\n        signerHost: this.signerHost,\n        network: this.network,\n        clientId: this.clientId,\n      });\n      const assignResult = await legacyWaitKeyLookup(endpoints, verifier, verifierId, 1000);\n      finalKeyResult = assignResult?.keyResult;\n      isNewKey = true;\n    } else if (keyResult) {\n      finalKeyResult = keyResult;\n    } else {\n      throw new Error(`node results do not match at first lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`);\n    }\n    log.debug(\"> torus.js/getPublicAddress\", { finalKeyResult, isNewKey });\n\n    if (finalKeyResult) {\n      return this.formatLegacyPublicKeyData({\n        finalKeyResult,\n        isNewKey,\n        enableOneKey,\n      });\n    }\n    throw new Error(`node results do not match at final lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`);\n  }\n\n  private generateNonceMetadataParams(operation: string, privateKey: BN, nonce?: BN): NonceMetadataParams {\n    const key = this.ec.keyFromPrivate(privateKey.toString(\"hex\", 64));\n    const setData: Partial<SetNonceData> = {\n      operation,\n      timestamp: new BN(~~(this.serverTimeOffset + Date.now() / 1000)).toString(16),\n    };\n\n    if (nonce) {\n      setData.data = nonce.toString(\"hex\", 64);\n    }\n    const sig = key.sign(keccak256(Buffer.from(stringify(setData), \"utf8\")).slice(2));\n    return {\n      pub_key_X: key.getPublic().getX().toString(\"hex\", 64),\n      pub_key_Y: key.getPublic().getY().toString(\"hex\", 64),\n      set_data: setData,\n      signature: Buffer.from(sig.r.toString(16, 64) + sig.s.toString(16, 64) + new BN(\"\").toString(16, 2), \"hex\").toString(\"base64\"),\n    };\n  }\n\n  private async getNewPublicAddress(\n    endpoints: string[],\n    { verifier, verifierId, extendedVerifierId }: { verifier: string; verifierId: string; extendedVerifierId?: string },\n    enableOneKey: boolean\n  ): Promise<TorusPublicKey> {\n    log.debug(\"> torus.js/getPublicAddress\", { endpoints, verifier, verifierId });\n    const keyAssignResult = await GetPubKeyOrKeyAssign({\n      endpoints,\n      network: this.network,\n      verifier,\n      verifierId,\n      extendedVerifierId,\n    });\n    const { errorResult, keyResult, nodeIndexes = [] } = keyAssignResult;\n    const { nonceResult } = keyAssignResult;\n    if (errorResult && JSON.stringify(errorResult).toLowerCase().includes(\"verifier not supported\")) {\n      // change error msg\n      throw new Error(`Verifier not supported. Check if you: \\n\n      1. Are on the right network (Torus testnet/mainnet) \\n\n      2. Have setup a verifier on dashboard.web3auth.io?`);\n    }\n    if (errorResult) {\n      throw new Error(`node results do not match at first lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`);\n    }\n    log.debug(\"> torus.js/getPublicAddress\", { keyResult });\n    if (!keyResult?.keys) {\n      throw new Error(`node results do not match at final lookup ${JSON.stringify(keyResult || {})}, ${JSON.stringify(errorResult || {})}`);\n    }\n\n    // no need of nonce for extendedVerifierId (tss verifier id)\n    if (!nonceResult && !extendedVerifierId && !LEGACY_NETWORKS_ROUTE_MAP[this.network as TORUS_LEGACY_NETWORK_TYPE]) {\n      throw new GetOrSetNonceError(\"metadata nonce is missing in share response\");\n    }\n    const { pub_key_X: X, pub_key_Y: Y } = keyResult.keys[0];\n    let pubNonce: { X: string; Y: string } | undefined;\n    const nonce = new BN(nonceResult?.nonce || \"0\", 16);\n    let oAuthPubKey: curve.base.BasePoint;\n    let finalPubKey: curve.base.BasePoint;\n    if (extendedVerifierId) {\n      // for tss key no need to add pub nonce\n      finalPubKey = this.ec.keyFromPublic({ x: X, y: Y }).getPublic();\n      oAuthPubKey = finalPubKey;\n    } else if (LEGACY_NETWORKS_ROUTE_MAP[this.network as TORUS_LEGACY_NETWORK_TYPE]) {\n      return this.formatLegacyPublicKeyData({\n        isNewKey: keyResult.is_new_key,\n        enableOneKey,\n        finalKeyResult: {\n          keys: keyResult.keys,\n        },\n      });\n    } else {\n      const v2NonceResult = nonceResult as v2NonceResultType;\n      oAuthPubKey = this.ec.keyFromPublic({ x: X, y: Y }).getPublic();\n      finalPubKey = this.ec\n        .keyFromPublic({ x: X, y: Y })\n        .getPublic()\n        .add(this.ec.keyFromPublic({ x: v2NonceResult.pubNonce.x, y: v2NonceResult.pubNonce.y }).getPublic());\n\n      pubNonce = { X: v2NonceResult.pubNonce.x, Y: v2NonceResult.pubNonce.y };\n    }\n\n    if (!oAuthPubKey) {\n      throw new Error(\"Unable to derive oAuthPubKey\");\n    }\n    const oAuthX = oAuthPubKey.getX().toString(16, 64);\n    const oAuthY = oAuthPubKey.getY().toString(16, 64);\n    const oAuthAddress = generateAddressFromPubKey(this.ec, oAuthPubKey.getX(), oAuthPubKey.getY());\n    log.debug(\"> torus.js/getPublicAddress, oAuthKeyData\", { X: oAuthX, Y: oAuthY, oAuthAddress, nonce: nonce?.toString(16), pubNonce });\n\n    if (!finalPubKey) {\n      throw new Error(\"Unable to derive finalPubKey\");\n    }\n    const finalX = finalPubKey ? finalPubKey.getX().toString(16, 64) : \"\";\n    const finalY = finalPubKey ? finalPubKey.getY().toString(16, 64) : \"\";\n    const finalAddress = finalPubKey ? generateAddressFromPubKey(this.ec, finalPubKey.getX(), finalPubKey.getY()) : \"\";\n    return {\n      oAuthKeyData: {\n        evmAddress: oAuthAddress,\n        X: oAuthX,\n        Y: oAuthY,\n      },\n      finalKeyData: {\n        evmAddress: finalAddress,\n        X: finalX,\n        Y: finalY,\n      },\n      metadata: {\n        pubNonce,\n        nonce,\n        upgraded: (nonceResult as v2NonceResultType)?.upgraded || false,\n        typeOfUser: \"v2\",\n      },\n      nodesData: {\n        nodeIndexes,\n      },\n    };\n  }\n\n  private async formatLegacyPublicKeyData(params: {\n    finalKeyResult: LegacyVerifierLookupResponse;\n    enableOneKey: boolean;\n    isNewKey: boolean;\n  }): Promise<TorusPublicKey> {\n    const { finalKeyResult, enableOneKey, isNewKey } = params;\n    const { pub_key_X: X, pub_key_Y: Y } = finalKeyResult.keys[0];\n    let nonceResult: GetOrSetNonceResult;\n    let nonce: BN;\n    let finalPubKey: curve.base.BasePoint;\n    let typeOfUser: GetOrSetNonceResult[\"typeOfUser\"];\n    let pubNonce: { X: string; Y: string } | undefined;\n\n    const oAuthPubKey = this.ec.keyFromPublic({ x: X, y: Y }).getPublic();\n\n    if (enableOneKey) {\n      try {\n        nonceResult = await getOrSetNonce(this.legacyMetadataHost, this.ec, this.serverTimeOffset, X, Y, undefined, !isNewKey);\n        nonce = new BN(nonceResult.nonce || \"0\", 16);\n        typeOfUser = nonceResult.typeOfUser;\n      } catch {\n        throw new GetOrSetNonceError();\n      }\n      if (nonceResult.typeOfUser === \"v1\") {\n        nonce = await getMetadata(this.legacyMetadataHost, { pub_key_X: X, pub_key_Y: Y });\n        finalPubKey = this.ec\n          .keyFromPublic({ x: X, y: Y })\n          .getPublic()\n          .add(this.ec.keyFromPrivate(nonce.toString(16, 64), \"hex\").getPublic());\n      } else if (nonceResult.typeOfUser === \"v2\") {\n        finalPubKey = this.ec\n          .keyFromPublic({ x: X, y: Y })\n          .getPublic()\n          .add(this.ec.keyFromPublic({ x: nonceResult.pubNonce.x, y: nonceResult.pubNonce.y }).getPublic());\n        pubNonce = { X: nonceResult.pubNonce.x, Y: nonceResult.pubNonce.y };\n      } else {\n        throw new Error(\"getOrSetNonce should always return typeOfUser.\");\n      }\n    } else {\n      typeOfUser = \"v1\";\n      nonce = await getMetadata(this.legacyMetadataHost, { pub_key_X: X, pub_key_Y: Y });\n      finalPubKey = this.ec\n        .keyFromPublic({ x: X, y: Y })\n        .getPublic()\n        .add(this.ec.keyFromPrivate(nonce.toString(16, 64), \"hex\").getPublic());\n    }\n\n    if (!oAuthPubKey) {\n      throw new Error(\"Unable to derive oAuthPubKey\");\n    }\n    const oAuthX = oAuthPubKey.getX().toString(16, 64);\n    const oAuthY = oAuthPubKey.getY().toString(16, 64);\n    const oAuthAddress = generateAddressFromPubKey(this.ec, oAuthPubKey.getX(), oAuthPubKey.getY());\n    log.debug(\"> torus.js/getPublicAddress, oAuthKeyData\", { X: oAuthX, Y: oAuthY, oAuthAddress, nonce: nonce?.toString(16), pubNonce });\n\n    if (typeOfUser === \"v2\" && !finalPubKey) {\n      throw new Error(\"Unable to derive finalPubKey\");\n    }\n    const finalX = finalPubKey ? finalPubKey.getX().toString(16, 64) : \"\";\n    const finalY = finalPubKey ? finalPubKey.getY().toString(16, 64) : \"\";\n    const finalAddress = finalPubKey ? generateAddressFromPubKey(this.ec, finalPubKey.getX(), finalPubKey.getY()) : \"\";\n    return {\n      oAuthKeyData: {\n        evmAddress: oAuthAddress,\n        X: oAuthX,\n        Y: oAuthY,\n      },\n      finalKeyData: {\n        evmAddress: finalAddress,\n        X: finalX,\n        Y: finalY,\n      },\n      metadata: {\n        pubNonce,\n        nonce,\n        upgraded: (nonceResult as v2NonceResultType)?.upgraded || false,\n        typeOfUser,\n      },\n      nodesData: {\n        nodeIndexes: [],\n      },\n    };\n  }\n}\n\nexport default Torus;\n"],"names":["JRPC_METHODS","GET_OR_SET_KEY","COMMITMENT_REQUEST","IMPORT_SHARE","GET_SHARE_OR_KEY_ASSIGN","normalizeKeysResult","result","finalResult","keys","is_new_key","length","map","key","pub_key_X","pub_key_Y","address","kCombinations","s","k","set","Array","from","_","i","reduce","acc","cur","combs","tailCombs","slice","j","push","thresholdSame","arr","t","hashMap","str","JsonStringify","undefined","encParamsBufToHex","encParams","iv","Buffer","toString","ephemPublicKey","ciphertext","mac","mode","encParamsHexToBuf","eciesData","GetOrSetNonceError","Error","log","loglevel","getLogger","disableAll","keccak256","a","hash","keccakHash","stripHexPrefix","startsWith","toChecksumAddress","hexAddress","toLowerCase","buf","ret","parseInt","toUpperCase","generateAddressFromPrivKey","ecCurve","privateKey","keyFromPrivate","publicKey","getPublic","encode","info","evmAddressLower","generateAddressFromPubKey","publicKeyX","publicKeyY","keyFromPublic","x","y","getPostboxKeyFrom1OutOf1","privKey","nonce","privKeyBN","BN","nonceBN","sub","umod","curve","n","Point","constructor","_defineProperty","enc","concat","Share","shareIndex","share","fromJSON","value","toJSON","Polynomial","polynomial","getThreshold","polyEval","tmpX","xi","sum","add","tmp","mul","generateShares","shareIndexes","newShareIndexes","index","shares","generatePrivateExcludingIndexes","generatePrivate","find","el","eq","generateEmptyBNArray","denominator","innerPoints","interpolationPoly","coefficients","d","cmp","invm","newCoefficients","pointSort","pointArrClone","sort","b","lagrange","unsortedPoints","sortedPoints","lagrangeInterpolatePolynomial","points","lagrangeInterpolation","nodeIndex","secret","upper","lower","neg","temp","delta","generateRandomPolynomial","degree","deterministicShares","actualS","poly","isArray","forEach","Object","values","convertMetadataToNonce","params","message","decryptNodeData","ciphertextHex","metadata","decryptedSigBuffer","decrypt","_objectSpread","generateMetadataParams","serverTimeOffset","setData","data","timestamp","Date","now","sig","sign","stringify","getX","getY","set_data","signature","r","getMetadata","legacyMetadataHost","options","arguments","metadataResponse","post","useAPIKey","error","getOrSetNonce","X","Y","getOnly","msg","getNonce","config","logRequestTracing","capitalizeFirstLetter","charAt","SomeError","_ref","errors","responses","predicate","join","JSON","Some","promises","Promise","resolve","reject","finishedCount","sharedState","resolved","errorArr","fill","resultArr","predicateError","then","resp","catch","finally","z","_error$data","id","it","_predicateError","GetPubKeyOrKeyAssign","endpoints","network","verifier","verifierId","extendedVerifierId","lookupPromises","generateJsonRPCObject","verifier_id","extended_verifier_id","one_key_flow","fetch_node_index","logTracingHeader","err","nonceResult","nodeIndexes","lookupResults","lookupPubKeys","filter","x1","_x1$result","pubNonceX","nonce_data","pubNonce","errorResult","x2","keyResult","x3","LEGACY_NETWORKS_ROUTE_MAP","currentNodePubKey","thresholdPubKey","node_index","retrieveOrImportShare","enableOneKey","allowHost","clientId","verifierParams","idToken","importedShares","extraParams","get","headers","enableGating","promiseArr","sessionAuthKey","pubKey","pubKeyX","pubKeyY","tokenCommitment","isImportShareReq","p","messageprefix","tokencommitment","temppubx","temppuby","verifieridentifier","completedRequests","requiredNodeResult","_resp$result","nodeindex","promiseArrRequest","nodeSigs","importedShare","encrypted","use_temp","item","idtoken","nodesignatures","pub_key_x","pub_key_y","encrypted_share","encrypted_share_metadata","key_type","nonce_signature","thresholdNonceData","shareResponses","pubkeys","public_key","_x$result$keys$0$nonc","thresholdPublicKey","thresholdReqCount","sharePromises","sessionTokenSigPromises","sessionTokenPromises","sessionTokenData","isNewKeyResponses","currentShareResponse","session_tokens","sessionTokens","session_token_metadata","sessionTokenMetadata","session_token_sigs","sessionTokenSigs","session_token_sig_metadata","sessionTokenSigMetadata","isNewKey","_sessionTokenSigMetad","debug","_sessionTokenMetadata","latestKey","share_metadata","padStart","allPromises","all","sharesResolved","sessionSigsResolved","sessionTokensResolved","validSigs","minThresholdRequired","validTokens","token","node_pubx","node_puby","decryptedShares","curr","allCombis","currentCombi","currentCombiShares","includes","indices","derivedPrivateKey","decryptedPubKey","decryptedPubKeyX","decryptedPubKeyY","thresholdIsNewKey","res","_nonceResult","oAuthKey","oAuthPubKey","oAuthPubkeyX","oAuthPubkeyY","metadataNonce","finalPubKey","typeOfUser","privateKeyWithNonce","oAuthKeyAddress","finalEvmAddress","finalPrivKey","gt","isUpgraded","finalKeyData","evmAddress","oAuthKeyData","sessionData","upgraded","nodesData","toNumber","legacyKeyLookup","lookupShares","legacyKeyAssign","torusNodePubs","lastPoint","firstPoint","signerHost","nodeNum","initialPoint","Math","floor","random","signedData","error2","status","acceptedErrorMsgs","some","_error$message","legacyWaitKeyLookup","timeout","setTimeout","Torus","ec","EC","SIGNER_MAP","METADATA_MAP","isLegacyNetwork","legacyNetwork","migrationCompleted","enableLogging","v","enableAll","setAPIKey","apiKey","setEmbedHost","embedHost","isGetOrSetNonceError","getPostboxKey","torusKey","retrieveShares","indexes","legacyRetrieveShares","getPublicAddress","_ref2","getLegacyPublicAddress","getNewPublicAddress","importPrivateKey","nodePubkeys","newPrivateKey","threshold","nodeIndexesBn","privKeyBn","getPrivate","randomNonce","nonceParams","generateNonceMetadataParams","nonceData","sharesData","encPromises","shareJson","nodePubKey","encrypt","encodeCompressed","encShares","encParamsMetadata","shareData","Number","getUserTypeAndAddress","_ref3","tmpKey","PublicKey","_currentShareResponse","Index","firstKey","Metadata","returnedKey","oAuthKeyX","oAuthKeyY","pubKeyNonceResult","_ref4","finalKeyResult","assignResult","formatLegacyPublicKeyData","operation","_ref5","keyAssignResult","v2NonceResult","oAuthX","oAuthY","oAuthAddress","finalX","finalY","finalAddress","_nonce"],"mappings":"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"}