import { TORUS_NETWORK_TYPE } from "@toruslabs/constants";
import { ec } from "elliptic";
import { ImportedShare, KeyAssignInput, KeyLookupResult, LegacyKeyLookupResult, TorusKey, VerifierParams } from "../interfaces";
export declare const GetPubKeyOrKeyAssign: (params: {
    endpoints: string[];
    network: TORUS_NETWORK_TYPE;
    verifier: string;
    verifierId: string;
    extendedVerifierId?: string;
}) => Promise<KeyLookupResult>;
export declare function retrieveOrImportShare(params: {
    legacyMetadataHost: string;
    serverTimeOffset: number;
    enableOneKey: boolean;
    ecCurve: ec;
    allowHost: string;
    network: string;
    clientId: string;
    endpoints: string[];
    verifier: string;
    verifierParams: VerifierParams;
    idToken: string;
    importedShares?: ImportedShare[];
    extraParams: Record<string, unknown>;
}): Promise<TorusKey>;
export declare const legacyKeyLookup: (endpoints: string[], verifier: string, verifierId: string) => Promise<LegacyKeyLookupResult>;
export declare const legacyKeyAssign: ({ endpoints, torusNodePubs, lastPoint, firstPoint, verifier, verifierId, signerHost, network, clientId, }: KeyAssignInput) => Promise<void>;
export declare const legacyWaitKeyLookup: (endpoints: string[], verifier: string, verifierId: string, timeout: number) => Promise<LegacyKeyLookupResult>;
