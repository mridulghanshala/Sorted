import { INodePub, TORUS_NETWORK_TYPE } from "@toruslabs/constants";
import { ec as EC } from "elliptic";
import { TorusCtorOptions, TorusKey, TorusPublicKey, VerifierParams } from "./interfaces";
declare class Torus {
    allowHost: string;
    serverTimeOffset: number;
    network: TORUS_NETWORK_TYPE;
    clientId: string;
    ec: EC;
    enableOneKey: boolean;
    private signerHost;
    private legacyMetadataHost;
    constructor({ enableOneKey, clientId, network, serverTimeOffset, allowHost, legacyMetadataHost }: TorusCtorOptions);
    get isLegacyNetwork(): boolean;
    static enableLogging(v?: boolean): void;
    static setAPIKey(apiKey: string): void;
    static setEmbedHost(embedHost: string): void;
    static isGetOrSetNonceError(err: unknown): boolean;
    static getPostboxKey(torusKey: TorusKey): string;
    retrieveShares(endpoints: string[], indexes: number[], verifier: string, verifierParams: VerifierParams, idToken: string, extraParams?: Record<string, unknown>): Promise<TorusKey>;
    getPublicAddress(endpoints: string[], torusNodePubs: INodePub[], { verifier, verifierId, extendedVerifierId }: {
        verifier: string;
        verifierId: string;
        extendedVerifierId?: string;
    }): Promise<TorusPublicKey>;
    importPrivateKey(endpoints: string[], nodeIndexes: number[], nodePubkeys: INodePub[], verifier: string, verifierParams: VerifierParams, idToken: string, newPrivateKey: string, extraParams?: Record<string, unknown>): Promise<TorusKey>;
    /**
     * Note: use this function only for openlogin tkey account lookups.
     * this is a legacy function, use getPublicAddress instead for new networks
     */
    getUserTypeAndAddress(endpoints: string[], torusNodePubs: INodePub[], { verifier, verifierId, extendedVerifierId }: {
        verifier: string;
        verifierId: string;
        extendedVerifierId?: string;
    }): Promise<TorusPublicKey>;
    private legacyRetrieveShares;
    private getLegacyPublicAddress;
    private generateNonceMetadataParams;
    private getNewPublicAddress;
    private formatLegacyPublicKeyData;
}
export default Torus;
