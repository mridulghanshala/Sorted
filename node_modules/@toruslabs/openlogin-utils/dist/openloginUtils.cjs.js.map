{"version":3,"file":"openloginUtils.cjs.js","mappings":"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","sources":["webpack://@toruslabs/openlogin-utils/webpack/bootstrap","webpack://@toruslabs/openlogin-utils/webpack/runtime/compat get default export","webpack://@toruslabs/openlogin-utils/webpack/runtime/define property getters","webpack://@toruslabs/openlogin-utils/webpack/runtime/hasOwnProperty shorthand","webpack://@toruslabs/openlogin-utils/webpack/runtime/make namespace object","webpack://@toruslabs/openlogin-utils/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@toruslabs/openlogin-utils/external commonjs2 \"base64url\"","webpack://@toruslabs/openlogin-utils/./src/utils.ts","webpack://@toruslabs/openlogin-utils/./src/browserStorage.ts","webpack://@toruslabs/openlogin-utils/external commonjs2 \"@babel/runtime/helpers/objectSpread2\"","webpack://@toruslabs/openlogin-utils/external commonjs2 \"@toruslabs/constants\"","webpack://@toruslabs/openlogin-utils/./src/constants.ts","webpack://@toruslabs/openlogin-utils/./src/interfaces.ts","webpack://@toruslabs/openlogin-utils/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"base64url\");","import base64urlLib from \"base64url\";\n\nexport const base64url = base64urlLib;\n\nexport function safebtoa(str: string): string {\n  return base64url.encode(str);\n}\n\nexport function safeatob(str: string): string {\n  // Going backwards: from bytestream, to percent-encoding, to original string.\n  return base64url.decode(str);\n}\n\nexport function base64toJSON<T = Record<string, unknown>>(b64str: string): T {\n  return JSON.parse(base64url.decode(b64str));\n}\n\nexport function jsonToBase64<T = Record<string, unknown>>(json: T): string {\n  return base64url.encode(JSON.stringify(json));\n}\n\nexport interface IStorage {\n  getItem(key: string): string;\n  setItem(key: string, value: string): void;\n}\n\nexport function storageAvailable(type: string): boolean {\n  let storageExists = false;\n  let storageLength = 0;\n  let storage: Storage;\n  try {\n    storage = window[type as \"localStorage\" | \"sessionStorage\"];\n    storageExists = true;\n    storageLength = storage.length;\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (err: unknown) {\n    const error = err as { code: number; name: string };\n    return (\n      error &&\n      // everything except Firefox\n      (error.code === 22 ||\n        // Firefox\n        error.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        error.name === \"QuotaExceededError\" ||\n        // Firefox\n        error.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n      // acknowledge QuotaExceededError only if there's something already stored\n      storageExists &&\n      storageLength !== 0\n    );\n  }\n}\n","import { IStorage, storageAvailable } from \"./utils\";\n\nexport class MemoryStore implements IStorage {\n  store: Record<string, string> = {};\n\n  getItem(key: string): string {\n    return this.store[key] || null;\n  }\n\n  setItem(key: string, value: string): void {\n    this.store[key] = value;\n  }\n}\n\nexport class BrowserStorage {\n  // eslint-disable-next-line no-use-before-define\n  private static instance: BrowserStorage;\n\n  public storage: IStorage;\n\n  private _storeKey: string;\n\n  private constructor(storeKey: string, storage: IStorage) {\n    this.storage = storage;\n    this._storeKey = storeKey;\n    try {\n      if (!storage.getItem(storeKey)) {\n        this.resetStore();\n      }\n    } catch (error) {\n      // Storage is not available\n    }\n  }\n\n  static getInstance(key: string, storageKey: \"session\" | \"local\" = \"local\"): BrowserStorage {\n    if (!this.instance) {\n      let storage: IStorage;\n      if (storageKey === \"local\" && storageAvailable(\"localStorage\")) {\n        storage = window.localStorage;\n      } else if (storageKey === \"session\" && storageAvailable(\"sessionStorage\")) {\n        storage = window.sessionStorage;\n      } else {\n        storage = new MemoryStore();\n      }\n\n      this.instance = new this(key, storage);\n    }\n    return this.instance;\n  }\n\n  toJSON(): string {\n    return this.storage.getItem(this._storeKey);\n  }\n\n  resetStore(): Record<string, unknown> {\n    const currStore = this.getStore();\n    this.storage.setItem(this._storeKey, JSON.stringify({}));\n    return currStore;\n  }\n\n  getStore(): Record<string, unknown> {\n    return JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n  }\n\n  get<T>(key: string): T {\n    const store = JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n    return store[key];\n  }\n\n  set<T>(key: string, value: T): void {\n    const store = JSON.parse(this.storage.getItem(this._storeKey) || \"{}\");\n    store[key] = value;\n    this.storage.setItem(this._storeKey, JSON.stringify(store));\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/objectSpread2\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/constants\");","import { TORUS_LEGACY_NETWORK, TORUS_SAPPHIRE_NETWORK } from \"@toruslabs/constants\";\n\nexport const storeKey = \"openlogin_store\";\n\nexport const UX_MODE = {\n  POPUP: \"popup\",\n  REDIRECT: \"redirect\",\n} as const;\n\nexport const OPENLOGIN_NETWORK = {\n  ...TORUS_SAPPHIRE_NETWORK,\n  ...TORUS_LEGACY_NETWORK,\n} as const;\n\nexport const SUPPORTED_KEY_CURVES = {\n  SECP256K1: \"secp256k1\",\n  ED25519: \"ed25519\",\n} as const;\n\nexport const LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  LINE: \"line\",\n  GITHUB: \"github\",\n  KAKAO: \"kakao\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  WECHAT: \"wechat\",\n  EMAIL_PASSWORDLESS: \"email_passwordless\",\n  SMS_PASSWORDLESS: \"sms_passwordless\",\n  WEBAUTHN: \"webauthn\",\n  JWT: \"jwt\",\n} as const;\n\nexport const MFA_LEVELS = {\n  DEFAULT: \"default\",\n  OPTIONAL: \"optional\",\n  MANDATORY: \"mandatory\",\n  NONE: \"none\",\n} as const;\n\nexport const OPENLOGIN_ACTIONS = {\n  LOGIN: \"login\",\n  ENABLE_MFA: \"enable_mfa\",\n  MODIFY_MFA: \"modify_mfa\",\n} as const;\n\nexport const BUILD_ENV = {\n  PRODUCTION: \"production\",\n  DEVELOPMENT: \"development\",\n  STAGING: \"staging\",\n  TESTING: \"testing\",\n} as const;\n\nexport { TORUS_LEGACY_NETWORK, TORUS_SAPPHIRE_NETWORK };\n","import { type TORUS_LEGACY_NETWORK_TYPE } from \"@toruslabs/constants\";\n\nimport { BUILD_ENV, LOGIN_PROVIDER, MFA_LEVELS, OPENLOGIN_ACTIONS, OPENLOGIN_NETWORK, SUPPORTED_KEY_CURVES, UX_MODE } from \"./constants\";\n\nexport { TORUS_LEGACY_NETWORK_TYPE };\n\nexport type UX_MODE_TYPE = (typeof UX_MODE)[keyof typeof UX_MODE];\n\nexport type OriginData = {\n  [P in string]: string;\n};\n\nexport type UserData = {\n  [P in string]: string;\n};\n\nexport type BaseRedirectParams = {\n  /**\n   * redirectUrl is the dapp's url where user will be redirected after login.\n   *\n   * @remarks\n   * Register this url at {@link \"https://dashboard.web3auth.io\"| developer dashboard}\n   * else initialization will give error.\n   */\n  redirectUrl?: string;\n  /**\n   * Any custom state you wish to pass along. This will be returned to you post redirect.\n   * Use this to store data that you want to be available to the dapp after login.\n   */\n  appState?: string;\n};\n\n/**\n * {@label loginProviderType}\n */\nexport type LOGIN_PROVIDER_TYPE = (typeof LOGIN_PROVIDER)[keyof typeof LOGIN_PROVIDER];\n\nexport type OPENLOGIN_ACTIONS_TYPE = (typeof OPENLOGIN_ACTIONS)[keyof typeof OPENLOGIN_ACTIONS];\n\n// autocomplete workaround https://github.com/microsoft/TypeScript/issues/29729\nexport type CUSTOM_LOGIN_PROVIDER_TYPE = string & { toString?: (radix?: number) => string };\n\nexport type MfaLevelType = (typeof MFA_LEVELS)[keyof typeof MFA_LEVELS];\n\nexport type SUPPORTED_KEY_CURVES_TYPE = (typeof SUPPORTED_KEY_CURVES)[keyof typeof SUPPORTED_KEY_CURVES];\n\nexport type OPENLOGIN_NETWORK_TYPE = (typeof OPENLOGIN_NETWORK)[keyof typeof OPENLOGIN_NETWORK];\n\nexport type BUILD_ENV_TYPE = (typeof BUILD_ENV)[keyof typeof BUILD_ENV];\n\nexport interface BaseLoginOptions {\n  /**\n   * If you need to send custom parameters to the Authorization Server,\n   * make sure to use the original parameter name.\n   */\n  [key: string]: unknown;\n  /**\n   * - `'page'`: displays the UI with a full page view\n   * - `'popup'`: displays the UI with a popup window\n   * - `'touch'`: displays the UI in a way that leverages a touch interface\n   * - `'wap'`: displays the UI with a \"feature phone\" type interface\n   */\n  display?: \"page\" | \"popup\" | \"touch\" | \"wap\" | string;\n  /**\n   * - `'none'`: do not prompt user for login or consent on re-authentication\n   * - `'login'`: prompt user for re-authentication\n   * - `'consent'`: prompt user for consent before processing request\n   * - `'select_account'`: prompt user to select an account\n   */\n  prompt?: \"none\" | \"login\" | \"consent\" | \"select_account\" | string;\n  /**\n   * Maximum allowable elapsed time (in seconds) since authentication.\n   * If the last time the user authenticated is greater than this value,\n   * the user must be re-authenticated.\n   */\n  max_age?: string | number;\n  /**\n   * The space-separated list of language tags, ordered by preference.\n   * For example: `'fr-CA fr en'`.\n   */\n  ui_locales?: string;\n  /**\n   * Previously issued ID Token.\n   */\n  id_token_hint?: string;\n  /**\n   * The user's email address or other identifier. When your app knows\n   * which user is trying to authenticate, you can provide this parameter\n   * to pre-fill the email box or select the right session for sign-in.\n   *\n   * This currently only affects the classic Lock experience.\n   */\n  login_hint?: string;\n  acr_values?: string;\n  /**\n   * The default scope to be used on authentication requests.\n   * The defaultScope defined in the Auth0Client is included\n   * along with this scope\n   */\n  scope?: string;\n  /**\n   * The default audience to be used for requesting API access.\n   */\n  audience?: string;\n  /**\n   * The name of the connection configured for your application.\n   * If null, it will redirect to the Auth0 Login Page and show\n   * the Login Widget.\n   */\n  connection?: string;\n}\n\nexport interface ExtraLoginOptions extends BaseLoginOptions {\n  /**\n   * Your Auth0 account domain such as `'example.auth0.com'`,\n   * `'example.eu.auth0.com'` or , `'example.mycompany.com'`\n   * (when using [custom domains](https://auth0.com/docs/custom-domains))\n   */\n  domain?: string;\n  /**\n   * The Client ID found on your Application settings page\n   */\n  client_id?: string;\n  /**\n   * The default URL where Auth0 will redirect your browser to with\n   * the authentication result. It must be whitelisted in\n   * the \"Allowed Callback URLs\" field in your Auth0 Application's\n   * settings. If not provided here, it should be provided in the other\n   * methods that provide authentication.\n   */\n  redirect_uri?: string;\n  /**\n   * The value in seconds used to account for clock skew in JWT expirations.\n   * Typically, this value is no more than a minute or two at maximum.\n   * Defaults to 60s.\n   */\n  leeway?: number;\n  /**\n   * The field in jwt token which maps to verifier id\n   */\n  verifierIdField?: string;\n  /**\n   * Whether the verifier id field is case sensitive\n   * @defaultValue true\n   */\n  isVerifierIdCaseSensitive?: boolean;\n}\n\nexport type LoginParams = BaseRedirectParams & {\n  /**\n   * loginProvider sets the oauth login method to be used.\n   * You can use any of the valid loginProvider from the supported list.\n   */\n  loginProvider: LOGIN_PROVIDER_TYPE | CUSTOM_LOGIN_PROVIDER_TYPE;\n\n  /**\n   * You can set the `mfaLevel` to customize when mfa screen should be shown to user.\n   * It currently accepts 4 values:-\n   * - `'default'`: Setting mfa level to `default` will present mfa screen to user on every third login.\n   * - `'optional'`: Setting mfa level to `default` will present mfa screen to user on every login but user can skip it.\n   * - `'mandatory'`: Setting mfa level to `mandatory` will make it mandatory for user to setup mfa after login.\n   * - `'none'`: Setting mfa level to `none` will make the user skip the mfa setup screen\n   *\n   * Defaults to `default`\n   * @defaultValue `default`\n   */\n  mfaLevel?: MfaLevelType;\n\n  /**\n   * This option is for internal use only in torus wallet and has no effect\n   * on user's login on other dapps.\n   *\n   * Defaults to false\n   * @defaultValue false\n   * @internal\n   */\n  getWalletKey?: boolean;\n\n  /**\n   * extraLoginOptions can be used to pass standard oauth login options to\n   * loginProvider.\n   *\n   * For ex: you will have to pass `login_hint` as user's email and `domain`\n   * as your app domain in `extraLoginOptions` while using `email_passwordless`\n   * loginProvider\n   */\n  extraLoginOptions?: ExtraLoginOptions;\n\n  /**\n   * Custom Logins can get a dapp share returned to them post successful login.\n   * This is useful if the dapps want to use this share to allow users to login seamlessly\n   * dappShare is a 24 word seed phrase\n   */\n  dappShare?: string;\n\n  /**\n   * This curve will be used to determine the public key encoded in the jwt token which returned in\n   * `getUserInfo` function after user login.\n   * You can use that public key from jwt token as a unique user identifier in your backend.\n   *\n   * - `'secp256k1'`: secp256k1 based pub key is added as a wallet public key in jwt token to use.\n   * - `'ed25519'`: ed25519 based pub key is added as a wallet public key in jwt token to use.\n   *\n   * Note: This parameter won't change format of private key returned by openlogin. Private key returned\n   * by openlogin is always `secp256k1`. As of now you have to convert it to `'ed25519'` if you want.\n   * You can use `@toruslabs/openlogin-ed25519` npm package for this purpose.\n   *\n   *\n   * @defaultValue secp256k1\n   */\n  curve?: SUPPORTED_KEY_CURVES_TYPE;\n};\n\nexport type SocialMfaModParams = {\n  /**\n   * loginProvider sets the oauth login method to be used.\n   * You can use any of the valid loginProvider from the supported list.\n   */\n  loginProvider: LOGIN_PROVIDER_TYPE | CUSTOM_LOGIN_PROVIDER_TYPE;\n\n  /**\n   * extraLoginOptions can be used to pass standard oauth login options to\n   * loginProvider.\n   *\n   * For ex: you will have to pass `login_hint` as user's email and `domain`\n   * as your app domain in `extraLoginOptions` while using `email_passwordless`\n   * loginProvider\n   */\n  extraLoginOptions?: ExtraLoginOptions;\n};\nexport const LANGUAGES = {\n  en: \"en\",\n  ja: \"ja\",\n  ko: \"ko\",\n  de: \"de\",\n  zh: \"zh\",\n  es: \"es\",\n  fr: \"fr\",\n  pt: \"pt\",\n  nl: \"nl\",\n} as const;\n\nexport type LANGUAGE_TYPE = (typeof LANGUAGES)[keyof typeof LANGUAGES];\n\nexport const THEME_MODES = {\n  light: \"light\",\n  dark: \"dark\",\n  auto: \"auto\",\n};\n\nexport type THEME_MODE_TYPE = (typeof THEME_MODES)[keyof typeof THEME_MODES];\n\nexport type WhiteLabelData = {\n  /**\n   * App name to display in the UI\n   */\n  appName?: string;\n  /**\n   * App url\n   */\n  appUrl?: string;\n  /**\n   * App logo to use in light mode\n   */\n  logoLight?: string;\n  /**\n   * App logo to use in dark mode\n   */\n  logoDark?: string;\n  /**\n   * language which will be used by web3auth. app will use browser language if not specified. if language is not supported it will use \"en\"\n   * en: english\n   * de: german\n   * ja: japanese\n   * ko: korean\n   * zh: mandarin\n   * es: spanish\n   * fr: french\n   * pt: portuguese\n   * nl: dutch\n   *\n   * @defaultValue en\n   */\n  defaultLanguage?: LANGUAGE_TYPE;\n  /**\n   theme\n   *\n   * @defaultValue auto\n   */\n  mode?: THEME_MODE_TYPE;\n  /**\n   * Use logo loader\n   *\n   * @defaultValue false\n   */\n  useLogoLoader?: boolean;\n\n  /**\n   * Used to customize theme of the login modal with following options\n   * `'primary'` - To customize primary color of modal's content.\n   */\n  theme?: {\n    primary?: string;\n    gray?: string;\n    red?: string;\n    green?: string;\n    success?: string;\n    warning?: string;\n    error?: string;\n    info?: string;\n    white?: string;\n  };\n  /**\n   * Language specific link for terms and conditions on torus-website. See (examples/vue-app) to configure\n   * e.g.\n   * tncLink: {\n   *  en: \"http://example.com/tnc/en\",\n   *  ja: \"http://example.com/tnc/ja\",\n   * }\n   */\n  tncLink?: Partial<Record<LANGUAGE_TYPE, string>>;\n  /**\n   * Language specific link for privacy policy on torus-website. See (examples/vue-app) to configure\n   * e.g.\n   * privacyPolicy: {\n   *  en: \"http://example.com/tnc/en\",\n   *  ja: \"http://example.com/tnc/ja\",\n   * }\n   */\n  privacyPolicy?: Partial<Record<LANGUAGE_TYPE, string>>;\n};\n\nexport type TypeOfLogin =\n  | \"google\"\n  | \"facebook\"\n  | \"reddit\"\n  | \"discord\"\n  | \"twitch\"\n  | \"apple\"\n  | \"github\"\n  | \"linkedin\"\n  | \"twitter\"\n  | \"weibo\"\n  | \"line\"\n  | \"email_password\"\n  | \"passwordless\"\n  | \"jwt\"\n  | \"webauthn\";\n\nexport interface JwtParameters extends BaseLoginOptions {\n  /**\n   * Your Auth0 account domain such as `'example.auth0.com'`,\n   * `'example.eu.auth0.com'` or , `'example.mycompany.com'`\n   * (when using [custom domains](https://auth0.com/docs/custom-domains))\n   */\n  domain?: string;\n  /**\n   * The Client ID found on your Application settings page\n   */\n  client_id?: string;\n  /**\n   * The default URL where Auth0 will redirect your browser to with\n   * the authentication result. It must be whitelisted in\n   * the \"Allowed Callback URLs\" field in your Auth0 Application's\n   * settings. If not provided here, it should be provided in the other\n   * methods that provide authentication.\n   */\n  redirect_uri?: string;\n  /**\n   * The value in seconds used to account for clock skew in JWT expirations.\n   * Typically, this value is no more than a minute or two at maximum.\n   * Defaults to 60s.\n   */\n  leeway?: number;\n\n  /**\n   * The field in jwt token which maps to verifier id\n   */\n  verifierIdField?: string;\n\n  /**\n   * Whether the verifier id field is case sensitive\n   * @defaultValue true\n   */\n  isVerifierIdCaseSensitive?: boolean;\n}\n\nexport type LoginConfig = Record<\n  string,\n  {\n    verifier: string;\n\n    /**\n     * The type of login. Refer to enum `LOGIN_TYPE`\n     */\n    typeOfLogin: TypeOfLogin;\n\n    /**\n     * Display Name. If not provided, we use the default for openlogin app\n     */\n    name?: string;\n\n    /**\n     * Description for button. If provided, it renders as a full length button. else, icon button\n     */\n    description?: string;\n\n    /**\n     * Custom client_id. If not provided, we use the default for openlogin app\n     */\n    clientId?: string;\n\n    verifierSubIdentifier?: string;\n\n    /**\n     * Logo to be shown on mouse hover. If not provided, we use the default for openlogin app\n     */\n    logoHover?: string;\n\n    /**\n     * Logo to be shown on dark background (dark theme). If not provided, we use the default for openlogin app\n     */\n    logoLight?: string;\n\n    /**\n     * Logo to be shown on light background (light theme). If not provided, we use the default for openlogin app\n     */\n    logoDark?: string;\n\n    /**\n     * Show login button on the main list\n     */\n    mainOption?: boolean;\n\n    /**\n     * Whether to show the login button on modal or not\n     */\n    showOnModal?: boolean;\n\n    /**\n     * Whether to show the login button on desktop\n     */\n    showOnDesktop?: boolean;\n\n    /**\n     * Whether to show the login button on mobile\n     */\n    showOnMobile?: boolean;\n\n    /**\n     * If we are using social logins as a backup factor,\n     * then this option will be used to show the type of social login\n     * on the social backup login screen.\n     */\n    showOnSocialBackupFactor?: boolean;\n\n    /**\n     * Custom jwt parameters to configure the login. Useful for Auth0 configuration\n     */\n    jwtParameters?: JwtParameters;\n  }\n>;\n\nexport type OpenloginUserInfo = {\n  email?: string;\n  name?: string;\n  profileImage?: string;\n  aggregateVerifier?: string;\n  verifier: string;\n  verifierId: string;\n  typeOfLogin: LOGIN_PROVIDER_TYPE | CUSTOM_LOGIN_PROVIDER_TYPE;\n  dappShare?: string;\n  /**\n   * Token issued by Web3Auth.\n   */\n  idToken?: string;\n\n  /**\n   * Token issued by OAuth provider. Will be available only if you are using\n   * custom verifiers.\n   */\n  oAuthIdToken?: string;\n\n  /**\n   * Access Token issued by OAuth provider. Will be available only if you are using\n   * custom verifiers.\n   */\n  oAuthAccessToken?: string;\n  appState?: string;\n  touchIDPreference?: string;\n  isMfaEnabled?: boolean;\n};\n\nexport type KeyMode = \"v1\" | \"1/1\" | \"2/n\";\n\nexport interface OpenloginSessionData {\n  privKey?: string;\n  coreKitKey?: string;\n  ed25519PrivKey?: string;\n  coreKitEd25519PrivKey?: string;\n  sessionId?: string;\n  oAuthPrivateKey?: string;\n  tKey?: string;\n  walletKey?: string;\n  userInfo?: OpenloginUserInfo;\n  keyMode?: KeyMode;\n  metadataNonce?: string;\n  authToken?: string;\n  factorKey?: string;\n  signatures?: string[];\n  tssShareIndex?: number;\n  tssPubKey?: string;\n  tssShare?: string;\n  tssNonce?: number;\n  nodeIndexes?: number[];\n}\n\nexport const MFA_FACTOR = {\n  DEVICE: \"deviceShareFactor\",\n  BACKUP_SHARE: \"backUpShareFactor\",\n  SOCIAL_BACKUP: \"socialBackupFactor\",\n  PASSWORD: \"passwordFactor\",\n} as const;\n\nexport type MFA_FACTOR_TYPE = (typeof MFA_FACTOR)[keyof typeof MFA_FACTOR];\nexport type MFA_SETTINGS = {\n  enable: boolean;\n  priority?: number;\n  mandatory?: boolean;\n};\n\nexport type MfaSettings = Partial<Record<MFA_FACTOR_TYPE, MFA_SETTINGS>>;\n\nexport type OpenLoginOptions = {\n  /**\n   * You can get your clientId/projectId by registering your\n   * dapp on {@link \"https://dashboard.web3auth.io\"| developer dashboard}\n   */\n  clientId: string;\n\n  /**\n   * network specifies the openlogin sdk url to be used.\n   *\n   * - `'mainnet'`: https://app.openlogin.com will be used which is the production version.\n   * - `'cyan'`: https://cyan.openlogin.com will be used which is the production cyan version.\n   * - `'testnet'`: https://testing.openlogin.com will be used which is the testing version.\n   * - `'development'`: http://localhost:3000 will be used for development purpose.\n   */\n  network: OPENLOGIN_NETWORK_TYPE;\n\n  /**\n   * This parameter will be used to change the build environment of openlogin sdk.\n   * @defaultValue production\n   */\n  buildEnv?: BUILD_ENV_TYPE;\n\n  /**\n   * redirectUrl is the dapp's url where user will be redirected after login.\n   *\n   * @remarks\n   * Register this url at {@link \"https://dashboard.web3auth.io\"| developer dashboard}\n   * else initialization will give error.\n   */\n  redirectUrl?: string;\n\n  /**\n   * two uxModes are supported:-\n   * - `'POPUP'`: In this uxMode, a popup will be shown to user for login.\n   * - `'REDIRECT'`: In this uxMode, user will be redirected to a new window tab for login.\n   *\n   * @defaultValue `'POPUP'`\n   * @remarks\n   *\n   * Use of `'REDIRECT'` mode is recommended in browsers where popups might get blocked.\n   */\n  uxMode?: UX_MODE_TYPE;\n\n  /**\n   * replaceUrlOnRedirect removes the params from the redirected url after login\n   *\n   * @defaultValue true\n   */\n  replaceUrlOnRedirect?: boolean;\n\n  /**\n   * originData is used to verify the origin of dapp by iframe.\n   *\n   * @internal\n   * @remarks\n   * You don't have to pass originData explicitly if you have registered your dapp at\n   * {@link \"https://dashboard.web3auth.io\"| developer dashboard}.\n   *\n   * originData contains a signature of dapp's origin url which is generated using\n   * project's secret.\n   */\n  originData?: OriginData;\n\n  /**\n   * loginConfig enables you to pass your own login verifiers configuration for various\n   * loginProviders.\n   *\n   * loginConfig is key value map where each key should be a valid loginProvider and value\n   * should be custom configuration for that loginProvider\n   *\n   * @remarks\n   * You can deploy your own verifiers from {@link \"https://dashboard.web3auth.io\"| developer dashboard}\n   * to use here.\n   *\n   */\n  loginConfig?: LoginConfig;\n\n  /**\n   * webauthnTransport enables you to configure the transport type user can use\n   * for saving their share.\n   *\n   * @defaultValue [\"internal\"]\n   *\n   * @remarks\n   * This is only available for v1 users.\n   */\n  webauthnTransports?: AuthenticatorTransport[];\n\n  /**\n   * sdkUrl is for internal development use only and is used to override the\n   * `network` parameter.\n   * @internal\n   */\n  sdkUrl?: string;\n\n  /**\n   * options for whitelabling default openlogin modal.\n   */\n  whiteLabel?: WhiteLabelData;\n\n  /**\n   * Specify a custom storage server url\n   * @defaultValue https://broadcast-server.tor.us\n   * @internal\n   */\n  storageServerUrl?: string;\n\n  /**\n   * setting to \"local\" will persist social login session accross browser tabs.\n   *\n   * @defaultValue \"local\"\n   */\n  storageKey?: \"session\" | \"local\";\n\n  /**\n   * How long should a login session last at a minimum in seconds\n   *\n   * @defaultValue 86400 seconds\n   * @remarks Max value of sessionTime can be 7 * 86400 (7 days)\n   */\n  sessionTime?: number;\n\n  /**\n   * This option is for internal use only in torus wallet and has no effect\n   * on user's login on other dapps.\n   * @internal\n   */\n  sessionNamespace?: string;\n\n  /**\n   * This parameter will be used to enable mfa factors and set priority on UI listing.\n   * List of factors available\n   * backUpShareFactor | socialFactor | passwordFactor\n   * @defaultValue false\n   */\n  mfaSettings?: MfaSettings;\n\n  /**\n   * This parameter will be used to use openlogin mpc\n   * @defaultValue false\n   */\n  useMpc?: boolean;\n};\n\nexport interface BaseLoginParams {\n  loginId?: string;\n  sessionNamespace?: string;\n}\n\nexport interface OpenloginSessionConfig {\n  actionType: OPENLOGIN_ACTIONS_TYPE;\n  options: OpenLoginOptions;\n  params: Partial<LoginParams>;\n  sessionId?: string;\n}\n","export * from \"./browserStorage\";\nexport * from \"./constants\";\nexport * from \"./interfaces\";\nexport * from \"./utils\";\n"],"names":["base64urlLib","base64url","safebtoa","str","encode","safeatob","decode","base64toJSON","b64str","JSON","parse","jsonToBase64","json","stringify","storageAvailable","type","storageExists","storageLength","storage","window","length","x","setItem","removeItem","err","error","code","name","MemoryStore","constructor","_defineProperty","getItem","key","store","value","BrowserStorage","storeKey","_storeKey","resetStore","getInstance","storageKey","arguments","undefined","instance","localStorage","sessionStorage","toJSON","currStore","getStore","get","set","_class2","TORUS_LEGACY_NETWORK","TORUS_SAPPHIRE_NETWORK","UX_MODE","POPUP","REDIRECT","OPENLOGIN_NETWORK","_objectSpread","SUPPORTED_KEY_CURVES","SECP256K1","ED25519","LOGIN_PROVIDER","GOOGLE","FACEBOOK","REDDIT","DISCORD","TWITCH","APPLE","LINE","GITHUB","KAKAO","LINKEDIN","TWITTER","WEIBO","WECHAT","EMAIL_PASSWORDLESS","SMS_PASSWORDLESS","WEBAUTHN","JWT","MFA_LEVELS","DEFAULT","OPTIONAL","MANDATORY","NONE","OPENLOGIN_ACTIONS","LOGIN","ENABLE_MFA","MODIFY_MFA","BUILD_ENV","PRODUCTION","DEVELOPMENT","STAGING","TESTING","LANGUAGES","en","ja","ko","de","zh","es","fr","pt","nl","THEME_MODES","light","dark","auto","MFA_FACTOR","DEVICE","BACKUP_SHARE","SOCIAL_BACKUP","PASSWORD"],"sourceRoot":""}