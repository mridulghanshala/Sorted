{"version":3,"file":"openloginSubkey.esm.js","sources":["../src/mimcsponge.ts","../src/keyDerivation.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable camelcase */\nimport { Scalar, ZqField } from \"@toruslabs/ffjavascript\";\nimport { keccak256 } from \"@toruslabs/metadata-helpers\";\nimport BN from \"bn.js\";\n\nconst F = new ZqField(Scalar.fromString(\"21888242871839275222246405745257275088548364400416034343698204186575808495617\"));\n\nconst SEED = \"mimcsponge\";\nconst NROUNDS = 220;\n\nfunction keccak256Padded(str: string): string {\n  let finalInput: Buffer = Buffer.from(str, \"utf8\");\n  if (typeof str === \"string\" && str.slice(0, 2) === \"0x\" && str.length === 66) {\n    finalInput = Buffer.from(str.slice(2), \"hex\");\n  }\n  return `0x${keccak256(finalInput).toString(\"hex\").padStart(64, \"0\")}`;\n}\n\nexport function mimgGetIV(seed: string): bigint {\n  let _seed = seed;\n  if (typeof _seed === \"undefined\") _seed = SEED;\n  const c = keccak256Padded(`${_seed}_iv`);\n  const cn = Scalar.fromString(new BN(c, 16).toString());\n  const iv = cn.mod(F.p);\n  return iv;\n}\n\nexport function mimcGetConstants(seed?: string, nRounds?: number): bigint[] {\n  let _seed = seed;\n  let _nRounds = nRounds;\n  if (typeof _seed === \"undefined\") _seed = SEED;\n  if (typeof nRounds === \"undefined\") _nRounds = NROUNDS;\n  const cts = new Array(_nRounds);\n  let c = keccak256Padded(SEED);\n  for (let i = 1; i < _nRounds; i += 1) {\n    c = keccak256Padded(c);\n\n    const n1 = new BN(c.slice(2), 16).mod(new BN(F.p.toString()));\n    const c2 = n1.toString(16, 64);\n    cts[i] = F.e(new BN(c2, 16).toString());\n  }\n  cts[0] = F.e(0);\n  cts[cts.length - 1] = F.e(0);\n  return cts;\n}\n\nconst cts = mimcGetConstants(SEED, NROUNDS);\n\nexport function mimcHash(\n  _xL_in: any,\n  _xR_in: any,\n  _k: any\n): {\n  xL: bigint;\n  xR: bigint;\n} {\n  let xL = F.e(_xL_in);\n  let xR = F.e(_xR_in);\n  const k = F.e(_k);\n  for (let i = 0; i < NROUNDS; i += 1) {\n    const c = cts[i];\n    const t = i === 0 ? F.add(xL, k) : F.add(F.add(xL, k), c);\n    const xR_tmp = F.e(xR);\n    if (i < NROUNDS - 1) {\n      xR = xL;\n      xL = F.add(xR_tmp, F.pow(t, 5));\n    } else {\n      xR = F.add(xR_tmp, F.pow(t, 5));\n    }\n  }\n  return {\n    xL: F.normalize(xL),\n    xR: F.normalize(xR),\n  };\n}\n\nexport function mimcMultiHash(arr: any[], key: any, numOutputs: number): bigint[] {\n  let _key = key;\n  let _numOutputs = numOutputs;\n  if (typeof _numOutputs === \"undefined\") {\n    _numOutputs = 1;\n  }\n  if (typeof _key === \"undefined\") {\n    _key = F.zero;\n  }\n\n  let R = F.zero;\n  let C = F.zero;\n\n  for (let i = 0; i < arr.length; i += 1) {\n    R = F.add(R, F.e(arr[i]));\n    const S = mimcHash(R, C, _key);\n    R = S.xL;\n    C = S.xR;\n  }\n  const outputs = [R];\n  for (let i = 1; i < _numOutputs; i += 1) {\n    const S = mimcHash(R, C, _key);\n    R = S.xL;\n    C = S.xR;\n    outputs.push(R);\n  }\n  if (_numOutputs === 1) {\n    return F.normalize(outputs[0]);\n  }\n  return outputs.map((x) => F.normalize(x));\n}\n","import BN from \"bn.js\";\n\nimport { mimcHash } from \"./mimcsponge\";\n\nexport const SECP256K1_CURVE_N = \"fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\";\n\n// creates sub-keys via MiMC hash, output keys are not padded\nexport function subkey(keyHex: string, input: Buffer): string {\n  const privKeyBuf = new BN(keyHex, \"hex\").toString(10);\n  // TODO: check against existing usage of mimc\n  // TODO: check that MPC is possible with mimc, with tests\n  const inputPath = new BN(input).umod(new BN(SECP256K1_CURVE_N, \"hex\")).toString(10);\n\n  const output = mimcHash(1, privKeyBuf, inputPath);\n  return output.xL.toString(16);\n}\n"],"names":["F","ZqField","Scalar","fromString","SEED","NROUNDS","keccak256Padded","str","finalInput","Buffer","from","slice","length","keccak256","toString","padStart","mimgGetIV","seed","_seed","c","cn","BN","iv","mod","p","mimcGetConstants","nRounds","_nRounds","cts","Array","i","n1","c2","e","mimcHash","_xL_in","_xR_in","_k","xL","xR","k","t","add","xR_tmp","pow","normalize","mimcMultiHash","arr","key","numOutputs","_key","_numOutputs","zero","R","C","S","outputs","push","map","x","SECP256K1_CURVE_N","subkey","keyHex","input","privKeyBuf","inputPath","umod","output"],"mappings":"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"}