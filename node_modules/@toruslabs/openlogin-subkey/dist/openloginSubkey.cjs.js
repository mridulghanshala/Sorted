/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  SECP256K1_CURVE_N: () => (/* reexport */ SECP256K1_CURVE_N),
  mimcGetConstants: () => (/* reexport */ mimcGetConstants),
  mimcHash: () => (/* reexport */ mimcHash),
  mimcMultiHash: () => (/* reexport */ mimcMultiHash),
  mimgGetIV: () => (/* reexport */ mimgGetIV),
  subkey: () => (/* reexport */ subkey)
});

;// CONCATENATED MODULE: external "bn.js"
const external_bn_js_namespaceObject = require("bn.js");
var external_bn_js_default = /*#__PURE__*/__webpack_require__.n(external_bn_js_namespaceObject);
;// CONCATENATED MODULE: external "@toruslabs/ffjavascript"
const ffjavascript_namespaceObject = require("@toruslabs/ffjavascript");
;// CONCATENATED MODULE: external "@toruslabs/metadata-helpers"
const metadata_helpers_namespaceObject = require("@toruslabs/metadata-helpers");
;// CONCATENATED MODULE: ./src/mimcsponge.ts
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable camelcase */



const F = new ffjavascript_namespaceObject.ZqField(ffjavascript_namespaceObject.Scalar.fromString("21888242871839275222246405745257275088548364400416034343698204186575808495617"));
const SEED = "mimcsponge";
const NROUNDS = 220;
function keccak256Padded(str) {
  let finalInput = Buffer.from(str, "utf8");
  if (typeof str === "string" && str.slice(0, 2) === "0x" && str.length === 66) {
    finalInput = Buffer.from(str.slice(2), "hex");
  }
  return `0x${(0,metadata_helpers_namespaceObject.keccak256)(finalInput).toString("hex").padStart(64, "0")}`;
}
function mimgGetIV(seed) {
  let _seed = seed;
  if (typeof _seed === "undefined") _seed = SEED;
  const c = keccak256Padded(`${_seed}_iv`);
  const cn = ffjavascript_namespaceObject.Scalar.fromString(new (external_bn_js_default())(c, 16).toString());
  const iv = cn.mod(F.p);
  return iv;
}
function mimcGetConstants(seed, nRounds) {
  let _seed = seed;
  let _nRounds = nRounds;
  if (typeof _seed === "undefined") _seed = SEED;
  if (typeof nRounds === "undefined") _nRounds = NROUNDS;
  const cts = new Array(_nRounds);
  let c = keccak256Padded(SEED);
  for (let i = 1; i < _nRounds; i += 1) {
    c = keccak256Padded(c);
    const n1 = new (external_bn_js_default())(c.slice(2), 16).mod(new (external_bn_js_default())(F.p.toString()));
    const c2 = n1.toString(16, 64);
    cts[i] = F.e(new (external_bn_js_default())(c2, 16).toString());
  }
  cts[0] = F.e(0);
  cts[cts.length - 1] = F.e(0);
  return cts;
}
const cts = mimcGetConstants(SEED, NROUNDS);
function mimcHash(_xL_in, _xR_in, _k) {
  let xL = F.e(_xL_in);
  let xR = F.e(_xR_in);
  const k = F.e(_k);
  for (let i = 0; i < NROUNDS; i += 1) {
    const c = cts[i];
    const t = i === 0 ? F.add(xL, k) : F.add(F.add(xL, k), c);
    const xR_tmp = F.e(xR);
    if (i < NROUNDS - 1) {
      xR = xL;
      xL = F.add(xR_tmp, F.pow(t, 5));
    } else {
      xR = F.add(xR_tmp, F.pow(t, 5));
    }
  }
  return {
    xL: F.normalize(xL),
    xR: F.normalize(xR)
  };
}
function mimcMultiHash(arr, key, numOutputs) {
  let _key = key;
  let _numOutputs = numOutputs;
  if (typeof _numOutputs === "undefined") {
    _numOutputs = 1;
  }
  if (typeof _key === "undefined") {
    _key = F.zero;
  }
  let R = F.zero;
  let C = F.zero;
  for (let i = 0; i < arr.length; i += 1) {
    R = F.add(R, F.e(arr[i]));
    const S = mimcHash(R, C, _key);
    R = S.xL;
    C = S.xR;
  }
  const outputs = [R];
  for (let i = 1; i < _numOutputs; i += 1) {
    const S = mimcHash(R, C, _key);
    R = S.xL;
    C = S.xR;
    outputs.push(R);
  }
  if (_numOutputs === 1) {
    return F.normalize(outputs[0]);
  }
  return outputs.map(x => F.normalize(x));
}
;// CONCATENATED MODULE: ./src/keyDerivation.ts


const SECP256K1_CURVE_N = "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141";

// creates sub-keys via MiMC hash, output keys are not padded
function subkey(keyHex, input) {
  const privKeyBuf = new (external_bn_js_default())(keyHex, "hex").toString(10);
  // TODO: check against existing usage of mimc
  // TODO: check that MPC is possible with mimc, with tests
  const inputPath = new (external_bn_js_default())(input).umod(new (external_bn_js_default())(SECP256K1_CURVE_N, "hex")).toString(10);
  const output = mimcHash(1, privKeyBuf, inputPath);
  return output.xL.toString(16);
}
;// CONCATENATED MODULE: ./src/index.ts


module.exports = __webpack_exports__;
/******/ })()
;
//# sourceMappingURL=openloginSubkey.cjs.js.map