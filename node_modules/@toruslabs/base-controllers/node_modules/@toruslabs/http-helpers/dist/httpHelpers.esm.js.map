{"version":3,"file":"httpHelpers.esm.js","sources":["../src/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-throw-literal */\nimport type { SpanContext, TransactionContext } from \"@sentry/types\";\nimport merge from \"lodash.merge\";\nimport logLevel, { levels, LogLevelDesc } from \"loglevel\";\n\nconst log = logLevel.getLogger(\"http-helpers\");\nlog.setLevel(levels.INFO);\n\nexport interface CustomOptions {\n  [key: string]: unknown;\n  useAPIKey?: boolean;\n  isUrlEncodedData?: boolean;\n  timeout?: number;\n  logTracingHeader?: boolean;\n}\n\nexport interface Data {}\n\nlet apiKey = \"torus-default\";\nlet embedHost = \"\";\n\n// #region API Keys\nexport const gatewayAuthHeader = \"x-api-key\";\nexport const gatewayEmbedHostHeader = \"x-embed-host\";\n\ninterface Sentry {\n  startTransaction(_: TransactionContext): {\n    startChild(a: SpanContext): {\n      finish(): void;\n    };\n    finish(): void;\n  };\n}\n\nlet sentry: Sentry | null = null;\nconst tracingOrigins: string[] = [];\nconst tracingPaths: string[] = [];\n\nexport function enableSentryTracing(_sentry: Sentry, _tracingOrigins: string[], _tracingPaths: string[]) {\n  sentry = _sentry;\n  tracingOrigins.push(..._tracingOrigins);\n  tracingPaths.push(..._tracingPaths);\n}\n\nexport function setEmbedHost(embedHost_: string): void {\n  embedHost = embedHost_;\n}\n\nexport function clearEmbedHost(): void {\n  embedHost = \"\";\n}\n\nexport function getEmbedHost(): string {\n  return embedHost;\n}\n\nexport function setAPIKey(apiKey_: string): void {\n  apiKey = apiKey_;\n}\n\nexport function clearAPIKey(): void {\n  apiKey = \"torus-default\";\n}\n\nexport function getAPIKey(): string {\n  return apiKey;\n}\n\n// #endregion\n\nexport function setLogLevel(level: LogLevelDesc) {\n  log.setLevel(level);\n}\n\nasync function fetchAndTrace(url: string, init: RequestInit): Promise<Response> {\n  let _url: URL | null = null;\n  try {\n    _url = new URL(url);\n  } catch (error) {}\n  if (sentry && _url && (tracingOrigins.includes(_url.origin) || tracingPaths.includes(_url.pathname))) {\n    const transaction = sentry.startTransaction({\n      name: url,\n    });\n    const span = transaction.startChild({\n      op: \"http\",\n    }); // This function returns a Span\n\n    const response = await fetch(url, init);\n    span.finish(); // Remember that only finished spans will be sent with the transaction\n\n    transaction.finish(); // Finishing the transaction will send it to Sentry\n\n    return response;\n  }\n\n  return fetch(url, init);\n}\nfunction getApiKeyHeaders(): Record<string, string> {\n  const headers: Record<string, string> = {};\n  if (apiKey) headers[gatewayAuthHeader] = apiKey;\n  if (embedHost) headers[gatewayEmbedHostHeader] = embedHost;\n  return headers;\n}\n\nfunction debugLogResponse(response: Response) {\n  log.info(`Response: ${response.status} ${response.statusText}`);\n  log.info(`Url: ${response.url}`);\n}\n\nfunction logTracingHeader(response: Response) {\n  log.info(`Request tracing with traceID=${response.headers.get(\"x-web3-correlation-id\")}`);\n}\n\nexport const promiseTimeout = async <T>(ms: number, promise: Promise<T>): Promise<T> => {\n  let timeoutFunc: ReturnType<typeof setTimeout> | null = null;\n  try {\n    const timeout = new Promise<T>((_resolve, reject) => {\n      timeoutFunc = setTimeout(() => {\n        reject(new Error(`Timed out in ${ms}ms`));\n      }, ms);\n    });\n\n    const result = await Promise.race<T>([promise, timeout]);\n    // promise.race will return the first resolved promise\n    // then we clear the timeout\n    if (timeoutFunc != null) {\n      clearTimeout(timeoutFunc);\n    }\n    return result;\n  } catch (err) {\n    // clear the timeout\n    if (timeoutFunc != null) {\n      clearTimeout(timeoutFunc);\n    }\n    // rethrow the original error\n    throw err;\n  }\n};\n\nexport const get = async <T>(url: string, options_: RequestInit = {}, customOptions: CustomOptions = {}) => {\n  const defaultOptions = {\n    mode: \"cors\" as RequestMode,\n    headers: {},\n  };\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = { ...defaultOptions.headers, ...getApiKeyHeaders() };\n  }\n  const options = merge(defaultOptions, options_, { method: \"GET\" });\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    const responseContentType = response.headers.get(\"content-type\");\n    if (responseContentType?.includes(\"application/json\")) {\n      return response.json() as Promise<T>;\n    }\n    return response.text() as Promise<T>;\n  }\n  debugLogResponse(response);\n  throw response;\n};\n\nexport const post = <T>(url: string, data: Data = {}, options_: RequestInit = {}, customOptions: CustomOptions = {}) => {\n  const defaultOptions = {\n    mode: \"cors\" as RequestMode,\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\",\n    },\n  };\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = { ...defaultOptions.headers, ...getApiKeyHeaders() };\n  }\n  const options = merge(defaultOptions, options_, { method: \"POST\" });\n\n  // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data as string;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n\n  return promiseTimeout<T>(\n    (customOptions.timeout as number) || 60000,\n    fetchAndTrace(url, options).then((response) => {\n      if (customOptions.logTracingHeader) {\n        logTracingHeader(response);\n      }\n      if (response.ok) {\n        const responseContentType = response.headers.get(\"content-type\");\n        if (responseContentType?.includes(\"application/json\")) {\n          return response.json() as Promise<T>;\n        }\n        return response.text() as Promise<T>;\n      }\n      debugLogResponse(response);\n      throw response;\n    })\n  );\n};\n\nexport const patch = async <T>(url: string, data: Data = {}, options_: RequestInit = {}, customOptions: CustomOptions = {}) => {\n  const defaultOptions = {\n    mode: \"cors\" as RequestMode,\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\",\n    },\n  };\n  // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = { ...defaultOptions.headers, ...getApiKeyHeaders() };\n  }\n  const options = merge(defaultOptions, options_, { method: \"PATCH\" });\n  // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data as string;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    const responseContentType = response.headers.get(\"content-type\");\n    if (responseContentType?.includes(\"application/json\")) {\n      return response.json() as Promise<T>;\n    }\n    return response.text() as Promise<T>;\n  }\n  debugLogResponse(response);\n  throw response;\n};\n\nexport const put = async <T>(url: string, data: Data = {}, options_: RequestInit = {}, customOptions: CustomOptions = {}) => {\n  const defaultOptions = {\n    mode: \"cors\" as RequestMode,\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\",\n    },\n  };\n  // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = { ...defaultOptions.headers, ...getApiKeyHeaders() };\n  }\n  const options = merge(defaultOptions, options_, { method: \"PUT\" });\n  // deep merge changes the structure of form data and url encoded data ,\n  // so we should not deepmerge body data\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data as string;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    const responseContentType = response.headers.get(\"content-type\");\n    if (responseContentType?.includes(\"application/json\")) {\n      return response.json() as Promise<T>;\n    }\n    return response.text() as Promise<T>;\n  }\n  debugLogResponse(response);\n  throw response;\n};\n\nexport const remove = async <T>(url: string, data: Data = {}, options_: RequestInit = {}, customOptions: CustomOptions = {}) => {\n  const defaultOptions = {\n    mode: \"cors\" as RequestMode,\n    headers: {\n      \"Content-Type\": \"application/json; charset=utf-8\",\n    },\n  };\n  // for multipart request browser/client will add multipart content type\n  // along with multipart boundary , so for multipart request send\n  // content-type: undefined or send with multipart boundary if already known\n  if (customOptions.useAPIKey) {\n    defaultOptions.headers = { ...defaultOptions.headers, ...getApiKeyHeaders() };\n  }\n  const options = merge(defaultOptions, options_, { method: \"DELETE\" });\n  if (customOptions.isUrlEncodedData) {\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    options.body = data as string;\n    // If url encoded data, this must not be the content type\n    if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n  } else {\n    options.body = JSON.stringify(data);\n  }\n  const response = await fetchAndTrace(url, options);\n  if (response.ok) {\n    const responseContentType = response.headers.get(\"content-type\");\n    if (responseContentType?.includes(\"application/json\")) {\n      return response.json() as Promise<T>;\n    }\n    return response.text() as Promise<T>;\n  }\n  debugLogResponse(response);\n  throw response;\n};\n\nexport const generateJsonRPCObject = (method: string, parameters: unknown) => ({\n  jsonrpc: \"2.0\",\n  method,\n  id: 10,\n  params: parameters,\n});\n\nexport const promiseRace = <T>(url: string, options: RequestInit, timeout = 60000) =>\n  Promise.race([\n    get<T>(url, options),\n    new Promise<T>((_resolve, reject) => {\n      setTimeout(() => {\n        reject(new Error(\"timed out\"));\n      }, timeout);\n    }),\n  ]);\n"],"names":["log","logLevel","getLogger","setLevel","levels","INFO","apiKey","embedHost","gatewayAuthHeader","gatewayEmbedHostHeader","sentry","tracingOrigins","tracingPaths","enableSentryTracing","_sentry","_tracingOrigins","_tracingPaths","push","setEmbedHost","embedHost_","clearEmbedHost","getEmbedHost","setAPIKey","apiKey_","clearAPIKey","getAPIKey","setLogLevel","level","fetchAndTrace","url","init","_url","URL","error","includes","origin","pathname","transaction","startTransaction","name","span","startChild","op","response","fetch","finish","getApiKeyHeaders","headers","debugLogResponse","info","status","statusText","logTracingHeader","get","promiseTimeout","ms","promise","timeoutFunc","timeout","Promise","_resolve","reject","setTimeout","Error","result","race","clearTimeout","err","options_","arguments","length","undefined","customOptions","defaultOptions","mode","useAPIKey","_objectSpread","options","merge","method","ok","responseContentType","json","text","post","data","isUrlEncodedData","body","JSON","stringify","then","patch","put","remove","generateJsonRPCObject","parameters","jsonrpc","id","params","promiseRace"],"mappings":"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"}