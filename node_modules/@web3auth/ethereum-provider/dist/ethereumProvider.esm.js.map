{"version":3,"file":"ethereumProvider.esm.js","sources":["../src/rpc/walletMidddleware.ts","../src/rpc/ethRpcMiddlewares.ts","../src/rpc/jrpcClient.ts","../src/providers/injectedProviders/walletConnectV2Utils.ts","../src/providers/injectedProviders/WalletConnectV2Provider.ts","../src/providers/converter.ts","../src/providers/privateKeyProviders/TransactionFormatter/utils.ts","../src/providers/privateKeyProviders/ethPrivatekeyUtils.ts","../src/providers/utils.ts","../src/providers/privateKeyProviders/TransactionFormatter/constants.ts","../src/providers/privateKeyProviders/TransactionFormatter/index.ts","../src/providers/privateKeyProviders/EthereumPrivateKeyProvider.ts"],"sourcesContent":["import type { MessageTypes, TypedDataV1, TypedMessage } from \"@metamask/eth-sig-util\";\nimport { rpcErrors } from \"@metamask/rpc-errors\";\nimport { createAsyncMiddleware, createScaffoldMiddleware, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"@toruslabs/openlogin-jrpc\";\n\nimport type { MessageParams, TransactionParams, TypedMessageParams, WalletMiddlewareOptions } from \"./interfaces\";\n\nfunction resemblesAddress(str: string): boolean {\n  // hex prefix 2 + 20 bytes\n  return str.length === 2 + 20 * 2;\n}\n\nexport function createWalletMiddleware({\n  getAccounts,\n  getPrivateKey,\n  processDecryptMessage,\n  processEncryptionPublicKey,\n  processEthSignMessage,\n  processPersonalMessage,\n  processTransaction,\n  processSignTransaction,\n  processTypedMessage,\n  processTypedMessageV3,\n  processTypedMessageV4,\n}: WalletMiddlewareOptions): JRPCMiddleware<string, unknown> {\n  if (!getAccounts) {\n    throw new Error(\"opts.getAccounts is required\");\n  }\n\n  //\n  // utility\n  //\n\n  /**\n   * Validates the keyholder address, and returns a normalized (i.e. lowercase)\n   * copy of it.\n   *\n   * an error\n   */\n  async function validateAndNormalizeKeyholder(address: string, req: JRPCRequest<unknown>): Promise<string> {\n    if (typeof address === \"string\" && address.length > 0) {\n      // ensure address is included in provided accounts\n      const accounts: string[] = await getAccounts(req);\n      const normalizedAccounts: string[] = accounts.map((_address) => _address.toLowerCase());\n      const normalizedAddress: string = address.toLowerCase();\n\n      if (normalizedAccounts.includes(normalizedAddress)) {\n        return normalizedAddress;\n      }\n    }\n    throw rpcErrors.invalidParams({\n      message: `Invalid parameters: must provide an Ethereum address.`,\n    });\n  }\n\n  //\n  // account lookups\n  //\n\n  async function lookupAccounts(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    res.result = await getAccounts(req);\n  }\n\n  async function lookupDefaultAccount(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    const accounts = await getAccounts(req);\n    res.result = accounts[0] || null;\n  }\n\n  //\n  // transaction signatures\n  //\n\n  async function sendTransaction(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTransaction) {\n      throw rpcErrors.methodNotSupported();\n    }\n\n    const txParams: TransactionParams =\n      (req.params as TransactionParams[])[0] ||\n      ({\n        from: \"\",\n      } as TransactionParams);\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from as string, req);\n    res.result = await processTransaction(txParams, req);\n  }\n\n  async function signTransaction(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processSignTransaction) {\n      throw rpcErrors.methodNotSupported();\n    }\n\n    const txParams: TransactionParams =\n      (req.params as TransactionParams[])[0] ||\n      ({\n        from: \"\",\n      } as TransactionParams);\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from as string, req);\n    res.result = await processSignTransaction(txParams, req);\n  }\n\n  //\n  // message signatures\n  //\n\n  async function ethSign(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processEthSignMessage) {\n      throw rpcErrors.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[0], req);\n    const message: string = (req.params as string[])[1];\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n    const msgParams: MessageParams<string> = {\n      ...extraParams,\n      from: address,\n      data: message,\n    };\n\n    res.result = await processEthSignMessage(msgParams, req);\n  }\n\n  async function signTypedData(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTypedMessage) {\n      throw rpcErrors.methodNotSupported();\n    }\n\n    const message: TypedDataV1 = (req.params as TypedDataV1[])[0];\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[1], req);\n    const version = \"V1\";\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n    const msgParams: MessageParams<TypedDataV1> = {\n      ...extraParams,\n      from: address,\n      data: message,\n    };\n\n    res.result = await processTypedMessage(msgParams, req, version);\n  }\n\n  async function signTypedDataV3(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTypedMessageV3) {\n      throw rpcErrors.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[0], req);\n    const message: TypedMessage<MessageTypes> = (req.params as TypedMessage<MessageTypes>[])[1];\n    const version = \"V3\";\n    const msgParams: TypedMessageParams<TypedMessage<MessageTypes>> = {\n      data: message,\n      from: address,\n      version,\n    };\n\n    res.result = await processTypedMessageV3(msgParams, req, version);\n  }\n\n  async function signTypedDataV4(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTypedMessageV4) {\n      throw rpcErrors.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[0], req);\n    const message: TypedMessage<MessageTypes> = (req.params as TypedMessage<MessageTypes>[])[1];\n    const version = \"V4\";\n    const msgParams: TypedMessageParams<TypedMessage<MessageTypes>> = {\n      data: message,\n      from: address,\n      version,\n    };\n\n    res.result = await processTypedMessageV4(msgParams, req, version);\n  }\n\n  async function personalSign(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processPersonalMessage) {\n      throw rpcErrors.methodNotSupported();\n    }\n\n    // process normally\n    const firstParam: string = (req.params as string[])[0];\n    const secondParam: string = (req.params as string[])[1];\n    // non-standard \"extraParams\" to be appended to our \"msgParams\" obj\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n\n    // We initially incorrectly ordered these parameters.\n    // To gracefully respect users who adopted this API early,\n    // we are currently gracefully recovering from the wrong param order\n    // when it is clearly identifiable.\n    //\n    // That means when the first param is definitely an address,\n    // and the second param is definitely not, but is hex.\n    let address: string, message: string;\n    if (resemblesAddress(firstParam) && !resemblesAddress(secondParam)) {\n      let warning = `The eth_personalSign method requires params ordered `;\n      warning += `[message, address]. This was previously handled incorrectly, `;\n      warning += `and has been corrected automatically. `;\n      warning += `Please switch this param order for smooth behavior in the future.`;\n      (res as { warning: string }).warning = warning;\n\n      address = firstParam;\n      message = secondParam;\n    } else {\n      message = firstParam;\n      address = secondParam;\n    }\n    address = await validateAndNormalizeKeyholder(address, req);\n\n    const msgParams: MessageParams<string> = {\n      ...extraParams,\n      from: address,\n      data: message,\n    };\n\n    // eslint-disable-next-line require-atomic-updates\n    res.result = await processPersonalMessage(msgParams, req);\n  }\n\n  async function encryptionPublicKey(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processEncryptionPublicKey) {\n      throw rpcErrors.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string)[0], req);\n\n    res.result = await processEncryptionPublicKey(address, req);\n  }\n\n  async function decryptMessage(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processDecryptMessage) {\n      throw rpcErrors.methodNotSupported();\n    }\n\n    const ciphertext: string = (req.params as string)[0];\n    const address: string = await validateAndNormalizeKeyholder((req.params as string)[1], req);\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n    const msgParams: MessageParams<string> = {\n      ...extraParams,\n      from: address,\n      data: ciphertext,\n    };\n\n    res.result = processDecryptMessage(msgParams, req);\n  }\n\n  async function fetchPrivateKey(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!getPrivateKey) {\n      throw rpcErrors.methodNotSupported();\n    }\n    res.result = getPrivateKey(req);\n  }\n\n  return createScaffoldMiddleware({\n    // account lookups\n    eth_accounts: createAsyncMiddleware(lookupAccounts),\n    eth_private_key: createAsyncMiddleware(fetchPrivateKey),\n    private_key: createAsyncMiddleware(fetchPrivateKey),\n    eth_coinbase: createAsyncMiddleware(lookupDefaultAccount),\n    // tx signatures\n    eth_sendTransaction: createAsyncMiddleware(sendTransaction),\n    eth_signTransaction: createAsyncMiddleware(signTransaction),\n    // message signatures\n    eth_sign: createAsyncMiddleware(ethSign),\n    eth_signTypedData: createAsyncMiddleware(signTypedData),\n    eth_signTypedData_v3: createAsyncMiddleware(signTypedDataV3),\n    eth_signTypedData_v4: createAsyncMiddleware(signTypedDataV4),\n    personal_sign: createAsyncMiddleware(personalSign),\n    eth_getEncryptionPublicKey: createAsyncMiddleware(encryptionPublicKey),\n    eth_decrypt: createAsyncMiddleware(decryptMessage),\n  });\n}\n","import { rpcErrors } from \"@metamask/rpc-errors\";\nimport {\n  createAsyncMiddleware,\n  createScaffoldMiddleware,\n  JRPCMiddleware,\n  JRPCRequest,\n  JRPCResponse,\n  mergeMiddleware,\n} from \"@toruslabs/openlogin-jrpc\";\n\nimport { AddEthereumChainParameter, IAccountHandlers, IChainSwitchHandlers, IProviderHandlers } from \"./interfaces\";\nimport { createWalletMiddleware } from \"./walletMidddleware\";\n\nexport function createEthMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown> {\n  const {\n    getAccounts,\n    getPrivateKey,\n    processTransaction,\n    processSignTransaction,\n    processEthSignMessage,\n    processTypedMessage,\n    processTypedMessageV3,\n    processTypedMessageV4,\n    processPersonalMessage,\n    processEncryptionPublicKey,\n    processDecryptMessage,\n  } = providerHandlers;\n  const ethMiddleware = mergeMiddleware([\n    createScaffoldMiddleware({\n      eth_syncing: false,\n    }),\n    createWalletMiddleware({\n      getAccounts,\n      getPrivateKey,\n      processTransaction,\n      processEthSignMessage,\n      processSignTransaction,\n      processTypedMessage,\n      processTypedMessageV3,\n      processTypedMessageV4,\n      processPersonalMessage,\n      processEncryptionPublicKey,\n      processDecryptMessage,\n    }) as JRPCMiddleware<unknown, unknown>,\n  ]);\n  return ethMiddleware;\n}\n\nexport function createChainSwitchMiddleware({ addChain, switchChain }: IChainSwitchHandlers): JRPCMiddleware<unknown, unknown> {\n  async function addNewChain(req: JRPCRequest<AddEthereumChainParameter[]>, res: JRPCResponse<unknown>): Promise<void> {\n    const chainParams = req.params?.length ? req.params[0] : undefined;\n    if (!chainParams) throw rpcErrors.invalidParams(\"Missing chain params\");\n    if (!chainParams.chainId) throw rpcErrors.invalidParams(\"Missing chainId in chainParams\");\n    if (!chainParams.rpcUrls || chainParams.rpcUrls.length === 0) throw rpcErrors.invalidParams(\"Missing rpcUrls in chainParams\");\n    if (!chainParams.nativeCurrency) throw rpcErrors.invalidParams(\"Missing nativeCurrency in chainParams\");\n\n    res.result = await addChain(chainParams);\n  }\n  async function updateChain(req: JRPCRequest<{ chainId: string }[]>, res: JRPCResponse<unknown>): Promise<void> {\n    const chainParams = req.params?.length ? req.params[0] : undefined;\n    if (!chainParams) throw rpcErrors.invalidParams(\"Missing chainId\");\n    res.result = await switchChain(chainParams);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_addEthereumChain: createAsyncMiddleware(addNewChain) as JRPCMiddleware<unknown, unknown>,\n    wallet_switchEthereumChain: createAsyncMiddleware(updateChain) as JRPCMiddleware<unknown, unknown>,\n  });\n}\n\n// #region account middlewares\nexport function createAccountMiddleware({ updatePrivatekey }: IAccountHandlers): JRPCMiddleware<unknown, unknown> {\n  async function updateAccount(req: JRPCRequest<{ privateKey: string }[]>, res: JRPCResponse<unknown>): Promise<void> {\n    const accountParams = req.params?.length ? req.params[0] : undefined;\n    if (!accountParams?.privateKey) throw rpcErrors.invalidParams(\"Missing privateKey\");\n    res.result = await updatePrivatekey(accountParams);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_updateAccount: createAsyncMiddleware(updateAccount) as JRPCMiddleware<unknown, unknown>,\n  });\n}\n\n// #endregion account middlewares\n","import { createFetchMiddleware } from \"@toruslabs/base-controllers\";\nimport {\n  Block,\n  JRPCEngineEndCallback,\n  JRPCEngineNextCallback,\n  JRPCMiddleware,\n  JRPCRequest,\n  JRPCResponse,\n  mergeMiddleware,\n} from \"@toruslabs/openlogin-jrpc\";\nimport type { CustomChainConfig } from \"@web3auth/base\";\n\nexport function createChainIdMiddleware(chainId: string): JRPCMiddleware<unknown, string> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<string>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"eth_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createProviderConfigMiddleware(providerConfig: CustomChainConfig): JRPCMiddleware<unknown, CustomChainConfig> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<CustomChainConfig>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"eth_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createJsonRpcClient(providerConfig: CustomChainConfig): {\n  networkMiddleware: JRPCMiddleware<unknown, unknown>;\n  fetchMiddleware: JRPCMiddleware<string[], Block>;\n} {\n  const { chainId, rpcTarget } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({ rpcTarget });\n  const networkMiddleware = mergeMiddleware([\n    createChainIdMiddleware(chainId) as JRPCMiddleware<unknown, unknown>,\n    createProviderConfigMiddleware(providerConfig) as JRPCMiddleware<unknown, unknown>,\n    fetchMiddleware as JRPCMiddleware<unknown, unknown>,\n  ]);\n  return { networkMiddleware, fetchMiddleware };\n}\n","import { MessageTypes, TypedDataV1, TypedMessage } from \"@metamask/eth-sig-util\";\nimport { providerErrors, rpcErrors } from \"@metamask/rpc-errors\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport type { ISignClient, SessionTypes } from \"@walletconnect/types\";\nimport { getAccountsFromNamespaces, parseAccountId } from \"@walletconnect/utils\";\n\nimport { IProviderHandlers, MessageParams, TransactionParams, TypedMessageParams } from \"../../rpc/interfaces\";\n\nasync function getLastActiveSession(signClient: ISignClient): Promise<SessionTypes.Struct | null> {\n  if (signClient.session.length) {\n    const lastKeyIndex = signClient.session.keys.length - 1;\n    return signClient.session.get(signClient.session.keys[lastKeyIndex]);\n  }\n  return null;\n}\n\nexport async function sendJrpcRequest<T, U>(signClient: ISignClient, chainId: number, method: string, params: U): Promise<T> {\n  const session = await getLastActiveSession(signClient);\n  if (!session) {\n    throw providerErrors.disconnected();\n  }\n  return signClient.request<T>({\n    topic: session.topic,\n    chainId: `eip155:${chainId}`,\n    request: {\n      method,\n      params,\n    },\n  });\n}\n\nexport async function getAccounts(signClient: ISignClient): Promise<string[]> {\n  const session = await getLastActiveSession(signClient);\n  if (!session) {\n    throw providerErrors.disconnected();\n  }\n  const accounts = getAccountsFromNamespaces(session.namespaces);\n  if (accounts && accounts.length) {\n    return [\n      ...new Set(\n        accounts.map((add) => {\n          return parseAccountId(add).address;\n        })\n      ),\n    ];\n  }\n  throw new Error(\"Failed to get accounts\");\n}\n\nexport function getProviderHandlers({ connector, chainId }: { connector: ISignClient; chainId: number }): IProviderHandlers {\n  return {\n    getPrivateKey: async () => {\n      throw rpcErrors.methodNotSupported();\n    },\n    getAccounts: async (_: JRPCRequest<unknown>) => {\n      return getAccounts(connector);\n    },\n    processTransaction: async (txParams: TransactionParams, _: JRPCRequest<unknown>): Promise<string> => {\n      const methodRes = await sendJrpcRequest<string, TransactionParams[]>(connector, chainId, \"eth_sendTransaction\", [txParams]);\n      return methodRes;\n    },\n    processSignTransaction: async (txParams: TransactionParams, _: JRPCRequest<unknown>): Promise<string> => {\n      const methodRes = await sendJrpcRequest<string, TransactionParams[]>(connector, chainId, \"eth_signTransaction\", [txParams]);\n      return methodRes;\n    },\n    processEthSignMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const methodRes = await sendJrpcRequest<string, string[]>(connector, chainId, \"eth_sign\", [msgParams.from, msgParams.data]);\n      return methodRes;\n    },\n    processPersonalMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const methodRes = await sendJrpcRequest<string, string[]>(connector, chainId, \"personal_sign\", [msgParams.from, msgParams.data]);\n      return methodRes;\n    },\n    processTypedMessage: async (msgParams: MessageParams<TypedDataV1>, _: JRPCRequest<unknown>): Promise<string> => {\n      const methodRes = await sendJrpcRequest<string, unknown[]>(connector, chainId, \"eth_signTypedData\", [msgParams.data, msgParams.from]);\n      return methodRes;\n    },\n    processTypedMessageV3: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>): Promise<string> => {\n      const methodRes = await sendJrpcRequest<string, unknown[]>(connector, chainId, \"eth_signTypedData_v3\", [msgParams.from, msgParams.data]);\n      return methodRes;\n    },\n    processTypedMessageV4: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>): Promise<string> => {\n      const methodRes = await sendJrpcRequest<string, unknown[]>(connector, chainId, \"eth_signTypedData_v4\", [msgParams.from, msgParams.data]);\n      return methodRes;\n    },\n    processEncryptionPublicKey: async (_: string): Promise<string> => {\n      throw rpcErrors.methodNotSupported();\n    },\n    processDecryptMessage: (_: MessageParams<string>): string => {\n      throw rpcErrors.methodNotSupported();\n    },\n  };\n}\n","import { providerErrors } from \"@metamask/rpc-errors\";\nimport { JRPCEngine, JRPCMiddleware, providerFromEngine } from \"@toruslabs/openlogin-jrpc\";\nimport type { ISignClient, SignClientTypes } from \"@walletconnect/types\";\nimport { getAccountsFromNamespaces, getChainsFromNamespaces, parseAccountId, parseChainId } from \"@walletconnect/utils\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, getChainConfig, log, WalletLoginError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\n\nimport { createChainSwitchMiddleware, createEthMiddleware } from \"../../rpc/ethRpcMiddlewares\";\nimport { AddEthereumChainParameter, IChainSwitchHandlers } from \"../../rpc/interfaces\";\nimport { createJsonRpcClient } from \"../../rpc/jrpcClient\";\nimport { getAccounts, getProviderHandlers } from \"./walletConnectV2Utils\";\n\nexport interface WalletConnectV2ProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\n\nexport interface WalletConnectV2ProviderState extends BaseProviderState {\n  accounts: string[];\n}\n\nexport class WalletConnectV2Provider extends BaseProvider<BaseProviderConfig, WalletConnectV2ProviderState, ISignClient> {\n  private connector: ISignClient | null = null;\n\n  constructor({ config, state, connector }: { config: WalletConnectV2ProviderConfig; state?: BaseProviderState; connector?: ISignClient }) {\n    super({\n      config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.EIP155 }, skipLookupNetwork: !!config.skipLookupNetwork },\n      state: { ...(state || {}), chainId: \"loading\", accounts: [] },\n    });\n    this.connector = connector || null;\n  }\n\n  public static getProviderInstance = async (params: {\n    connector: ISignClient;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n    skipLookupNetwork: boolean;\n  }): Promise<WalletConnectV2Provider> => {\n    const providerFactory = new WalletConnectV2Provider({ config: { chainConfig: params.chainConfig, skipLookupNetwork: params.skipLookupNetwork } });\n    await providerFactory.setupProvider(params.connector);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.connector)\n      throw providerErrors.custom({ message: \"Connector is not initialized, pass wallet connect connector in constructor\", code: 4902 });\n    await this.setupProvider(this.connector);\n    return this._providerEngineProxy.request({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(connector: ISignClient): Promise<void> {\n    this.onConnectorStateUpdate(connector);\n    await this.setupEngine(connector);\n  }\n\n  public async switchChain({ chainId }: { chainId: string }): Promise<void> {\n    if (!this.connector)\n      throw providerErrors.custom({ message: \"Connector is not initialized, pass wallet connect connector in constructor\", code: 4902 });\n    const currentChainConfig = this.getChainConfig(chainId);\n    this.configure({ chainConfig: currentChainConfig });\n    await this.setupEngine(this.connector);\n    this.lookupNetwork(this.connector);\n  }\n\n  async addChain(chainConfig: CustomChainConfig): Promise<void> {\n    super.addChain(chainConfig);\n  }\n\n  // no need to implement this method in wallet connect v2.\n  protected async lookupNetwork(_: ISignClient): Promise<string> {\n    const newChainId = this.config.chainConfig.chainId;\n    this.update({ chainId: newChainId });\n    this.emit(\"chainChanged\", newChainId);\n    this.emit(\"connect\", { chainId: newChainId });\n    return this.config.chainConfig.chainId;\n  }\n\n  private async setupEngine(connector: ISignClient): Promise<void> {\n    const { chainId } = this.config.chainConfig;\n    const numChainId = parseInt(chainId, 16);\n    const providerHandlers = getProviderHandlers({ connector, chainId: numChainId });\n    const jrpcRes = await getAccounts(connector);\n\n    this.update({\n      accounts: jrpcRes || [],\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const chainSwitchMiddleware = this.getChainSwitchMiddleware();\n    const engine = new JRPCEngine();\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(ethMiddleware);\n    engine.push(chainSwitchMiddleware);\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n  }\n\n  private getChainSwitchMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const chainSwitchHandlers: IChainSwitchHandlers = {\n      addChain: async (params: AddEthereumChainParameter): Promise<void> => {\n        const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = params;\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.EIP155,\n          chainId,\n          ticker: nativeCurrency?.symbol || \"ETH\",\n          tickerName: nativeCurrency?.name || \"Ether\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: blockExplorerUrls?.[0] || \"\",\n          decimals: nativeCurrency?.decimals || 18,\n        });\n      },\n      switchChain: async (params: { chainId: string }): Promise<void> => {\n        const { chainId } = params;\n        await this.switchChain({ chainId });\n      },\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  private connectedTopic() {\n    if (!this.connector) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n    if (this.connector?.session?.length) {\n      // currently we are supporting only 1 active session\n      const lastKeyIndex = this.connector.session.keys.length - 1;\n      return this.connector.session.get(this.connector.session.keys[lastKeyIndex])?.topic;\n    }\n    return undefined;\n  }\n\n  private checkIfChainIdAllowed(chainId: string) {\n    if (!this.connector || !this.connectedTopic()) return false;\n    const sessionData = this.connector.session.get(this.connectedTopic());\n    const allChains = getChainsFromNamespaces(sessionData.namespaces);\n\n    let chainAllowed = false;\n    for (const chain of allChains) {\n      const parsedId = parseChainId(chain);\n      if (Number.parseInt(parsedId.reference, 10) === Number.parseInt(chainId, 10)) {\n        chainAllowed = true;\n        break;\n      }\n    }\n    return chainAllowed;\n  }\n\n  private checkIfAccountAllowed(address: string) {\n    if (!this.connector || !this.connectedTopic()) return false;\n    const sessionData = this.connector.session.get(this.connectedTopic());\n    const allAccounts = getAccountsFromNamespaces(sessionData.namespaces);\n    let accountAllowed = false;\n    for (const account of allAccounts) {\n      const parsedAccount = parseAccountId(account);\n      if (parsedAccount.address?.toLowerCase() === address?.toLowerCase()) {\n        accountAllowed = true;\n        break;\n      }\n    }\n    return accountAllowed;\n  }\n\n  private async onConnectorStateUpdate(connector: ISignClient) {\n    connector.events.on(\"session_event\", async (payload: SignClientTypes.EventArguments[\"session_event\"]) => {\n      log.debug(\"session_event data\", payload);\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n      const { event } = payload.params;\n      const { name, data } = event || {};\n      // Check if accounts changed and trigger event\n      if (name === \"accountsChanged\" && data?.length && this.state.accounts[0] !== data[0] && this.checkIfAccountAllowed(data[0])) {\n        this.update({\n          accounts: data,\n        });\n        this.emit(\"accountsChanged\", data);\n      }\n\n      if (event.name === \"chainChanged\") {\n        const { chainId: connectedChainId, rpcUrl } = data;\n        const connectedHexChainId = `0x${connectedChainId.toString(16)}`;\n\n        if (!this.checkIfChainIdAllowed(connectedHexChainId)) return;\n        // Check if chainId changed and trigger event\n        if (connectedHexChainId && this.state.chainId !== connectedHexChainId) {\n          const maybeConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, connectedHexChainId) || {};\n          // Handle rpcUrl update\n          this.configure({\n            chainConfig: { ...maybeConfig, chainId: connectedHexChainId, rpcTarget: rpcUrl, chainNamespace: CHAIN_NAMESPACES.EIP155 },\n          });\n          await this.setupEngine(connector);\n        }\n      }\n    });\n  }\n}\n","import { stripHexPrefix } from \"@ethereumjs/util\";\nimport BigNumber from \"bignumber.js\";\n\ntype DenominationType = \"WEI\" | \"GWEI\" | \"ETH\";\ntype NumericBaseType = \"hex\" | \"dec\";\n\ntype ConverterInput = {\n  value: string | BigNumber;\n  fromNumericBase: NumericBaseType;\n  fromDenomination?: DenominationType;\n  toNumericBase?: NumericBaseType;\n  toDenomination?: DenominationType;\n  numberOfDecimals?: number;\n};\n// Big Number Constants\nconst BIG_NUMBER_WEI_MULTIPLIER = new BigNumber(\"1e18\");\nconst BIG_NUMBER_GWEI_MULTIPLIER = new BigNumber(\"1e9\");\nconst BIG_NUMBER_ETH_MULTIPLIER = new BigNumber(\"1\");\n\n// Setter Maps\nconst toBigNumber: Record<NumericBaseType, (n: string | BigNumber) => BigNumber> = {\n  hex: (n: string | BigNumber) => (typeof n === \"string\" ? new BigNumber(stripHexPrefix(n), 16) : new BigNumber(n, 16)),\n  dec: (n: string | BigNumber) => new BigNumber(n, 10),\n};\nconst toNormalizedDenomination: Record<string, (n: BigNumber) => BigNumber> = {\n  WEI: (bigNumber) => bigNumber.div(BIG_NUMBER_WEI_MULTIPLIER),\n  GWEI: (bigNumber) => bigNumber.div(BIG_NUMBER_GWEI_MULTIPLIER),\n  ETH: (bigNumber) => bigNumber.div(BIG_NUMBER_ETH_MULTIPLIER),\n};\nconst toSpecifiedDenomination: Record<string, (n: BigNumber) => BigNumber> = {\n  WEI: (bigNumber) => bigNumber.times(BIG_NUMBER_WEI_MULTIPLIER).dp(0, BigNumber.ROUND_HALF_UP),\n  GWEI: (bigNumber) => bigNumber.times(BIG_NUMBER_GWEI_MULTIPLIER).dp(9, BigNumber.ROUND_HALF_UP),\n  ETH: (bigNumber) => bigNumber.times(BIG_NUMBER_ETH_MULTIPLIER).dp(9, BigNumber.ROUND_HALF_UP),\n};\nconst baseChange: Record<string, (n: BigNumber) => string> = {\n  hex: (n) => n.toString(16),\n  dec: (n) => new BigNumber(n).toString(10),\n};\n\nconst converter = (params: ConverterInput): string | BigNumber => {\n  const { value, fromNumericBase, fromDenomination, toNumericBase, toDenomination, numberOfDecimals } = params;\n  let convertedValue: string | BigNumber = toBigNumber[fromNumericBase](value);\n\n  if (fromDenomination) {\n    convertedValue = toNormalizedDenomination[fromDenomination](convertedValue as BigNumber);\n  }\n\n  if (toDenomination) {\n    convertedValue = toSpecifiedDenomination[toDenomination](convertedValue as BigNumber);\n  }\n\n  if (numberOfDecimals) {\n    convertedValue = (convertedValue as BigNumber).dp(numberOfDecimals, BigNumber.ROUND_HALF_DOWN);\n  }\n\n  if (toNumericBase) {\n    convertedValue = baseChange[toNumericBase](convertedValue);\n  }\n  return convertedValue;\n};\n\nconst conversionUtil = (\n  value: string | BigNumber,\n  { fromNumericBase = \"hex\", toNumericBase, fromDenomination, toDenomination, numberOfDecimals }: Partial<ConverterInput>\n): BigNumber | string => {\n  return converter({\n    fromNumericBase,\n    toNumericBase,\n    fromDenomination,\n    toDenomination,\n    numberOfDecimals,\n    value: value || \"0\",\n  });\n};\n\nfunction decGWEIToHexWEI(decGWEI: string | BigNumber): string {\n  return conversionUtil(decGWEI, {\n    fromNumericBase: \"dec\",\n    toNumericBase: \"hex\",\n    fromDenomination: \"GWEI\",\n    toDenomination: \"WEI\",\n  }) as string;\n}\n\nfunction hexWEIToDecGWEI(decGWEI: string | BigNumber): string | BigNumber {\n  return conversionUtil(decGWEI, {\n    fromNumericBase: \"hex\",\n    toNumericBase: \"dec\",\n    fromDenomination: \"WEI\",\n    toDenomination: \"GWEI\",\n  }) as string;\n}\n\nexport { conversionUtil, decGWEIToHexWEI, hexWEIToDecGWEI };\n","import { isValidAddress } from \"@ethereumjs/util\";\nimport {\n  MessageTypeProperty,\n  SignTypedDataVersion,\n  TYPED_MESSAGE_SCHEMA,\n  TypedDataV1Field,\n  TypedMessage,\n  typedSignatureHash,\n} from \"@metamask/eth-sig-util\";\nimport { rpcErrors } from \"@metamask/rpc-errors\";\nimport { get } from \"@toruslabs/http-helpers\";\nimport { isHexStrict } from \"@web3auth/base\";\nimport assert from \"assert\";\nimport { BigNumber } from \"bignumber.js\";\nimport jsonschema from \"jsonschema\";\n\nimport { TypedMessageParams } from \"../../../rpc/interfaces\";\nimport { decGWEIToHexWEI, hexWEIToDecGWEI } from \"../../converter\";\nimport { EIP1159GasData, EthereumGasFeeEstimates, LegacyGasData } from \"./interfaces\";\n\nexport function normalizeGWEIDecimalNumbers(n: string | BigNumber): string {\n  const numberAsWEIHex = decGWEIToHexWEI(n);\n  const numberAsGWEI = hexWEIToDecGWEI(numberAsWEIHex).toString();\n  return numberAsGWEI;\n}\n\nexport async function fetchEip1159GasEstimates(url: string): Promise<EthereumGasFeeEstimates> {\n  const estimates = await get<EIP1159GasData>(url);\n  const normalizedEstimates: EthereumGasFeeEstimates = {\n    ...estimates,\n    estimatedBaseFee: normalizeGWEIDecimalNumbers(estimates.estimatedBaseFee),\n    low: {\n      ...estimates.low,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxFeePerGas),\n    },\n    medium: {\n      ...estimates.medium,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxFeePerGas),\n    },\n    high: {\n      ...estimates.high,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxFeePerGas),\n    },\n  };\n  return normalizedEstimates;\n}\n\n/**\n * Hit the legacy MetaSwaps gasPrices estimate api and return the low, medium\n * high values from that API.\n */\nexport async function fetchLegacyGasPriceEstimates(url: string): Promise<LegacyGasData> {\n  const result = await get<{\n    SafeGasPrice: string;\n    ProposeGasPrice: string;\n    FastGasPrice: string;\n  }>(url, {\n    referrer: url,\n    referrerPolicy: \"no-referrer-when-downgrade\",\n    method: \"GET\",\n    mode: \"cors\",\n  });\n  return {\n    low: result.SafeGasPrice,\n    medium: result.ProposeGasPrice,\n    high: result.FastGasPrice,\n  };\n}\n\nexport const validateTypedMessageParams = (parameters: TypedMessageParams<unknown>, activeChainId: number) => {\n  try {\n    assert.ok(parameters && typeof parameters === \"object\", \"Params must be an object.\");\n    assert.ok(\"data\" in parameters, 'Params must include a \"data\" field.');\n    assert.ok(\"from\" in parameters, 'Params must include a \"from\" field.');\n    assert.ok(\n      typeof parameters.from === \"string\" && isValidAddress(parameters.from),\n      '\"from\" field must be a valid, lowercase, hexadecimal Ethereum address string.'\n    );\n    let data: unknown = null;\n    let chainId = null;\n    switch ((parameters as TypedMessageParams<unknown>).version) {\n      case SignTypedDataVersion.V1:\n        if (typeof parameters.data === \"string\") {\n          assert.doesNotThrow(() => {\n            data = JSON.parse(parameters.data as string);\n          }, '\"data\" must be a valid JSON string.');\n        } else {\n          // for backward compatiblity we validate for both string and object type.\n          data = parameters.data;\n        }\n        assert.ok(Array.isArray(data as unknown), \"params.data must be an array.\");\n        assert.doesNotThrow(() => {\n          typedSignatureHash(data as TypedDataV1Field[]);\n        }, \"Signing data must be valid EIP-712 typed data.\");\n        break;\n      case SignTypedDataVersion.V3:\n      case SignTypedDataVersion.V4: {\n        if (typeof parameters.data === \"string\") {\n          assert.doesNotThrow(() => {\n            data = JSON.parse(parameters.data as string);\n          }, '\"data\" must be a valid JSON string.');\n        } else {\n          // for backward compatiblity we validate for both string and object type.\n          data = parameters.data;\n        }\n        const typedData = data as TypedMessage<{\n          EIP712Domain: MessageTypeProperty[];\n        }>;\n\n        assert.ok(typedData.primaryType in typedData.types, `Primary type of \"${typedData.primaryType}\" has no type definition.`);\n        const validation = jsonschema.validate(typedData, TYPED_MESSAGE_SCHEMA.properties);\n        assert.strictEqual(validation.errors.length, 0, \"Signing data must conform to EIP-712 schema. See https://git.io/fNtcx.\");\n        chainId = typedData.domain?.chainId;\n        if (chainId) {\n          assert.ok(!Number.isNaN(activeChainId), `Cannot sign messages for chainId \"${chainId}\", because Web3Auth is switching networks.`);\n          if (typeof chainId === \"string\") {\n            chainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n          }\n          assert.strictEqual(chainId, activeChainId, `Provided chainId \"${chainId}\" must match the active chainId \"${activeChainId}\"`);\n        }\n        break;\n      }\n      default:\n        assert.fail(`Unknown typed data version \"${(parameters as TypedMessageParams<unknown>).version}\"`);\n    }\n  } catch (error) {\n    throw rpcErrors.invalidInput({\n      message: (error as Error)?.message,\n    });\n  }\n};\n","import { TransactionFactory } from \"@ethereumjs/tx\";\nimport { privateToAddress, stripHexPrefix } from \"@ethereumjs/util\";\nimport {\n  decrypt,\n  EthEncryptedData,\n  getEncryptionPublicKey,\n  MessageTypes,\n  personalSign,\n  signTypedData,\n  SignTypedDataVersion,\n  TypedDataV1,\n  TypedMessage,\n} from \"@metamask/eth-sig-util\";\nimport { providerErrors } from \"@metamask/rpc-errors\";\nimport { signMessage } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { isHexStrict, log, SafeEventEmitterProvider } from \"@web3auth/base\";\n\nimport { IProviderHandlers, MessageParams, TransactionParams, TypedMessageParams } from \"../../rpc/interfaces\";\nimport { TransactionFormatter } from \"./TransactionFormatter\";\nimport { validateTypedMessageParams } from \"./TransactionFormatter/utils\";\n\nasync function signTx(txParams: TransactionParams & { gas?: string }, privKey: string, txFormatter: TransactionFormatter): Promise<Buffer> {\n  const finalTxParams = await txFormatter.formatTransaction(txParams);\n  const common = await txFormatter.getCommonConfiguration();\n  const unsignedEthTx = TransactionFactory.fromTxData(finalTxParams, {\n    common,\n  });\n  const signedTx = unsignedEthTx.sign(Buffer.from(privKey, \"hex\")).serialize();\n  return Buffer.from(signedTx);\n}\n\nexport function getProviderHandlers({\n  txFormatter,\n  privKey,\n  getProviderEngineProxy,\n}: {\n  txFormatter: TransactionFormatter;\n  privKey: string;\n  getProviderEngineProxy: () => SafeEventEmitterProvider | null;\n}): IProviderHandlers {\n  return {\n    getAccounts: async (_: JRPCRequest<unknown>) => [`0x${Buffer.from(privateToAddress(Buffer.from(privKey, \"hex\"))).toString(\"hex\")}`],\n    getPrivateKey: async (_: JRPCRequest<unknown>) => privKey,\n    processTransaction: async (txParams: TransactionParams & { gas?: string }, _: JRPCRequest<unknown>): Promise<string> => {\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw providerErrors.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      if (txParams.input && !txParams.data) txParams.data = txParams.input;\n      const signedTx = await signTx(txParams, privKey, txFormatter);\n      const txHash = await providerEngineProxy.request<[string], string>({\n        method: \"eth_sendRawTransaction\",\n        params: [\"0x\".concat(signedTx.toString(\"hex\"))],\n      });\n      return txHash;\n    },\n    processSignTransaction: async (txParams: TransactionParams & { gas?: string }, _: JRPCRequest<unknown>): Promise<string> => {\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw providerErrors.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      if (txParams.input && !txParams.data) txParams.data = txParams.input;\n      const signedTx = await signTx(txParams, privKey, txFormatter);\n      return `0x${signedTx.toString(\"hex\")}`;\n    },\n    processEthSignMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const rawMessageSig = signMessage(privKey, msgParams.data);\n      return rawMessageSig;\n    },\n    processPersonalMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const sig = personalSign({ privateKey: privKeyBuffer, data: msgParams.data });\n      return sig;\n    },\n    processTypedMessage: async (msgParams: MessageParams<TypedDataV1>, _: JRPCRequest<unknown>): Promise<string> => {\n      log.debug(\"processTypedMessage\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw providerErrors.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const chainId = await providerEngineProxy.request<never, string>({ method: \"eth_chainId\" });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n      const params = {\n        ...msgParams,\n        version: SignTypedDataVersion.V1,\n      };\n      validateTypedMessageParams(params, finalChainId);\n      const data = typeof params.data === \"string\" ? JSON.parse(params.data) : params.data;\n      const sig = signTypedData({ privateKey: privKeyBuffer, data, version: SignTypedDataVersion.V1 });\n      return sig;\n    },\n    processTypedMessageV3: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>, _: JRPCRequest<unknown>): Promise<string> => {\n      log.debug(\"processTypedMessageV3\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw providerErrors.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const chainId = await providerEngineProxy.request<never, string>({ method: \"eth_chainId\" });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n      validateTypedMessageParams(msgParams, finalChainId);\n      const data = typeof msgParams.data === \"string\" ? JSON.parse(msgParams.data) : msgParams.data;\n      const sig = signTypedData({ privateKey: privKeyBuffer, data, version: SignTypedDataVersion.V3 });\n      return sig;\n    },\n    processTypedMessageV4: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>, _: JRPCRequest<unknown>): Promise<string> => {\n      log.debug(\"processTypedMessageV4\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw providerErrors.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const chainId = await providerEngineProxy.request<never, string>({ method: \"eth_chainId\" });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n      validateTypedMessageParams(msgParams, finalChainId);\n      const data = typeof msgParams.data === \"string\" ? JSON.parse(msgParams.data) : msgParams.data;\n      const sig = signTypedData({ privateKey: privKeyBuffer, data, version: SignTypedDataVersion.V4 });\n      return sig;\n    },\n    processEncryptionPublicKey: async (address: string, _: JRPCRequest<unknown>): Promise<string> => {\n      log.info(\"processEncryptionPublicKey\", address);\n      return getEncryptionPublicKey(privKey);\n    },\n    processDecryptMessage: (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): string => {\n      log.info(\"processDecryptMessage\", msgParams);\n      const stripped = stripHexPrefix(msgParams.data);\n      const buff = Buffer.from(stripped, \"hex\");\n      const decrypted = decrypt({ encryptedData: JSON.parse(buff.toString(\"utf8\")) as EthEncryptedData, privateKey: privKey });\n      return decrypted;\n    },\n  };\n}\n","import { addHexPrefix, stripHexPrefix } from \"@ethereumjs/util\";\nimport { BigNumber } from \"bignumber.js\";\nimport BN from \"bn.js\";\n\nexport function bnLessThan(a: string | number, b: string | number) {\n  if (a === null || a === undefined || b === null || b === undefined) {\n    return null;\n  }\n  return new BigNumber(a, 10).lt(b, 10);\n}\n\nexport function bnToHex(inputBn: BN) {\n  return addHexPrefix(inputBn.toString(16));\n}\n\nexport function hexToBn(inputHex: string): BN {\n  if (BN.isBN(inputHex)) return inputHex;\n  return new BN(stripHexPrefix(inputHex), 16);\n}\n\nexport function BnMultiplyByFraction(targetBN: BN, numerator: number | string, denominator: number | string): BN {\n  const numberBN = new BN(numerator);\n  const denomBN = new BN(denominator);\n  return targetBN.mul(numberBN).div(denomBN);\n}\n","export const LegacyGasAPIEndpoint = \"https://gas-api.metaswap.codefi.network/networks/<chain_id>/gasPrices\";\nexport const EIP1559APIEndpoint = \"https://gas-api.metaswap.codefi.network/networks/<chain_id>/suggestedGasFees\";\nexport const TRANSACTION_ENVELOPE_TYPES = {\n  LEGACY: \"0x0\",\n  ACCESS_LIST: \"0x1\",\n  FEE_MARKET: \"0x2\",\n};\n\nexport const TRANSACTION_TYPES = {\n  SENT_ETHER: \"sentEther\",\n  CONTRACT_INTERACTION: \"contractInteraction\",\n  DEPLOY_CONTRACT: \"contractDeployment\",\n  STANDARD_TRANSACTION: \"transaction\",\n};\n\nexport const GAS_ESTIMATE_TYPES = {\n  FEE_MARKET: \"fee-market\",\n  LEGACY: \"legacy\",\n  ETH_GASPRICE: \"eth_gasPrice\",\n  NONE: \"none\",\n};\n","import { Common, Hardfork } from \"@ethereumjs/common\";\nimport { addHexPrefix, AddressLike, stripHexPrefix } from \"@ethereumjs/util\";\nimport { Block } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, log, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport BigNumber from \"bignumber.js\";\n\nimport { TransactionParams } from \"../../../rpc/interfaces\";\nimport { decGWEIToHexWEI, hexWEIToDecGWEI } from \"../../converter\";\nimport { bnLessThan, BnMultiplyByFraction, bnToHex, hexToBn } from \"../../utils\";\nimport { EIP1559APIEndpoint, GAS_ESTIMATE_TYPES, LegacyGasAPIEndpoint, TRANSACTION_ENVELOPE_TYPES, TRANSACTION_TYPES } from \"./constants\";\nimport { EIP1159GasData, EthereumGasFeeEstimates, FallbackGasData, FeeHistoryResponse, GasData, LegacyGasData, TxType } from \"./interfaces\";\nimport { fetchEip1159GasEstimates, fetchLegacyGasPriceEstimates } from \"./utils\";\n\nexport class TransactionFormatter {\n  // https://0x.org/docs/introduction/0x-cheat-sheet#swap-api-endpoints\n  readonly API_SUPPORTED_CHAINIDS = new Set([\"0x1\", \"0x5\", \"0x13881\", \"0xa4b1\", \"0xa86a\", \"0x2105\", \"0x38\", \"0xfa\", \"0xa\", \"0x89\"]);\n\n  private chainConfig: CustomChainConfig | null = null;\n\n  private getProviderEngineProxy: () => SafeEventEmitterProvider;\n\n  private isEIP1559Compatible = false;\n\n  constructor({ getProviderEngineProxy }: { getProviderEngineProxy: () => SafeEventEmitterProvider }) {\n    this.getProviderEngineProxy = getProviderEngineProxy;\n  }\n\n  get providerProxy() {\n    return this.getProviderEngineProxy();\n  }\n\n  async init(): Promise<void> {\n    this.chainConfig = (await this.providerProxy.request<never, CustomChainConfig>({ method: \"eth_provider_config\" })) as CustomChainConfig;\n    this.isEIP1559Compatible = await this.getEIP1559Compatibility();\n  }\n\n  async getCommonConfiguration(): Promise<Common> {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n    const { displayName: name, chainId } = this.chainConfig;\n    const hardfork = this.isEIP1559Compatible ? Hardfork.Paris : Hardfork.Berlin;\n    const customChainParams = {\n      name,\n      chainId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n      networkId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n      defaultHardfork: hardfork,\n    };\n    return Common.custom(customChainParams);\n  }\n\n  async formatTransaction(txParams: TransactionParams & { gas?: string }): Promise<TransactionParams & { gas?: string }> {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n\n    const clonedTxParams = {\n      ...txParams,\n    };\n\n    if (clonedTxParams.nonce === undefined)\n      clonedTxParams.nonce = (await this.providerProxy.request<[string, string], number>({\n        method: \"eth_getTransactionCount\",\n        params: [txParams.from, \"latest\"],\n      })) as number;\n\n    if (!this.isEIP1559Compatible && clonedTxParams.gasPrice) {\n      if (clonedTxParams.maxFeePerGas) delete clonedTxParams.maxFeePerGas;\n      if (clonedTxParams.maxPriorityFeePerGas) delete clonedTxParams.maxPriorityFeePerGas;\n      // if user provides gas Limit, we should use it instead\n      // if gas is not provided explicitly, estimate it.\n      if (!clonedTxParams.gasLimit) {\n        if (!clonedTxParams.gas) {\n          const defaultGasLimit = await this.getDefaultGasLimit(clonedTxParams);\n          if (defaultGasLimit) {\n            clonedTxParams.gasLimit = defaultGasLimit;\n          }\n        } else {\n          clonedTxParams.gasLimit = clonedTxParams.gas;\n        }\n      }\n      return clonedTxParams;\n    }\n\n    if (!clonedTxParams.gasLimit) {\n      if (!clonedTxParams.gas) {\n        const defaultGasLimit = await this.getDefaultGasLimit(clonedTxParams);\n        if (defaultGasLimit) {\n          clonedTxParams.gasLimit = defaultGasLimit;\n        }\n      } else {\n        clonedTxParams.gasLimit = clonedTxParams.gas;\n      }\n    }\n\n    const {\n      gasPrice: defaultGasPrice,\n      maxFeePerGas: defaultMaxFeePerGas,\n      maxPriorityFeePerGas: defaultMaxPriorityFeePerGas,\n    } = await this.getDefaultGasFees(clonedTxParams);\n\n    if (this.isEIP1559Compatible) {\n      // If the dapp has suggested a gas price, but no maxFeePerGas or maxPriorityFeePerGas\n      //  then we set maxFeePerGas and maxPriorityFeePerGas to the suggested gasPrice.\n      if (clonedTxParams.gasPrice && !clonedTxParams.maxFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n        clonedTxParams.maxFeePerGas = clonedTxParams.gasPrice;\n\n        clonedTxParams.maxPriorityFeePerGas = bnLessThan(\n          typeof defaultMaxPriorityFeePerGas === \"string\" ? stripHexPrefix(defaultMaxPriorityFeePerGas) : defaultMaxPriorityFeePerGas,\n          typeof clonedTxParams.gasPrice === \"string\" ? stripHexPrefix(clonedTxParams.gasPrice) : clonedTxParams.gasPrice\n        )\n          ? defaultMaxPriorityFeePerGas\n          : clonedTxParams.gasPrice;\n      } else {\n        if (defaultMaxFeePerGas && !clonedTxParams.maxFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxFeePerGas, then we set maxFeePerGas\n          // with the one returned by the gasFeeController, if that is available.\n          clonedTxParams.maxFeePerGas = defaultMaxFeePerGas;\n        }\n\n        if (defaultMaxPriorityFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, then we set maxPriorityFeePerGas\n          // with the one returned by the gasFeeController, if that is available.\n          clonedTxParams.maxPriorityFeePerGas = defaultMaxPriorityFeePerGas;\n        }\n\n        if (defaultGasPrice && !clonedTxParams.maxFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxFeePerGas, and no maxFeePerGas is available\n          // then we set maxFeePerGas to the defaultGasPrice, assuming it is\n          // available.\n          clonedTxParams.maxFeePerGas = defaultGasPrice;\n        }\n\n        if (clonedTxParams.maxFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, and no maxPriorityFeePerGas is\n          // available  then we set maxPriorityFeePerGas to\n          // clonedTxParams.maxFeePerGas, which will either be the gasPrice from the controller, the maxFeePerGas\n          // set by the dapp, or the maxFeePerGas from the controller.\n          clonedTxParams.maxPriorityFeePerGas = clonedTxParams.maxFeePerGas;\n        }\n      }\n\n      // We remove the gasPrice param entirely when on an eip1559 compatible network\n\n      delete clonedTxParams.gasPrice;\n    } else {\n      // We ensure that maxFeePerGas and maxPriorityFeePerGas are not in the transaction params\n      // when not on a EIP1559 compatible network\n\n      delete clonedTxParams.maxPriorityFeePerGas;\n      delete clonedTxParams.maxFeePerGas;\n    }\n\n    // If we have gotten to this point, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas are\n    // set on txParams, it means that either we are on a non-EIP1559 network and the dapp didn't suggest\n    // a gas price, or we are on an EIP1559 network, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas\n    // were available from either the dapp or the network.\n    if (defaultGasPrice && !clonedTxParams.gasPrice && !clonedTxParams.maxPriorityFeePerGas && !clonedTxParams.maxFeePerGas) {\n      clonedTxParams.gasPrice = defaultGasPrice as never;\n    }\n\n    clonedTxParams.type = this.isEIP1559Compatible ? TRANSACTION_ENVELOPE_TYPES.FEE_MARKET : TRANSACTION_ENVELOPE_TYPES.LEGACY;\n    clonedTxParams.chainId = this.chainConfig.chainId;\n    return clonedTxParams;\n  }\n\n  private async fetchEthGasPriceEstimate(): Promise<{ gasPrice: string }> {\n    const gasPrice = (await this.providerProxy.request<[], string>({ method: \"eth_gasPrice\", params: [] })) as string;\n    return {\n      gasPrice: hexWEIToDecGWEI(gasPrice).toString(),\n    };\n  }\n\n  private async fetchGasEstimatesViaEthFeeHistory(): Promise<EthereumGasFeeEstimates> {\n    const noOfBlocks = 10;\n    const newestBlock = \"latest\";\n    // get the 10, 50 and 95th percentile of the tip fees from the last 10 blocks\n    const percentileValues = [10, 50, 95];\n    const feeHistory = await this.providerProxy.request<[number, string, number[]], FeeHistoryResponse>({\n      method: \"eth_feeHistory\",\n      params: [noOfBlocks, newestBlock, percentileValues],\n    });\n\n    // this is in hex wei\n    const finalBaseFeePerGas = feeHistory.baseFeePerGas[feeHistory.baseFeePerGas.length - 1];\n    // this is in hex wei\n    const priorityFeeCalcs = feeHistory.reward.reduce(\n      (acc, curr) => {\n        return {\n          slow: acc.slow.plus(new BigNumber(curr[0], 16)),\n          average: acc.average.plus(new BigNumber(curr[1], 16)),\n          fast: acc.fast.plus(new BigNumber(curr[2], 16)),\n        };\n      },\n      { slow: new BigNumber(0), average: new BigNumber(0), fast: new BigNumber(0) }\n    );\n    return {\n      estimatedBaseFee: hexWEIToDecGWEI(finalBaseFeePerGas).toString(),\n      high: {\n        maxWaitTimeEstimate: 30_000,\n        minWaitTimeEstimate: 15_000,\n        suggestedMaxFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.fast.plus(finalBaseFeePerGas).toString(16)).toString(),\n        suggestedMaxPriorityFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.fast.toString(16)).toString(),\n      },\n      medium: {\n        maxWaitTimeEstimate: 45_000,\n        minWaitTimeEstimate: 15_000,\n        suggestedMaxFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.average.plus(finalBaseFeePerGas).toString(16)).toString(),\n        suggestedMaxPriorityFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.average.toString(16)).toString(),\n      },\n      low: {\n        maxWaitTimeEstimate: 60_000,\n        minWaitTimeEstimate: 15_000,\n        suggestedMaxFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.slow.plus(finalBaseFeePerGas).toString(16)).toString(),\n        suggestedMaxPriorityFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.slow.toString(16)).toString(),\n      },\n    };\n  }\n\n  private async getEIP1559Compatibility(): Promise<boolean> {\n    const latestBlock = await this.providerProxy.request<[string, boolean], Block>({ method: \"eth_getBlockByNumber\", params: [\"latest\", false] });\n    const supportsEIP1559 = latestBlock && latestBlock.baseFeePerGas !== undefined;\n\n    return !!supportsEIP1559;\n  }\n\n  private async fetchGasFeeEstimateData(): Promise<GasData> {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n    const isLegacyGasAPICompatible = this.chainConfig.chainId === \"0x1\";\n\n    const chainId = Number.parseInt(this.chainConfig.chainId, 16);\n\n    let gasData: GasData;\n\n    try {\n      if (this.isEIP1559Compatible) {\n        let estimates: EthereumGasFeeEstimates;\n        try {\n          if (this.API_SUPPORTED_CHAINIDS.has(this.chainConfig.chainId)) {\n            estimates = await fetchEip1159GasEstimates(EIP1559APIEndpoint.replace(\"<chain_id>\", `${chainId}`));\n          } else {\n            throw new Error(\"Chain id not supported by api\");\n          }\n        } catch (error) {\n          estimates = await this.fetchGasEstimatesViaEthFeeHistory();\n        }\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.FEE_MARKET,\n        };\n      } else if (isLegacyGasAPICompatible) {\n        const estimates = await fetchLegacyGasPriceEstimates(LegacyGasAPIEndpoint.replace(\"<chain_id>\", `${chainId}`));\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.LEGACY,\n        };\n      } else {\n        throw new Error(\"Main gas fee/price estimation failed. Use fallback\");\n      }\n    } catch (e: unknown) {\n      try {\n        const estimates = await this.fetchEthGasPriceEstimate();\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.ETH_GASPRICE,\n        };\n      } catch (error: unknown) {\n        throw new Error(`Gas fee/price estimation failed. Message: ${(error as Error).message}`);\n      }\n    }\n    return gasData;\n  }\n\n  private async getDefaultGasFees(\n    txParams: TransactionParams & { gas?: string }\n  ): Promise<{ gasPrice?: string; maxFeePerGas?: string; maxPriorityFeePerGas?: string }> {\n    if ((!this.isEIP1559Compatible && txParams.gasPrice) || (this.isEIP1559Compatible && txParams.maxFeePerGas && txParams.maxPriorityFeePerGas)) {\n      return {};\n    }\n\n    try {\n      const { gasFeeEstimates, gasEstimateType } = await this.fetchGasFeeEstimateData();\n      if (this.isEIP1559Compatible && gasEstimateType === GAS_ESTIMATE_TYPES.FEE_MARKET) {\n        const { medium: { suggestedMaxPriorityFeePerGas, suggestedMaxFeePerGas } = {} } = gasFeeEstimates as EIP1159GasData;\n\n        if (suggestedMaxPriorityFeePerGas && suggestedMaxFeePerGas) {\n          return {\n            maxFeePerGas: addHexPrefix(decGWEIToHexWEI(suggestedMaxFeePerGas)),\n            maxPriorityFeePerGas: addHexPrefix(decGWEIToHexWEI(suggestedMaxPriorityFeePerGas)),\n          };\n        }\n      } else if (gasEstimateType === GAS_ESTIMATE_TYPES.LEGACY) {\n        // The LEGACY type includes low, medium and high estimates of\n        // gas price values.\n        return {\n          gasPrice: addHexPrefix(decGWEIToHexWEI((gasFeeEstimates as LegacyGasData).medium)),\n        };\n      } else if (gasEstimateType === GAS_ESTIMATE_TYPES.ETH_GASPRICE) {\n        // The ETH_GASPRICE type just includes a single gas price property,\n        // which we can assume was retrieved from eth_gasPrice\n        return {\n          gasPrice: addHexPrefix(decGWEIToHexWEI((gasFeeEstimates as FallbackGasData).gasPrice)),\n        };\n      }\n    } catch (error) {\n      log.error(error);\n    }\n\n    const { gasPrice } = await this.fetchEthGasPriceEstimate();\n\n    return { gasPrice: addHexPrefix(decGWEIToHexWEI(gasPrice)) };\n  }\n\n  private async estimateTxGas(txMeta: TransactionParams): Promise<string> {\n    const txParams = { ...txMeta };\n\n    // `eth_estimateGas` can fail if the user has insufficient balance for the\n    // value being sent, or for the gas cost. We don't want to check their\n    // balance here, we just want the gas estimate. The gas price is removed\n    // to skip those balance checks. We check balance elsewhere. We also delete\n    // maxFeePerGas and maxPriorityFeePerGas to support EIP-1559 txs.\n    delete txParams.gasPrice;\n    delete txParams.maxFeePerGas;\n    delete txParams.maxPriorityFeePerGas;\n    const gas = (await this.providerProxy.request<[TransactionParams], string>({ method: \"eth_estimateGas\", params: [txParams] })) as string;\n    return gas;\n  }\n\n  private async analyzeGasUsage(txMeta: TransactionParams): Promise<{\n    blockGasLimit: string;\n    estimatedGasHex: string;\n  }> {\n    const block = (await this.providerProxy.request<[string, boolean], Block>({\n      method: \"eth_getBlockByNumber\",\n      params: [\"latest\", false],\n    })) as Block;\n    // fallback to block gasLimit\n    const blockGasLimitBN = hexToBn(block.gasLimit as string);\n    const saferGasLimitBN = BnMultiplyByFraction(blockGasLimitBN, 19, 20);\n    let estimatedGasHex = bnToHex(saferGasLimitBN);\n\n    try {\n      estimatedGasHex = await this.estimateTxGas(txMeta);\n    } catch (error: unknown) {\n      log.warn(error);\n    }\n    return { blockGasLimit: block.gasLimit as string, estimatedGasHex };\n  }\n\n  private addGasBuffer(initialGasLimitHex: string, blockGasLimitHex: string, multiplier = 1.5): string {\n    const initialGasLimitBn = hexToBn(initialGasLimitHex);\n    const blockGasLimitBn = hexToBn(blockGasLimitHex);\n    const upperGasLimitBn = blockGasLimitBn.muln(0.9);\n    const bufferedGasLimitBn = initialGasLimitBn.muln(multiplier);\n\n    // if initialGasLimit is above blockGasLimit, dont modify it\n    if (initialGasLimitBn.gt(upperGasLimitBn)) return bnToHex(initialGasLimitBn);\n    // if bufferedGasLimit is below blockGasLimit, use bufferedGasLimit\n    if (bufferedGasLimitBn.lt(upperGasLimitBn)) return bnToHex(bufferedGasLimitBn);\n    // otherwise use blockGasLimit\n    return bnToHex(upperGasLimitBn);\n  }\n\n  private async determineTransactionCategory(txParameters: TransactionParams & { gas?: string }): Promise<{\n    transactionCategory: TxType | null;\n    code?: string;\n  }> {\n    const { data, to } = txParameters;\n    let code = \"\";\n\n    let txCategory: TxType | null;\n\n    if (data && !to) {\n      txCategory = TRANSACTION_TYPES.DEPLOY_CONTRACT;\n    } else {\n      try {\n        code = (await this.providerProxy.request<[AddressLike, string], string>({ method: \"eth_getCode\", params: [to, \"latest\"] })) as string;\n      } catch (error) {\n        log.warn(error);\n      }\n      const codeIsEmpty = !code || code === \"0x\" || code === \"0x0\";\n\n      txCategory = codeIsEmpty ? TRANSACTION_TYPES.SENT_ETHER : TRANSACTION_TYPES.CONTRACT_INTERACTION;\n    }\n\n    return { transactionCategory: txCategory, code };\n  }\n\n  private async getDefaultGasLimit(txParams: TransactionParams & { gas?: string }): Promise<string> {\n    const { transactionCategory } = await this.determineTransactionCategory({ ...txParams });\n\n    if (txParams.gas) {\n      return txParams.gas;\n    }\n\n    if (txParams.to && transactionCategory === TRANSACTION_TYPES.SENT_ETHER) {\n      // if there's data in the params, but there's no contract code, it's not a valid transaction\n      if (txParams.data) {\n        throw Error(\"TxGasUtil - Trying to call a function on a non-contract address\");\n      }\n\n      const TWENTY_ONE_THOUSAND = 21_000;\n\n      // This is a standard ether simple send, gas requirement is exactly 21k\n      return addHexPrefix(TWENTY_ONE_THOUSAND.toString(16));\n    }\n\n    const { blockGasLimit, estimatedGasHex } = await this.analyzeGasUsage(txParams);\n\n    // add additional gas buffer to our estimation for safety\n    const gasLimit = this.addGasBuffer(addHexPrefix(estimatedGasHex), blockGasLimit as string);\n    return gasLimit;\n  }\n}\n","import { providerErrors, rpcErrors } from \"@metamask/rpc-errors\";\nimport { JRPCEngine, JRPCMiddleware, providerFromEngine } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\n\nimport { createAccountMiddleware, createChainSwitchMiddleware, createEthMiddleware } from \"../../rpc/ethRpcMiddlewares\";\nimport { AddEthereumChainParameter, IAccountHandlers, IChainSwitchHandlers } from \"../../rpc/interfaces\";\nimport { createJsonRpcClient } from \"../../rpc/jrpcClient\";\nimport { getProviderHandlers } from \"./ethPrivatekeyUtils\";\nimport { TransactionFormatter } from \"./TransactionFormatter\";\n\nexport interface EthereumPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\n\nexport interface EthereumPrivKeyProviderState extends BaseProviderState {\n  privateKey?: string;\n}\n\nexport class EthereumPrivateKeyProvider extends BaseProvider<BaseProviderConfig, EthereumPrivKeyProviderState, string> {\n  constructor({ config, state }: { config: EthereumPrivKeyProviderConfig; state?: EthereumPrivKeyProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.EIP155 } }, state });\n  }\n\n  public static getProviderInstance = async (params: {\n    privKey: string;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n  }): Promise<EthereumPrivateKeyProvider> => {\n    const providerFactory = new EthereumPrivateKeyProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.state.privateKey)\n      throw providerErrors.custom({ message: \"Private key is not found in state, plz pass it in constructor state param\", code: 4902 });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(privKey: string): Promise<void> {\n    const txFormatter = new TransactionFormatter({\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this),\n    });\n    const providerHandlers = getProviderHandlers({\n      txFormatter,\n      privKey,\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this),\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const chainSwitchMiddleware = this.getChainSwitchMiddleware();\n    const engine = new JRPCEngine();\n    // Not a partial anymore because of checks in ctor\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(ethMiddleware);\n    engine.push(chainSwitchMiddleware);\n    engine.push(this.getAccountMiddleware());\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await txFormatter.init();\n    await this.lookupNetwork();\n  }\n\n  public async updateAccount(params: { privateKey: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw providerErrors.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const existingKey = await this._providerEngineProxy.request<never, string>({ method: \"eth_private_key\" });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request<never, string[]>({ method: \"eth_accounts\" }),\n      });\n    }\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw providerErrors.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    this.configure({ chainConfig });\n    const privKey = await this._providerEngineProxy.request<never, string>({ method: \"eth_private_key\" });\n    await this.setupProvider(privKey);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this._providerEngineProxy) throw providerErrors.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n    if (!chainId) throw rpcErrors.invalidParams(\"chainId is required while lookupNetwork\");\n    const network = await this._providerEngineProxy.request<[], string>({\n      method: \"net_version\",\n      params: [],\n    });\n\n    if (parseInt(chainId, 16) !== parseInt(network, 10)) throw providerErrors.chainDisconnected(`Invalid network, net_version is: ${network}`);\n    if (this.state.chainId !== chainId) {\n      this.emit(\"chainChanged\", chainId);\n      this.emit(\"connect\", { chainId });\n    }\n    this.update({ chainId });\n    return network;\n  }\n\n  private getChainSwitchMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const chainSwitchHandlers: IChainSwitchHandlers = {\n      addChain: async (params: AddEthereumChainParameter): Promise<void> => {\n        const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = params;\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.EIP155,\n          chainId,\n          ticker: nativeCurrency?.symbol || \"ETH\",\n          tickerName: nativeCurrency?.name || \"Ether\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: blockExplorerUrls?.[0] || \"\",\n          decimals: nativeCurrency?.decimals || 18,\n        });\n      },\n      switchChain: async (params: { chainId: string }): Promise<void> => {\n        const { chainId } = params;\n        await this.switchChain({ chainId });\n      },\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  private getAccountMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const accountHandlers: IAccountHandlers = {\n      updatePrivatekey: async (params: { privateKey: string }): Promise<void> => {\n        const { privateKey } = params;\n        await this.updateAccount({ privateKey });\n      },\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n"],"names":["resemblesAddress","str","length","createWalletMiddleware","_ref","getAccounts","getPrivateKey","processDecryptMessage","processEncryptionPublicKey","processEthSignMessage","processPersonalMessage","processTransaction","processSignTransaction","processTypedMessage","processTypedMessageV3","processTypedMessageV4","Error","validateAndNormalizeKeyholder","address","req","accounts","normalizedAccounts","map","_address","toLowerCase","normalizedAddress","includes","rpcErrors","invalidParams","message","lookupAccounts","res","result","lookupDefaultAccount","sendTransaction","methodNotSupported","txParams","params","from","signTransaction","ethSign","extraParams","msgParams","_objectSpread","data","signTypedData","version","signTypedDataV3","signTypedDataV4","personalSign","firstParam","secondParam","warning","encryptionPublicKey","decryptMessage","ciphertext","fetchPrivateKey","createScaffoldMiddleware","eth_accounts","createAsyncMiddleware","eth_private_key","private_key","eth_coinbase","eth_sendTransaction","eth_signTransaction","eth_sign","eth_signTypedData","eth_signTypedData_v3","eth_signTypedData_v4","personal_sign","eth_getEncryptionPublicKey","eth_decrypt","createEthMiddleware","providerHandlers","ethMiddleware","mergeMiddleware","eth_syncing","createChainSwitchMiddleware","addChain","switchChain","addNewChain","_req$params","chainParams","undefined","chainId","rpcUrls","nativeCurrency","updateChain","_req$params2","wallet_addEthereumChain","wallet_switchEthereumChain","createAccountMiddleware","_ref2","updatePrivatekey","updateAccount","_req$params3","accountParams","privateKey","wallet_updateAccount","createChainIdMiddleware","next","end","method","createProviderConfigMiddleware","providerConfig","createJsonRpcClient","rpcTarget","fetchMiddleware","createFetchMiddleware","networkMiddleware","getLastActiveSession","signClient","session","lastKeyIndex","keys","get","sendJrpcRequest","providerErrors","disconnected","request","topic","getAccountsFromNamespaces","namespaces","Set","add","parseAccountId","getProviderHandlers","connector","_","methodRes","WalletConnectV2Provider","BaseProvider","constructor","config","state","chainConfig","chainNamespace","CHAIN_NAMESPACES","EIP155","skipLookupNetwork","_defineProperty","enable","custom","code","setupProvider","_providerEngineProxy","onConnectorStateUpdate","setupEngine","currentChainConfig","getChainConfig","configure","lookupNetwork","newChainId","update","emit","numChainId","parseInt","jrpcRes","chainSwitchMiddleware","getChainSwitchMiddleware","engine","JRPCEngine","push","provider","providerFromEngine","updateProviderEngineProxy","chainSwitchHandlers","chainName","blockExplorerUrls","ticker","symbol","tickerName","name","displayName","blockExplorer","decimals","connectedTopic","_this$connector","WalletLoginError","notConnectedError","_this$connector$sessi","checkIfChainIdAllowed","sessionData","allChains","getChainsFromNamespaces","chainAllowed","chain","parsedId","parseChainId","Number","reference","checkIfAccountAllowed","allAccounts","accountAllowed","account","_parsedAccount$addres","parsedAccount","events","on","payload","log","debug","event","connectedChainId","rpcUrl","connectedHexChainId","toString","maybeConfig","_class","providerFactory","BIG_NUMBER_WEI_MULTIPLIER","BigNumber","BIG_NUMBER_GWEI_MULTIPLIER","BIG_NUMBER_ETH_MULTIPLIER","toBigNumber","hex","n","stripHexPrefix","dec","toNormalizedDenomination","WEI","bigNumber","div","GWEI","ETH","toSpecifiedDenomination","times","dp","ROUND_HALF_UP","baseChange","converter","value","fromNumericBase","fromDenomination","toNumericBase","toDenomination","numberOfDecimals","convertedValue","ROUND_HALF_DOWN","conversionUtil","decGWEIToHexWEI","decGWEI","hexWEIToDecGWEI","normalizeGWEIDecimalNumbers","numberAsWEIHex","numberAsGWEI","fetchEip1159GasEstimates","url","estimates","normalizedEstimates","estimatedBaseFee","low","suggestedMaxPriorityFeePerGas","suggestedMaxFeePerGas","medium","high","fetchLegacyGasPriceEstimates","referrer","referrerPolicy","mode","SafeGasPrice","ProposeGasPrice","FastGasPrice","validateTypedMessageParams","parameters","activeChainId","assert","ok","isValidAddress","SignTypedDataVersion","V1","doesNotThrow","JSON","parse","Array","isArray","typedSignatureHash","V3","V4","_typedData$domain","typedData","primaryType","types","validation","jsonschema","validate","TYPED_MESSAGE_SCHEMA","properties","strictEqual","errors","domain","isNaN","isHexStrict","fail","error","invalidInput","signTx","privKey","txFormatter","finalTxParams","formatTransaction","common","getCommonConfiguration","unsignedEthTx","TransactionFactory","fromTxData","signedTx","sign","Buffer","serialize","getProviderEngineProxy","privateToAddress","providerEngineProxy","input","txHash","concat","rawMessageSig","signMessage","privKeyBuffer","sig","finalChainId","info","getEncryptionPublicKey","stripped","buff","decrypted","decrypt","encryptedData","bnLessThan","a","b","lt","bnToHex","inputBn","addHexPrefix","hexToBn","inputHex","BN","isBN","BnMultiplyByFraction","targetBN","numerator","denominator","numberBN","denomBN","mul","LegacyGasAPIEndpoint","EIP1559APIEndpoint","TRANSACTION_ENVELOPE_TYPES","LEGACY","ACCESS_LIST","FEE_MARKET","TRANSACTION_TYPES","SENT_ETHER","CONTRACT_INTERACTION","DEPLOY_CONTRACT","STANDARD_TRANSACTION","GAS_ESTIMATE_TYPES","ETH_GASPRICE","NONE","TransactionFormatter","providerProxy","init","isEIP1559Compatible","getEIP1559Compatibility","hardfork","Hardfork","Paris","Berlin","customChainParams","networkId","defaultHardfork","Common","clonedTxParams","nonce","gasPrice","maxFeePerGas","maxPriorityFeePerGas","gasLimit","gas","defaultGasLimit","getDefaultGasLimit","defaultGasPrice","defaultMaxFeePerGas","defaultMaxPriorityFeePerGas","getDefaultGasFees","type","fetchEthGasPriceEstimate","fetchGasEstimatesViaEthFeeHistory","noOfBlocks","newestBlock","percentileValues","feeHistory","finalBaseFeePerGas","baseFeePerGas","priorityFeeCalcs","reward","reduce","acc","curr","slow","plus","average","fast","maxWaitTimeEstimate","minWaitTimeEstimate","latestBlock","supportsEIP1559","fetchGasFeeEstimateData","isLegacyGasAPICompatible","gasData","API_SUPPORTED_CHAINIDS","has","replace","gasFeeEstimates","gasEstimateType","e","estimateTxGas","txMeta","analyzeGasUsage","block","blockGasLimitBN","saferGasLimitBN","estimatedGasHex","warn","blockGasLimit","addGasBuffer","initialGasLimitHex","blockGasLimitHex","multiplier","arguments","initialGasLimitBn","blockGasLimitBn","upperGasLimitBn","muln","bufferedGasLimitBn","gt","determineTransactionCategory","txParameters","to","txCategory","codeIsEmpty","transactionCategory","TWENTY_ONE_THOUSAND","EthereumPrivateKeyProvider","bind","getAccountMiddleware","existingKey","network","chainDisconnected","accountHandlers"],"mappings":"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"}