{"version":3,"file":"ethereumProvider.cjs.js","mappings":"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","sources":["webpack://@web3auth/ethereum-provider/webpack/bootstrap","webpack://@web3auth/ethereum-provider/webpack/runtime/compat get default export","webpack://@web3auth/ethereum-provider/webpack/runtime/define property getters","webpack://@web3auth/ethereum-provider/webpack/runtime/hasOwnProperty shorthand","webpack://@web3auth/ethereum-provider/webpack/runtime/make namespace object","webpack://@web3auth/ethereum-provider/external commonjs2 \"@babel/runtime/helpers/objectSpread2\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@metamask/rpc-errors\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@toruslabs/openlogin-jrpc\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@walletconnect/utils\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@web3auth/base\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@web3auth/base-provider\"","webpack://@web3auth/ethereum-provider/./src/rpc/walletMidddleware.ts","webpack://@web3auth/ethereum-provider/./src/rpc/ethRpcMiddlewares.ts","webpack://@web3auth/ethereum-provider/external commonjs2 \"@toruslabs/base-controllers\"","webpack://@web3auth/ethereum-provider/./src/rpc/jrpcClient.ts","webpack://@web3auth/ethereum-provider/./src/providers/injectedProviders/walletConnectV2Utils.ts","webpack://@web3auth/ethereum-provider/./src/providers/injectedProviders/WalletConnectV2Provider.ts","webpack://@web3auth/ethereum-provider/./src/providers/injectedProviders/index.ts","webpack://@web3auth/ethereum-provider/external commonjs2 \"@ethereumjs/tx\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@ethereumjs/util\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@metamask/eth-sig-util\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"@toruslabs/http-helpers\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"assert\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"jsonschema\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"bignumber.js\"","webpack://@web3auth/ethereum-provider/./src/providers/converter.ts","webpack://@web3auth/ethereum-provider/./src/providers/privateKeyProviders/TransactionFormatter/utils.ts","webpack://@web3auth/ethereum-provider/./src/providers/privateKeyProviders/ethPrivatekeyUtils.ts","webpack://@web3auth/ethereum-provider/external commonjs2 \"@ethereumjs/common\"","webpack://@web3auth/ethereum-provider/external commonjs2 \"bn.js\"","webpack://@web3auth/ethereum-provider/./src/providers/utils.ts","webpack://@web3auth/ethereum-provider/./src/providers/privateKeyProviders/TransactionFormatter/constants.ts","webpack://@web3auth/ethereum-provider/./src/providers/privateKeyProviders/TransactionFormatter/index.ts","webpack://@web3auth/ethereum-provider/./src/providers/privateKeyProviders/EthereumPrivateKeyProvider.ts","webpack://@web3auth/ethereum-provider/./src/providers/privateKeyProviders/index.ts","webpack://@web3auth/ethereum-provider/./src/providers/index.ts","webpack://@web3auth/ethereum-provider/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/objectSpread2\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@metamask/rpc-errors\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/openlogin-jrpc\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@walletconnect/utils\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base-provider\");","import type { MessageTypes, TypedDataV1, TypedMessage } from \"@metamask/eth-sig-util\";\nimport { rpcErrors } from \"@metamask/rpc-errors\";\nimport { createAsyncMiddleware, createScaffoldMiddleware, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"@toruslabs/openlogin-jrpc\";\n\nimport type { MessageParams, TransactionParams, TypedMessageParams, WalletMiddlewareOptions } from \"./interfaces\";\n\nfunction resemblesAddress(str: string): boolean {\n  // hex prefix 2 + 20 bytes\n  return str.length === 2 + 20 * 2;\n}\n\nexport function createWalletMiddleware({\n  getAccounts,\n  getPrivateKey,\n  processDecryptMessage,\n  processEncryptionPublicKey,\n  processEthSignMessage,\n  processPersonalMessage,\n  processTransaction,\n  processSignTransaction,\n  processTypedMessage,\n  processTypedMessageV3,\n  processTypedMessageV4,\n}: WalletMiddlewareOptions): JRPCMiddleware<string, unknown> {\n  if (!getAccounts) {\n    throw new Error(\"opts.getAccounts is required\");\n  }\n\n  //\n  // utility\n  //\n\n  /**\n   * Validates the keyholder address, and returns a normalized (i.e. lowercase)\n   * copy of it.\n   *\n   * an error\n   */\n  async function validateAndNormalizeKeyholder(address: string, req: JRPCRequest<unknown>): Promise<string> {\n    if (typeof address === \"string\" && address.length > 0) {\n      // ensure address is included in provided accounts\n      const accounts: string[] = await getAccounts(req);\n      const normalizedAccounts: string[] = accounts.map((_address) => _address.toLowerCase());\n      const normalizedAddress: string = address.toLowerCase();\n\n      if (normalizedAccounts.includes(normalizedAddress)) {\n        return normalizedAddress;\n      }\n    }\n    throw rpcErrors.invalidParams({\n      message: `Invalid parameters: must provide an Ethereum address.`,\n    });\n  }\n\n  //\n  // account lookups\n  //\n\n  async function lookupAccounts(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    res.result = await getAccounts(req);\n  }\n\n  async function lookupDefaultAccount(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    const accounts = await getAccounts(req);\n    res.result = accounts[0] || null;\n  }\n\n  //\n  // transaction signatures\n  //\n\n  async function sendTransaction(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTransaction) {\n      throw rpcErrors.methodNotSupported();\n    }\n\n    const txParams: TransactionParams =\n      (req.params as TransactionParams[])[0] ||\n      ({\n        from: \"\",\n      } as TransactionParams);\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from as string, req);\n    res.result = await processTransaction(txParams, req);\n  }\n\n  async function signTransaction(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processSignTransaction) {\n      throw rpcErrors.methodNotSupported();\n    }\n\n    const txParams: TransactionParams =\n      (req.params as TransactionParams[])[0] ||\n      ({\n        from: \"\",\n      } as TransactionParams);\n    txParams.from = await validateAndNormalizeKeyholder(txParams.from as string, req);\n    res.result = await processSignTransaction(txParams, req);\n  }\n\n  //\n  // message signatures\n  //\n\n  async function ethSign(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processEthSignMessage) {\n      throw rpcErrors.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[0], req);\n    const message: string = (req.params as string[])[1];\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n    const msgParams: MessageParams<string> = {\n      ...extraParams,\n      from: address,\n      data: message,\n    };\n\n    res.result = await processEthSignMessage(msgParams, req);\n  }\n\n  async function signTypedData(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTypedMessage) {\n      throw rpcErrors.methodNotSupported();\n    }\n\n    const message: TypedDataV1 = (req.params as TypedDataV1[])[0];\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[1], req);\n    const version = \"V1\";\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n    const msgParams: MessageParams<TypedDataV1> = {\n      ...extraParams,\n      from: address,\n      data: message,\n    };\n\n    res.result = await processTypedMessage(msgParams, req, version);\n  }\n\n  async function signTypedDataV3(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTypedMessageV3) {\n      throw rpcErrors.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[0], req);\n    const message: TypedMessage<MessageTypes> = (req.params as TypedMessage<MessageTypes>[])[1];\n    const version = \"V3\";\n    const msgParams: TypedMessageParams<TypedMessage<MessageTypes>> = {\n      data: message,\n      from: address,\n      version,\n    };\n\n    res.result = await processTypedMessageV3(msgParams, req, version);\n  }\n\n  async function signTypedDataV4(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processTypedMessageV4) {\n      throw rpcErrors.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string[])[0], req);\n    const message: TypedMessage<MessageTypes> = (req.params as TypedMessage<MessageTypes>[])[1];\n    const version = \"V4\";\n    const msgParams: TypedMessageParams<TypedMessage<MessageTypes>> = {\n      data: message,\n      from: address,\n      version,\n    };\n\n    res.result = await processTypedMessageV4(msgParams, req, version);\n  }\n\n  async function personalSign(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processPersonalMessage) {\n      throw rpcErrors.methodNotSupported();\n    }\n\n    // process normally\n    const firstParam: string = (req.params as string[])[0];\n    const secondParam: string = (req.params as string[])[1];\n    // non-standard \"extraParams\" to be appended to our \"msgParams\" obj\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n\n    // We initially incorrectly ordered these parameters.\n    // To gracefully respect users who adopted this API early,\n    // we are currently gracefully recovering from the wrong param order\n    // when it is clearly identifiable.\n    //\n    // That means when the first param is definitely an address,\n    // and the second param is definitely not, but is hex.\n    let address: string, message: string;\n    if (resemblesAddress(firstParam) && !resemblesAddress(secondParam)) {\n      let warning = `The eth_personalSign method requires params ordered `;\n      warning += `[message, address]. This was previously handled incorrectly, `;\n      warning += `and has been corrected automatically. `;\n      warning += `Please switch this param order for smooth behavior in the future.`;\n      (res as { warning: string }).warning = warning;\n\n      address = firstParam;\n      message = secondParam;\n    } else {\n      message = firstParam;\n      address = secondParam;\n    }\n    address = await validateAndNormalizeKeyholder(address, req);\n\n    const msgParams: MessageParams<string> = {\n      ...extraParams,\n      from: address,\n      data: message,\n    };\n\n    // eslint-disable-next-line require-atomic-updates\n    res.result = await processPersonalMessage(msgParams, req);\n  }\n\n  async function encryptionPublicKey(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processEncryptionPublicKey) {\n      throw rpcErrors.methodNotSupported();\n    }\n\n    const address: string = await validateAndNormalizeKeyholder((req.params as string)[0], req);\n\n    res.result = await processEncryptionPublicKey(address, req);\n  }\n\n  async function decryptMessage(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!processDecryptMessage) {\n      throw rpcErrors.methodNotSupported();\n    }\n\n    const ciphertext: string = (req.params as string)[0];\n    const address: string = await validateAndNormalizeKeyholder((req.params as string)[1], req);\n    const extraParams: Record<string, unknown> = (req.params as Record<string, unknown>[])[2] || {};\n    const msgParams: MessageParams<string> = {\n      ...extraParams,\n      from: address,\n      data: ciphertext,\n    };\n\n    res.result = processDecryptMessage(msgParams, req);\n  }\n\n  async function fetchPrivateKey(req: JRPCRequest<unknown>, res: JRPCResponse<unknown>): Promise<void> {\n    if (!getPrivateKey) {\n      throw rpcErrors.methodNotSupported();\n    }\n    res.result = getPrivateKey(req);\n  }\n\n  return createScaffoldMiddleware({\n    // account lookups\n    eth_accounts: createAsyncMiddleware(lookupAccounts),\n    eth_private_key: createAsyncMiddleware(fetchPrivateKey),\n    private_key: createAsyncMiddleware(fetchPrivateKey),\n    eth_coinbase: createAsyncMiddleware(lookupDefaultAccount),\n    // tx signatures\n    eth_sendTransaction: createAsyncMiddleware(sendTransaction),\n    eth_signTransaction: createAsyncMiddleware(signTransaction),\n    // message signatures\n    eth_sign: createAsyncMiddleware(ethSign),\n    eth_signTypedData: createAsyncMiddleware(signTypedData),\n    eth_signTypedData_v3: createAsyncMiddleware(signTypedDataV3),\n    eth_signTypedData_v4: createAsyncMiddleware(signTypedDataV4),\n    personal_sign: createAsyncMiddleware(personalSign),\n    eth_getEncryptionPublicKey: createAsyncMiddleware(encryptionPublicKey),\n    eth_decrypt: createAsyncMiddleware(decryptMessage),\n  });\n}\n","import { rpcErrors } from \"@metamask/rpc-errors\";\nimport {\n  createAsyncMiddleware,\n  createScaffoldMiddleware,\n  JRPCMiddleware,\n  JRPCRequest,\n  JRPCResponse,\n  mergeMiddleware,\n} from \"@toruslabs/openlogin-jrpc\";\n\nimport { AddEthereumChainParameter, IAccountHandlers, IChainSwitchHandlers, IProviderHandlers } from \"./interfaces\";\nimport { createWalletMiddleware } from \"./walletMidddleware\";\n\nexport function createEthMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown> {\n  const {\n    getAccounts,\n    getPrivateKey,\n    processTransaction,\n    processSignTransaction,\n    processEthSignMessage,\n    processTypedMessage,\n    processTypedMessageV3,\n    processTypedMessageV4,\n    processPersonalMessage,\n    processEncryptionPublicKey,\n    processDecryptMessage,\n  } = providerHandlers;\n  const ethMiddleware = mergeMiddleware([\n    createScaffoldMiddleware({\n      eth_syncing: false,\n    }),\n    createWalletMiddleware({\n      getAccounts,\n      getPrivateKey,\n      processTransaction,\n      processEthSignMessage,\n      processSignTransaction,\n      processTypedMessage,\n      processTypedMessageV3,\n      processTypedMessageV4,\n      processPersonalMessage,\n      processEncryptionPublicKey,\n      processDecryptMessage,\n    }) as JRPCMiddleware<unknown, unknown>,\n  ]);\n  return ethMiddleware;\n}\n\nexport function createChainSwitchMiddleware({ addChain, switchChain }: IChainSwitchHandlers): JRPCMiddleware<unknown, unknown> {\n  async function addNewChain(req: JRPCRequest<AddEthereumChainParameter[]>, res: JRPCResponse<unknown>): Promise<void> {\n    const chainParams = req.params?.length ? req.params[0] : undefined;\n    if (!chainParams) throw rpcErrors.invalidParams(\"Missing chain params\");\n    if (!chainParams.chainId) throw rpcErrors.invalidParams(\"Missing chainId in chainParams\");\n    if (!chainParams.rpcUrls || chainParams.rpcUrls.length === 0) throw rpcErrors.invalidParams(\"Missing rpcUrls in chainParams\");\n    if (!chainParams.nativeCurrency) throw rpcErrors.invalidParams(\"Missing nativeCurrency in chainParams\");\n\n    res.result = await addChain(chainParams);\n  }\n  async function updateChain(req: JRPCRequest<{ chainId: string }[]>, res: JRPCResponse<unknown>): Promise<void> {\n    const chainParams = req.params?.length ? req.params[0] : undefined;\n    if (!chainParams) throw rpcErrors.invalidParams(\"Missing chainId\");\n    res.result = await switchChain(chainParams);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_addEthereumChain: createAsyncMiddleware(addNewChain) as JRPCMiddleware<unknown, unknown>,\n    wallet_switchEthereumChain: createAsyncMiddleware(updateChain) as JRPCMiddleware<unknown, unknown>,\n  });\n}\n\n// #region account middlewares\nexport function createAccountMiddleware({ updatePrivatekey }: IAccountHandlers): JRPCMiddleware<unknown, unknown> {\n  async function updateAccount(req: JRPCRequest<{ privateKey: string }[]>, res: JRPCResponse<unknown>): Promise<void> {\n    const accountParams = req.params?.length ? req.params[0] : undefined;\n    if (!accountParams?.privateKey) throw rpcErrors.invalidParams(\"Missing privateKey\");\n    res.result = await updatePrivatekey(accountParams);\n  }\n\n  return createScaffoldMiddleware({\n    wallet_updateAccount: createAsyncMiddleware(updateAccount) as JRPCMiddleware<unknown, unknown>,\n  });\n}\n\n// #endregion account middlewares\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/base-controllers\");","import { createFetchMiddleware } from \"@toruslabs/base-controllers\";\nimport {\n  Block,\n  JRPCEngineEndCallback,\n  JRPCEngineNextCallback,\n  JRPCMiddleware,\n  JRPCRequest,\n  JRPCResponse,\n  mergeMiddleware,\n} from \"@toruslabs/openlogin-jrpc\";\nimport type { CustomChainConfig } from \"@web3auth/base\";\n\nexport function createChainIdMiddleware(chainId: string): JRPCMiddleware<unknown, string> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<string>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"eth_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createProviderConfigMiddleware(providerConfig: CustomChainConfig): JRPCMiddleware<unknown, CustomChainConfig> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<CustomChainConfig>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"eth_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createJsonRpcClient(providerConfig: CustomChainConfig): {\n  networkMiddleware: JRPCMiddleware<unknown, unknown>;\n  fetchMiddleware: JRPCMiddleware<string[], Block>;\n} {\n  const { chainId, rpcTarget } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({ rpcTarget });\n  const networkMiddleware = mergeMiddleware([\n    createChainIdMiddleware(chainId) as JRPCMiddleware<unknown, unknown>,\n    createProviderConfigMiddleware(providerConfig) as JRPCMiddleware<unknown, unknown>,\n    fetchMiddleware as JRPCMiddleware<unknown, unknown>,\n  ]);\n  return { networkMiddleware, fetchMiddleware };\n}\n","import { MessageTypes, TypedDataV1, TypedMessage } from \"@metamask/eth-sig-util\";\nimport { providerErrors, rpcErrors } from \"@metamask/rpc-errors\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport type { ISignClient, SessionTypes } from \"@walletconnect/types\";\nimport { getAccountsFromNamespaces, parseAccountId } from \"@walletconnect/utils\";\n\nimport { IProviderHandlers, MessageParams, TransactionParams, TypedMessageParams } from \"../../rpc/interfaces\";\n\nasync function getLastActiveSession(signClient: ISignClient): Promise<SessionTypes.Struct | null> {\n  if (signClient.session.length) {\n    const lastKeyIndex = signClient.session.keys.length - 1;\n    return signClient.session.get(signClient.session.keys[lastKeyIndex]);\n  }\n  return null;\n}\n\nexport async function sendJrpcRequest<T, U>(signClient: ISignClient, chainId: number, method: string, params: U): Promise<T> {\n  const session = await getLastActiveSession(signClient);\n  if (!session) {\n    throw providerErrors.disconnected();\n  }\n  return signClient.request<T>({\n    topic: session.topic,\n    chainId: `eip155:${chainId}`,\n    request: {\n      method,\n      params,\n    },\n  });\n}\n\nexport async function getAccounts(signClient: ISignClient): Promise<string[]> {\n  const session = await getLastActiveSession(signClient);\n  if (!session) {\n    throw providerErrors.disconnected();\n  }\n  const accounts = getAccountsFromNamespaces(session.namespaces);\n  if (accounts && accounts.length) {\n    return [\n      ...new Set(\n        accounts.map((add) => {\n          return parseAccountId(add).address;\n        })\n      ),\n    ];\n  }\n  throw new Error(\"Failed to get accounts\");\n}\n\nexport function getProviderHandlers({ connector, chainId }: { connector: ISignClient; chainId: number }): IProviderHandlers {\n  return {\n    getPrivateKey: async () => {\n      throw rpcErrors.methodNotSupported();\n    },\n    getAccounts: async (_: JRPCRequest<unknown>) => {\n      return getAccounts(connector);\n    },\n    processTransaction: async (txParams: TransactionParams, _: JRPCRequest<unknown>): Promise<string> => {\n      const methodRes = await sendJrpcRequest<string, TransactionParams[]>(connector, chainId, \"eth_sendTransaction\", [txParams]);\n      return methodRes;\n    },\n    processSignTransaction: async (txParams: TransactionParams, _: JRPCRequest<unknown>): Promise<string> => {\n      const methodRes = await sendJrpcRequest<string, TransactionParams[]>(connector, chainId, \"eth_signTransaction\", [txParams]);\n      return methodRes;\n    },\n    processEthSignMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const methodRes = await sendJrpcRequest<string, string[]>(connector, chainId, \"eth_sign\", [msgParams.from, msgParams.data]);\n      return methodRes;\n    },\n    processPersonalMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const methodRes = await sendJrpcRequest<string, string[]>(connector, chainId, \"personal_sign\", [msgParams.from, msgParams.data]);\n      return methodRes;\n    },\n    processTypedMessage: async (msgParams: MessageParams<TypedDataV1>, _: JRPCRequest<unknown>): Promise<string> => {\n      const methodRes = await sendJrpcRequest<string, unknown[]>(connector, chainId, \"eth_signTypedData\", [msgParams.data, msgParams.from]);\n      return methodRes;\n    },\n    processTypedMessageV3: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>): Promise<string> => {\n      const methodRes = await sendJrpcRequest<string, unknown[]>(connector, chainId, \"eth_signTypedData_v3\", [msgParams.from, msgParams.data]);\n      return methodRes;\n    },\n    processTypedMessageV4: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>): Promise<string> => {\n      const methodRes = await sendJrpcRequest<string, unknown[]>(connector, chainId, \"eth_signTypedData_v4\", [msgParams.from, msgParams.data]);\n      return methodRes;\n    },\n    processEncryptionPublicKey: async (_: string): Promise<string> => {\n      throw rpcErrors.methodNotSupported();\n    },\n    processDecryptMessage: (_: MessageParams<string>): string => {\n      throw rpcErrors.methodNotSupported();\n    },\n  };\n}\n","import { providerErrors } from \"@metamask/rpc-errors\";\nimport { JRPCEngine, JRPCMiddleware, providerFromEngine } from \"@toruslabs/openlogin-jrpc\";\nimport type { ISignClient, SignClientTypes } from \"@walletconnect/types\";\nimport { getAccountsFromNamespaces, getChainsFromNamespaces, parseAccountId, parseChainId } from \"@walletconnect/utils\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, getChainConfig, log, WalletLoginError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\n\nimport { createChainSwitchMiddleware, createEthMiddleware } from \"../../rpc/ethRpcMiddlewares\";\nimport { AddEthereumChainParameter, IChainSwitchHandlers } from \"../../rpc/interfaces\";\nimport { createJsonRpcClient } from \"../../rpc/jrpcClient\";\nimport { getAccounts, getProviderHandlers } from \"./walletConnectV2Utils\";\n\nexport interface WalletConnectV2ProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\n\nexport interface WalletConnectV2ProviderState extends BaseProviderState {\n  accounts: string[];\n}\n\nexport class WalletConnectV2Provider extends BaseProvider<BaseProviderConfig, WalletConnectV2ProviderState, ISignClient> {\n  private connector: ISignClient | null = null;\n\n  constructor({ config, state, connector }: { config: WalletConnectV2ProviderConfig; state?: BaseProviderState; connector?: ISignClient }) {\n    super({\n      config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.EIP155 }, skipLookupNetwork: !!config.skipLookupNetwork },\n      state: { ...(state || {}), chainId: \"loading\", accounts: [] },\n    });\n    this.connector = connector || null;\n  }\n\n  public static getProviderInstance = async (params: {\n    connector: ISignClient;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n    skipLookupNetwork: boolean;\n  }): Promise<WalletConnectV2Provider> => {\n    const providerFactory = new WalletConnectV2Provider({ config: { chainConfig: params.chainConfig, skipLookupNetwork: params.skipLookupNetwork } });\n    await providerFactory.setupProvider(params.connector);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.connector)\n      throw providerErrors.custom({ message: \"Connector is not initialized, pass wallet connect connector in constructor\", code: 4902 });\n    await this.setupProvider(this.connector);\n    return this._providerEngineProxy.request({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(connector: ISignClient): Promise<void> {\n    this.onConnectorStateUpdate(connector);\n    await this.setupEngine(connector);\n  }\n\n  public async switchChain({ chainId }: { chainId: string }): Promise<void> {\n    if (!this.connector)\n      throw providerErrors.custom({ message: \"Connector is not initialized, pass wallet connect connector in constructor\", code: 4902 });\n    const currentChainConfig = this.getChainConfig(chainId);\n    this.configure({ chainConfig: currentChainConfig });\n    await this.setupEngine(this.connector);\n    this.lookupNetwork(this.connector);\n  }\n\n  async addChain(chainConfig: CustomChainConfig): Promise<void> {\n    super.addChain(chainConfig);\n  }\n\n  // no need to implement this method in wallet connect v2.\n  protected async lookupNetwork(_: ISignClient): Promise<string> {\n    const newChainId = this.config.chainConfig.chainId;\n    this.update({ chainId: newChainId });\n    this.emit(\"chainChanged\", newChainId);\n    this.emit(\"connect\", { chainId: newChainId });\n    return this.config.chainConfig.chainId;\n  }\n\n  private async setupEngine(connector: ISignClient): Promise<void> {\n    const { chainId } = this.config.chainConfig;\n    const numChainId = parseInt(chainId, 16);\n    const providerHandlers = getProviderHandlers({ connector, chainId: numChainId });\n    const jrpcRes = await getAccounts(connector);\n\n    this.update({\n      accounts: jrpcRes || [],\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const chainSwitchMiddleware = this.getChainSwitchMiddleware();\n    const engine = new JRPCEngine();\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(ethMiddleware);\n    engine.push(chainSwitchMiddleware);\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n  }\n\n  private getChainSwitchMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const chainSwitchHandlers: IChainSwitchHandlers = {\n      addChain: async (params: AddEthereumChainParameter): Promise<void> => {\n        const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = params;\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.EIP155,\n          chainId,\n          ticker: nativeCurrency?.symbol || \"ETH\",\n          tickerName: nativeCurrency?.name || \"Ether\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: blockExplorerUrls?.[0] || \"\",\n          decimals: nativeCurrency?.decimals || 18,\n        });\n      },\n      switchChain: async (params: { chainId: string }): Promise<void> => {\n        const { chainId } = params;\n        await this.switchChain({ chainId });\n      },\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  private connectedTopic() {\n    if (!this.connector) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n    if (this.connector?.session?.length) {\n      // currently we are supporting only 1 active session\n      const lastKeyIndex = this.connector.session.keys.length - 1;\n      return this.connector.session.get(this.connector.session.keys[lastKeyIndex])?.topic;\n    }\n    return undefined;\n  }\n\n  private checkIfChainIdAllowed(chainId: string) {\n    if (!this.connector || !this.connectedTopic()) return false;\n    const sessionData = this.connector.session.get(this.connectedTopic());\n    const allChains = getChainsFromNamespaces(sessionData.namespaces);\n\n    let chainAllowed = false;\n    for (const chain of allChains) {\n      const parsedId = parseChainId(chain);\n      if (Number.parseInt(parsedId.reference, 10) === Number.parseInt(chainId, 10)) {\n        chainAllowed = true;\n        break;\n      }\n    }\n    return chainAllowed;\n  }\n\n  private checkIfAccountAllowed(address: string) {\n    if (!this.connector || !this.connectedTopic()) return false;\n    const sessionData = this.connector.session.get(this.connectedTopic());\n    const allAccounts = getAccountsFromNamespaces(sessionData.namespaces);\n    let accountAllowed = false;\n    for (const account of allAccounts) {\n      const parsedAccount = parseAccountId(account);\n      if (parsedAccount.address?.toLowerCase() === address?.toLowerCase()) {\n        accountAllowed = true;\n        break;\n      }\n    }\n    return accountAllowed;\n  }\n\n  private async onConnectorStateUpdate(connector: ISignClient) {\n    connector.events.on(\"session_event\", async (payload: SignClientTypes.EventArguments[\"session_event\"]) => {\n      log.debug(\"session_event data\", payload);\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Wallet connect connector is not connected\");\n      const { event } = payload.params;\n      const { name, data } = event || {};\n      // Check if accounts changed and trigger event\n      if (name === \"accountsChanged\" && data?.length && this.state.accounts[0] !== data[0] && this.checkIfAccountAllowed(data[0])) {\n        this.update({\n          accounts: data,\n        });\n        this.emit(\"accountsChanged\", data);\n      }\n\n      if (event.name === \"chainChanged\") {\n        const { chainId: connectedChainId, rpcUrl } = data;\n        const connectedHexChainId = `0x${connectedChainId.toString(16)}`;\n\n        if (!this.checkIfChainIdAllowed(connectedHexChainId)) return;\n        // Check if chainId changed and trigger event\n        if (connectedHexChainId && this.state.chainId !== connectedHexChainId) {\n          const maybeConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, connectedHexChainId) || {};\n          // Handle rpcUrl update\n          this.configure({\n            chainConfig: { ...maybeConfig, chainId: connectedHexChainId, rpcTarget: rpcUrl, chainNamespace: CHAIN_NAMESPACES.EIP155 },\n          });\n          await this.setupEngine(connector);\n        }\n      }\n    });\n  }\n}\n","export * from \"./WalletConnectV2Provider\";\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@ethereumjs/tx\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@ethereumjs/util\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@metamask/eth-sig-util\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/http-helpers\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"assert\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"jsonschema\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bignumber.js\");","import { stripHexPrefix } from \"@ethereumjs/util\";\nimport BigNumber from \"bignumber.js\";\n\ntype DenominationType = \"WEI\" | \"GWEI\" | \"ETH\";\ntype NumericBaseType = \"hex\" | \"dec\";\n\ntype ConverterInput = {\n  value: string | BigNumber;\n  fromNumericBase: NumericBaseType;\n  fromDenomination?: DenominationType;\n  toNumericBase?: NumericBaseType;\n  toDenomination?: DenominationType;\n  numberOfDecimals?: number;\n};\n// Big Number Constants\nconst BIG_NUMBER_WEI_MULTIPLIER = new BigNumber(\"1e18\");\nconst BIG_NUMBER_GWEI_MULTIPLIER = new BigNumber(\"1e9\");\nconst BIG_NUMBER_ETH_MULTIPLIER = new BigNumber(\"1\");\n\n// Setter Maps\nconst toBigNumber: Record<NumericBaseType, (n: string | BigNumber) => BigNumber> = {\n  hex: (n: string | BigNumber) => (typeof n === \"string\" ? new BigNumber(stripHexPrefix(n), 16) : new BigNumber(n, 16)),\n  dec: (n: string | BigNumber) => new BigNumber(n, 10),\n};\nconst toNormalizedDenomination: Record<string, (n: BigNumber) => BigNumber> = {\n  WEI: (bigNumber) => bigNumber.div(BIG_NUMBER_WEI_MULTIPLIER),\n  GWEI: (bigNumber) => bigNumber.div(BIG_NUMBER_GWEI_MULTIPLIER),\n  ETH: (bigNumber) => bigNumber.div(BIG_NUMBER_ETH_MULTIPLIER),\n};\nconst toSpecifiedDenomination: Record<string, (n: BigNumber) => BigNumber> = {\n  WEI: (bigNumber) => bigNumber.times(BIG_NUMBER_WEI_MULTIPLIER).dp(0, BigNumber.ROUND_HALF_UP),\n  GWEI: (bigNumber) => bigNumber.times(BIG_NUMBER_GWEI_MULTIPLIER).dp(9, BigNumber.ROUND_HALF_UP),\n  ETH: (bigNumber) => bigNumber.times(BIG_NUMBER_ETH_MULTIPLIER).dp(9, BigNumber.ROUND_HALF_UP),\n};\nconst baseChange: Record<string, (n: BigNumber) => string> = {\n  hex: (n) => n.toString(16),\n  dec: (n) => new BigNumber(n).toString(10),\n};\n\nconst converter = (params: ConverterInput): string | BigNumber => {\n  const { value, fromNumericBase, fromDenomination, toNumericBase, toDenomination, numberOfDecimals } = params;\n  let convertedValue: string | BigNumber = toBigNumber[fromNumericBase](value);\n\n  if (fromDenomination) {\n    convertedValue = toNormalizedDenomination[fromDenomination](convertedValue as BigNumber);\n  }\n\n  if (toDenomination) {\n    convertedValue = toSpecifiedDenomination[toDenomination](convertedValue as BigNumber);\n  }\n\n  if (numberOfDecimals) {\n    convertedValue = (convertedValue as BigNumber).dp(numberOfDecimals, BigNumber.ROUND_HALF_DOWN);\n  }\n\n  if (toNumericBase) {\n    convertedValue = baseChange[toNumericBase](convertedValue);\n  }\n  return convertedValue;\n};\n\nconst conversionUtil = (\n  value: string | BigNumber,\n  { fromNumericBase = \"hex\", toNumericBase, fromDenomination, toDenomination, numberOfDecimals }: Partial<ConverterInput>\n): BigNumber | string => {\n  return converter({\n    fromNumericBase,\n    toNumericBase,\n    fromDenomination,\n    toDenomination,\n    numberOfDecimals,\n    value: value || \"0\",\n  });\n};\n\nfunction decGWEIToHexWEI(decGWEI: string | BigNumber): string {\n  return conversionUtil(decGWEI, {\n    fromNumericBase: \"dec\",\n    toNumericBase: \"hex\",\n    fromDenomination: \"GWEI\",\n    toDenomination: \"WEI\",\n  }) as string;\n}\n\nfunction hexWEIToDecGWEI(decGWEI: string | BigNumber): string | BigNumber {\n  return conversionUtil(decGWEI, {\n    fromNumericBase: \"hex\",\n    toNumericBase: \"dec\",\n    fromDenomination: \"WEI\",\n    toDenomination: \"GWEI\",\n  }) as string;\n}\n\nexport { conversionUtil, decGWEIToHexWEI, hexWEIToDecGWEI };\n","import { isValidAddress } from \"@ethereumjs/util\";\nimport {\n  MessageTypeProperty,\n  SignTypedDataVersion,\n  TYPED_MESSAGE_SCHEMA,\n  TypedDataV1Field,\n  TypedMessage,\n  typedSignatureHash,\n} from \"@metamask/eth-sig-util\";\nimport { rpcErrors } from \"@metamask/rpc-errors\";\nimport { get } from \"@toruslabs/http-helpers\";\nimport { isHexStrict } from \"@web3auth/base\";\nimport assert from \"assert\";\nimport { BigNumber } from \"bignumber.js\";\nimport jsonschema from \"jsonschema\";\n\nimport { TypedMessageParams } from \"../../../rpc/interfaces\";\nimport { decGWEIToHexWEI, hexWEIToDecGWEI } from \"../../converter\";\nimport { EIP1159GasData, EthereumGasFeeEstimates, LegacyGasData } from \"./interfaces\";\n\nexport function normalizeGWEIDecimalNumbers(n: string | BigNumber): string {\n  const numberAsWEIHex = decGWEIToHexWEI(n);\n  const numberAsGWEI = hexWEIToDecGWEI(numberAsWEIHex).toString();\n  return numberAsGWEI;\n}\n\nexport async function fetchEip1159GasEstimates(url: string): Promise<EthereumGasFeeEstimates> {\n  const estimates = await get<EIP1159GasData>(url);\n  const normalizedEstimates: EthereumGasFeeEstimates = {\n    ...estimates,\n    estimatedBaseFee: normalizeGWEIDecimalNumbers(estimates.estimatedBaseFee),\n    low: {\n      ...estimates.low,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.low.suggestedMaxFeePerGas),\n    },\n    medium: {\n      ...estimates.medium,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.medium.suggestedMaxFeePerGas),\n    },\n    high: {\n      ...estimates.high,\n      suggestedMaxPriorityFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxPriorityFeePerGas),\n      suggestedMaxFeePerGas: normalizeGWEIDecimalNumbers(estimates.high.suggestedMaxFeePerGas),\n    },\n  };\n  return normalizedEstimates;\n}\n\n/**\n * Hit the legacy MetaSwaps gasPrices estimate api and return the low, medium\n * high values from that API.\n */\nexport async function fetchLegacyGasPriceEstimates(url: string): Promise<LegacyGasData> {\n  const result = await get<{\n    SafeGasPrice: string;\n    ProposeGasPrice: string;\n    FastGasPrice: string;\n  }>(url, {\n    referrer: url,\n    referrerPolicy: \"no-referrer-when-downgrade\",\n    method: \"GET\",\n    mode: \"cors\",\n  });\n  return {\n    low: result.SafeGasPrice,\n    medium: result.ProposeGasPrice,\n    high: result.FastGasPrice,\n  };\n}\n\nexport const validateTypedMessageParams = (parameters: TypedMessageParams<unknown>, activeChainId: number) => {\n  try {\n    assert.ok(parameters && typeof parameters === \"object\", \"Params must be an object.\");\n    assert.ok(\"data\" in parameters, 'Params must include a \"data\" field.');\n    assert.ok(\"from\" in parameters, 'Params must include a \"from\" field.');\n    assert.ok(\n      typeof parameters.from === \"string\" && isValidAddress(parameters.from),\n      '\"from\" field must be a valid, lowercase, hexadecimal Ethereum address string.'\n    );\n    let data: unknown = null;\n    let chainId = null;\n    switch ((parameters as TypedMessageParams<unknown>).version) {\n      case SignTypedDataVersion.V1:\n        if (typeof parameters.data === \"string\") {\n          assert.doesNotThrow(() => {\n            data = JSON.parse(parameters.data as string);\n          }, '\"data\" must be a valid JSON string.');\n        } else {\n          // for backward compatiblity we validate for both string and object type.\n          data = parameters.data;\n        }\n        assert.ok(Array.isArray(data as unknown), \"params.data must be an array.\");\n        assert.doesNotThrow(() => {\n          typedSignatureHash(data as TypedDataV1Field[]);\n        }, \"Signing data must be valid EIP-712 typed data.\");\n        break;\n      case SignTypedDataVersion.V3:\n      case SignTypedDataVersion.V4: {\n        if (typeof parameters.data === \"string\") {\n          assert.doesNotThrow(() => {\n            data = JSON.parse(parameters.data as string);\n          }, '\"data\" must be a valid JSON string.');\n        } else {\n          // for backward compatiblity we validate for both string and object type.\n          data = parameters.data;\n        }\n        const typedData = data as TypedMessage<{\n          EIP712Domain: MessageTypeProperty[];\n        }>;\n\n        assert.ok(typedData.primaryType in typedData.types, `Primary type of \"${typedData.primaryType}\" has no type definition.`);\n        const validation = jsonschema.validate(typedData, TYPED_MESSAGE_SCHEMA.properties);\n        assert.strictEqual(validation.errors.length, 0, \"Signing data must conform to EIP-712 schema. See https://git.io/fNtcx.\");\n        chainId = typedData.domain?.chainId;\n        if (chainId) {\n          assert.ok(!Number.isNaN(activeChainId), `Cannot sign messages for chainId \"${chainId}\", because Web3Auth is switching networks.`);\n          if (typeof chainId === \"string\") {\n            chainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n          }\n          assert.strictEqual(chainId, activeChainId, `Provided chainId \"${chainId}\" must match the active chainId \"${activeChainId}\"`);\n        }\n        break;\n      }\n      default:\n        assert.fail(`Unknown typed data version \"${(parameters as TypedMessageParams<unknown>).version}\"`);\n    }\n  } catch (error) {\n    throw rpcErrors.invalidInput({\n      message: (error as Error)?.message,\n    });\n  }\n};\n","import { TransactionFactory } from \"@ethereumjs/tx\";\nimport { privateToAddress, stripHexPrefix } from \"@ethereumjs/util\";\nimport {\n  decrypt,\n  EthEncryptedData,\n  getEncryptionPublicKey,\n  MessageTypes,\n  personalSign,\n  signTypedData,\n  SignTypedDataVersion,\n  TypedDataV1,\n  TypedMessage,\n} from \"@metamask/eth-sig-util\";\nimport { providerErrors } from \"@metamask/rpc-errors\";\nimport { signMessage } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { isHexStrict, log, SafeEventEmitterProvider } from \"@web3auth/base\";\n\nimport { IProviderHandlers, MessageParams, TransactionParams, TypedMessageParams } from \"../../rpc/interfaces\";\nimport { TransactionFormatter } from \"./TransactionFormatter\";\nimport { validateTypedMessageParams } from \"./TransactionFormatter/utils\";\n\nasync function signTx(txParams: TransactionParams & { gas?: string }, privKey: string, txFormatter: TransactionFormatter): Promise<Buffer> {\n  const finalTxParams = await txFormatter.formatTransaction(txParams);\n  const common = await txFormatter.getCommonConfiguration();\n  const unsignedEthTx = TransactionFactory.fromTxData(finalTxParams, {\n    common,\n  });\n  const signedTx = unsignedEthTx.sign(Buffer.from(privKey, \"hex\")).serialize();\n  return Buffer.from(signedTx);\n}\n\nexport function getProviderHandlers({\n  txFormatter,\n  privKey,\n  getProviderEngineProxy,\n}: {\n  txFormatter: TransactionFormatter;\n  privKey: string;\n  getProviderEngineProxy: () => SafeEventEmitterProvider | null;\n}): IProviderHandlers {\n  return {\n    getAccounts: async (_: JRPCRequest<unknown>) => [`0x${Buffer.from(privateToAddress(Buffer.from(privKey, \"hex\"))).toString(\"hex\")}`],\n    getPrivateKey: async (_: JRPCRequest<unknown>) => privKey,\n    processTransaction: async (txParams: TransactionParams & { gas?: string }, _: JRPCRequest<unknown>): Promise<string> => {\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw providerErrors.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      if (txParams.input && !txParams.data) txParams.data = txParams.input;\n      const signedTx = await signTx(txParams, privKey, txFormatter);\n      const txHash = await providerEngineProxy.request<[string], string>({\n        method: \"eth_sendRawTransaction\",\n        params: [\"0x\".concat(signedTx.toString(\"hex\"))],\n      });\n      return txHash;\n    },\n    processSignTransaction: async (txParams: TransactionParams & { gas?: string }, _: JRPCRequest<unknown>): Promise<string> => {\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw providerErrors.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      if (txParams.input && !txParams.data) txParams.data = txParams.input;\n      const signedTx = await signTx(txParams, privKey, txFormatter);\n      return `0x${signedTx.toString(\"hex\")}`;\n    },\n    processEthSignMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const rawMessageSig = signMessage(privKey, msgParams.data);\n      return rawMessageSig;\n    },\n    processPersonalMessage: async (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): Promise<string> => {\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const sig = personalSign({ privateKey: privKeyBuffer, data: msgParams.data });\n      return sig;\n    },\n    processTypedMessage: async (msgParams: MessageParams<TypedDataV1>, _: JRPCRequest<unknown>): Promise<string> => {\n      log.debug(\"processTypedMessage\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw providerErrors.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const chainId = await providerEngineProxy.request<never, string>({ method: \"eth_chainId\" });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n      const params = {\n        ...msgParams,\n        version: SignTypedDataVersion.V1,\n      };\n      validateTypedMessageParams(params, finalChainId);\n      const data = typeof params.data === \"string\" ? JSON.parse(params.data) : params.data;\n      const sig = signTypedData({ privateKey: privKeyBuffer, data, version: SignTypedDataVersion.V1 });\n      return sig;\n    },\n    processTypedMessageV3: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>, _: JRPCRequest<unknown>): Promise<string> => {\n      log.debug(\"processTypedMessageV3\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw providerErrors.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const chainId = await providerEngineProxy.request<never, string>({ method: \"eth_chainId\" });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n      validateTypedMessageParams(msgParams, finalChainId);\n      const data = typeof msgParams.data === \"string\" ? JSON.parse(msgParams.data) : msgParams.data;\n      const sig = signTypedData({ privateKey: privKeyBuffer, data, version: SignTypedDataVersion.V3 });\n      return sig;\n    },\n    processTypedMessageV4: async (msgParams: TypedMessageParams<TypedMessage<MessageTypes>>, _: JRPCRequest<unknown>): Promise<string> => {\n      log.debug(\"processTypedMessageV4\", msgParams);\n      const privKeyBuffer = Buffer.from(privKey, \"hex\");\n      const providerEngineProxy = getProviderEngineProxy();\n      if (!providerEngineProxy)\n        throw providerErrors.custom({\n          message: \"Provider is not initialized\",\n          code: 4902,\n        });\n      const chainId = await providerEngineProxy.request<never, string>({ method: \"eth_chainId\" });\n      const finalChainId = Number.parseInt(chainId, isHexStrict(chainId) ? 16 : 10);\n      validateTypedMessageParams(msgParams, finalChainId);\n      const data = typeof msgParams.data === \"string\" ? JSON.parse(msgParams.data) : msgParams.data;\n      const sig = signTypedData({ privateKey: privKeyBuffer, data, version: SignTypedDataVersion.V4 });\n      return sig;\n    },\n    processEncryptionPublicKey: async (address: string, _: JRPCRequest<unknown>): Promise<string> => {\n      log.info(\"processEncryptionPublicKey\", address);\n      return getEncryptionPublicKey(privKey);\n    },\n    processDecryptMessage: (msgParams: MessageParams<string>, _: JRPCRequest<unknown>): string => {\n      log.info(\"processDecryptMessage\", msgParams);\n      const stripped = stripHexPrefix(msgParams.data);\n      const buff = Buffer.from(stripped, \"hex\");\n      const decrypted = decrypt({ encryptedData: JSON.parse(buff.toString(\"utf8\")) as EthEncryptedData, privateKey: privKey });\n      return decrypted;\n    },\n  };\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@ethereumjs/common\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"bn.js\");","import { addHexPrefix, stripHexPrefix } from \"@ethereumjs/util\";\nimport { BigNumber } from \"bignumber.js\";\nimport BN from \"bn.js\";\n\nexport function bnLessThan(a: string | number, b: string | number) {\n  if (a === null || a === undefined || b === null || b === undefined) {\n    return null;\n  }\n  return new BigNumber(a, 10).lt(b, 10);\n}\n\nexport function bnToHex(inputBn: BN) {\n  return addHexPrefix(inputBn.toString(16));\n}\n\nexport function hexToBn(inputHex: string): BN {\n  if (BN.isBN(inputHex)) return inputHex;\n  return new BN(stripHexPrefix(inputHex), 16);\n}\n\nexport function BnMultiplyByFraction(targetBN: BN, numerator: number | string, denominator: number | string): BN {\n  const numberBN = new BN(numerator);\n  const denomBN = new BN(denominator);\n  return targetBN.mul(numberBN).div(denomBN);\n}\n","export const LegacyGasAPIEndpoint = \"https://gas-api.metaswap.codefi.network/networks/<chain_id>/gasPrices\";\nexport const EIP1559APIEndpoint = \"https://gas-api.metaswap.codefi.network/networks/<chain_id>/suggestedGasFees\";\nexport const TRANSACTION_ENVELOPE_TYPES = {\n  LEGACY: \"0x0\",\n  ACCESS_LIST: \"0x1\",\n  FEE_MARKET: \"0x2\",\n};\n\nexport const TRANSACTION_TYPES = {\n  SENT_ETHER: \"sentEther\",\n  CONTRACT_INTERACTION: \"contractInteraction\",\n  DEPLOY_CONTRACT: \"contractDeployment\",\n  STANDARD_TRANSACTION: \"transaction\",\n};\n\nexport const GAS_ESTIMATE_TYPES = {\n  FEE_MARKET: \"fee-market\",\n  LEGACY: \"legacy\",\n  ETH_GASPRICE: \"eth_gasPrice\",\n  NONE: \"none\",\n};\n","import { Common, Hardfork } from \"@ethereumjs/common\";\nimport { addHexPrefix, AddressLike, stripHexPrefix } from \"@ethereumjs/util\";\nimport { Block } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, log, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport BigNumber from \"bignumber.js\";\n\nimport { TransactionParams } from \"../../../rpc/interfaces\";\nimport { decGWEIToHexWEI, hexWEIToDecGWEI } from \"../../converter\";\nimport { bnLessThan, BnMultiplyByFraction, bnToHex, hexToBn } from \"../../utils\";\nimport { EIP1559APIEndpoint, GAS_ESTIMATE_TYPES, LegacyGasAPIEndpoint, TRANSACTION_ENVELOPE_TYPES, TRANSACTION_TYPES } from \"./constants\";\nimport { EIP1159GasData, EthereumGasFeeEstimates, FallbackGasData, FeeHistoryResponse, GasData, LegacyGasData, TxType } from \"./interfaces\";\nimport { fetchEip1159GasEstimates, fetchLegacyGasPriceEstimates } from \"./utils\";\n\nexport class TransactionFormatter {\n  // https://0x.org/docs/introduction/0x-cheat-sheet#swap-api-endpoints\n  readonly API_SUPPORTED_CHAINIDS = new Set([\"0x1\", \"0x5\", \"0x13881\", \"0xa4b1\", \"0xa86a\", \"0x2105\", \"0x38\", \"0xfa\", \"0xa\", \"0x89\"]);\n\n  private chainConfig: CustomChainConfig | null = null;\n\n  private getProviderEngineProxy: () => SafeEventEmitterProvider;\n\n  private isEIP1559Compatible = false;\n\n  constructor({ getProviderEngineProxy }: { getProviderEngineProxy: () => SafeEventEmitterProvider }) {\n    this.getProviderEngineProxy = getProviderEngineProxy;\n  }\n\n  get providerProxy() {\n    return this.getProviderEngineProxy();\n  }\n\n  async init(): Promise<void> {\n    this.chainConfig = (await this.providerProxy.request<never, CustomChainConfig>({ method: \"eth_provider_config\" })) as CustomChainConfig;\n    this.isEIP1559Compatible = await this.getEIP1559Compatibility();\n  }\n\n  async getCommonConfiguration(): Promise<Common> {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n    const { displayName: name, chainId } = this.chainConfig;\n    const hardfork = this.isEIP1559Compatible ? Hardfork.Paris : Hardfork.Berlin;\n    const customChainParams = {\n      name,\n      chainId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n      networkId: chainId === \"loading\" ? 0 : Number.parseInt(chainId, 16),\n      defaultHardfork: hardfork,\n    };\n    return Common.custom(customChainParams);\n  }\n\n  async formatTransaction(txParams: TransactionParams & { gas?: string }): Promise<TransactionParams & { gas?: string }> {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n\n    const clonedTxParams = {\n      ...txParams,\n    };\n\n    if (clonedTxParams.nonce === undefined)\n      clonedTxParams.nonce = (await this.providerProxy.request<[string, string], number>({\n        method: \"eth_getTransactionCount\",\n        params: [txParams.from, \"latest\"],\n      })) as number;\n\n    if (!this.isEIP1559Compatible && clonedTxParams.gasPrice) {\n      if (clonedTxParams.maxFeePerGas) delete clonedTxParams.maxFeePerGas;\n      if (clonedTxParams.maxPriorityFeePerGas) delete clonedTxParams.maxPriorityFeePerGas;\n      // if user provides gas Limit, we should use it instead\n      // if gas is not provided explicitly, estimate it.\n      if (!clonedTxParams.gasLimit) {\n        if (!clonedTxParams.gas) {\n          const defaultGasLimit = await this.getDefaultGasLimit(clonedTxParams);\n          if (defaultGasLimit) {\n            clonedTxParams.gasLimit = defaultGasLimit;\n          }\n        } else {\n          clonedTxParams.gasLimit = clonedTxParams.gas;\n        }\n      }\n      return clonedTxParams;\n    }\n\n    if (!clonedTxParams.gasLimit) {\n      if (!clonedTxParams.gas) {\n        const defaultGasLimit = await this.getDefaultGasLimit(clonedTxParams);\n        if (defaultGasLimit) {\n          clonedTxParams.gasLimit = defaultGasLimit;\n        }\n      } else {\n        clonedTxParams.gasLimit = clonedTxParams.gas;\n      }\n    }\n\n    const {\n      gasPrice: defaultGasPrice,\n      maxFeePerGas: defaultMaxFeePerGas,\n      maxPriorityFeePerGas: defaultMaxPriorityFeePerGas,\n    } = await this.getDefaultGasFees(clonedTxParams);\n\n    if (this.isEIP1559Compatible) {\n      // If the dapp has suggested a gas price, but no maxFeePerGas or maxPriorityFeePerGas\n      //  then we set maxFeePerGas and maxPriorityFeePerGas to the suggested gasPrice.\n      if (clonedTxParams.gasPrice && !clonedTxParams.maxFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n        clonedTxParams.maxFeePerGas = clonedTxParams.gasPrice;\n\n        clonedTxParams.maxPriorityFeePerGas = bnLessThan(\n          typeof defaultMaxPriorityFeePerGas === \"string\" ? stripHexPrefix(defaultMaxPriorityFeePerGas) : defaultMaxPriorityFeePerGas,\n          typeof clonedTxParams.gasPrice === \"string\" ? stripHexPrefix(clonedTxParams.gasPrice) : clonedTxParams.gasPrice\n        )\n          ? defaultMaxPriorityFeePerGas\n          : clonedTxParams.gasPrice;\n      } else {\n        if (defaultMaxFeePerGas && !clonedTxParams.maxFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxFeePerGas, then we set maxFeePerGas\n          // with the one returned by the gasFeeController, if that is available.\n          clonedTxParams.maxFeePerGas = defaultMaxFeePerGas;\n        }\n\n        if (defaultMaxPriorityFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, then we set maxPriorityFeePerGas\n          // with the one returned by the gasFeeController, if that is available.\n          clonedTxParams.maxPriorityFeePerGas = defaultMaxPriorityFeePerGas;\n        }\n\n        if (defaultGasPrice && !clonedTxParams.maxFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxFeePerGas, and no maxFeePerGas is available\n          // then we set maxFeePerGas to the defaultGasPrice, assuming it is\n          // available.\n          clonedTxParams.maxFeePerGas = defaultGasPrice;\n        }\n\n        if (clonedTxParams.maxFeePerGas && !clonedTxParams.maxPriorityFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, and no maxPriorityFeePerGas is\n          // available  then we set maxPriorityFeePerGas to\n          // clonedTxParams.maxFeePerGas, which will either be the gasPrice from the controller, the maxFeePerGas\n          // set by the dapp, or the maxFeePerGas from the controller.\n          clonedTxParams.maxPriorityFeePerGas = clonedTxParams.maxFeePerGas;\n        }\n      }\n\n      // We remove the gasPrice param entirely when on an eip1559 compatible network\n\n      delete clonedTxParams.gasPrice;\n    } else {\n      // We ensure that maxFeePerGas and maxPriorityFeePerGas are not in the transaction params\n      // when not on a EIP1559 compatible network\n\n      delete clonedTxParams.maxPriorityFeePerGas;\n      delete clonedTxParams.maxFeePerGas;\n    }\n\n    // If we have gotten to this point, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas are\n    // set on txParams, it means that either we are on a non-EIP1559 network and the dapp didn't suggest\n    // a gas price, or we are on an EIP1559 network, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas\n    // were available from either the dapp or the network.\n    if (defaultGasPrice && !clonedTxParams.gasPrice && !clonedTxParams.maxPriorityFeePerGas && !clonedTxParams.maxFeePerGas) {\n      clonedTxParams.gasPrice = defaultGasPrice as never;\n    }\n\n    clonedTxParams.type = this.isEIP1559Compatible ? TRANSACTION_ENVELOPE_TYPES.FEE_MARKET : TRANSACTION_ENVELOPE_TYPES.LEGACY;\n    clonedTxParams.chainId = this.chainConfig.chainId;\n    return clonedTxParams;\n  }\n\n  private async fetchEthGasPriceEstimate(): Promise<{ gasPrice: string }> {\n    const gasPrice = (await this.providerProxy.request<[], string>({ method: \"eth_gasPrice\", params: [] })) as string;\n    return {\n      gasPrice: hexWEIToDecGWEI(gasPrice).toString(),\n    };\n  }\n\n  private async fetchGasEstimatesViaEthFeeHistory(): Promise<EthereumGasFeeEstimates> {\n    const noOfBlocks = 10;\n    const newestBlock = \"latest\";\n    // get the 10, 50 and 95th percentile of the tip fees from the last 10 blocks\n    const percentileValues = [10, 50, 95];\n    const feeHistory = await this.providerProxy.request<[number, string, number[]], FeeHistoryResponse>({\n      method: \"eth_feeHistory\",\n      params: [noOfBlocks, newestBlock, percentileValues],\n    });\n\n    // this is in hex wei\n    const finalBaseFeePerGas = feeHistory.baseFeePerGas[feeHistory.baseFeePerGas.length - 1];\n    // this is in hex wei\n    const priorityFeeCalcs = feeHistory.reward.reduce(\n      (acc, curr) => {\n        return {\n          slow: acc.slow.plus(new BigNumber(curr[0], 16)),\n          average: acc.average.plus(new BigNumber(curr[1], 16)),\n          fast: acc.fast.plus(new BigNumber(curr[2], 16)),\n        };\n      },\n      { slow: new BigNumber(0), average: new BigNumber(0), fast: new BigNumber(0) }\n    );\n    return {\n      estimatedBaseFee: hexWEIToDecGWEI(finalBaseFeePerGas).toString(),\n      high: {\n        maxWaitTimeEstimate: 30_000,\n        minWaitTimeEstimate: 15_000,\n        suggestedMaxFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.fast.plus(finalBaseFeePerGas).toString(16)).toString(),\n        suggestedMaxPriorityFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.fast.toString(16)).toString(),\n      },\n      medium: {\n        maxWaitTimeEstimate: 45_000,\n        minWaitTimeEstimate: 15_000,\n        suggestedMaxFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.average.plus(finalBaseFeePerGas).toString(16)).toString(),\n        suggestedMaxPriorityFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.average.toString(16)).toString(),\n      },\n      low: {\n        maxWaitTimeEstimate: 60_000,\n        minWaitTimeEstimate: 15_000,\n        suggestedMaxFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.slow.plus(finalBaseFeePerGas).toString(16)).toString(),\n        suggestedMaxPriorityFeePerGas: hexWEIToDecGWEI(priorityFeeCalcs.slow.toString(16)).toString(),\n      },\n    };\n  }\n\n  private async getEIP1559Compatibility(): Promise<boolean> {\n    const latestBlock = await this.providerProxy.request<[string, boolean], Block>({ method: \"eth_getBlockByNumber\", params: [\"latest\", false] });\n    const supportsEIP1559 = latestBlock && latestBlock.baseFeePerGas !== undefined;\n\n    return !!supportsEIP1559;\n  }\n\n  private async fetchGasFeeEstimateData(): Promise<GasData> {\n    if (!this.chainConfig) throw new Error(\"Chain config not initialized\");\n    const isLegacyGasAPICompatible = this.chainConfig.chainId === \"0x1\";\n\n    const chainId = Number.parseInt(this.chainConfig.chainId, 16);\n\n    let gasData: GasData;\n\n    try {\n      if (this.isEIP1559Compatible) {\n        let estimates: EthereumGasFeeEstimates;\n        try {\n          if (this.API_SUPPORTED_CHAINIDS.has(this.chainConfig.chainId)) {\n            estimates = await fetchEip1159GasEstimates(EIP1559APIEndpoint.replace(\"<chain_id>\", `${chainId}`));\n          } else {\n            throw new Error(\"Chain id not supported by api\");\n          }\n        } catch (error) {\n          estimates = await this.fetchGasEstimatesViaEthFeeHistory();\n        }\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.FEE_MARKET,\n        };\n      } else if (isLegacyGasAPICompatible) {\n        const estimates = await fetchLegacyGasPriceEstimates(LegacyGasAPIEndpoint.replace(\"<chain_id>\", `${chainId}`));\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.LEGACY,\n        };\n      } else {\n        throw new Error(\"Main gas fee/price estimation failed. Use fallback\");\n      }\n    } catch (e: unknown) {\n      try {\n        const estimates = await this.fetchEthGasPriceEstimate();\n        gasData = {\n          gasFeeEstimates: estimates,\n          gasEstimateType: GAS_ESTIMATE_TYPES.ETH_GASPRICE,\n        };\n      } catch (error: unknown) {\n        throw new Error(`Gas fee/price estimation failed. Message: ${(error as Error).message}`);\n      }\n    }\n    return gasData;\n  }\n\n  private async getDefaultGasFees(\n    txParams: TransactionParams & { gas?: string }\n  ): Promise<{ gasPrice?: string; maxFeePerGas?: string; maxPriorityFeePerGas?: string }> {\n    if ((!this.isEIP1559Compatible && txParams.gasPrice) || (this.isEIP1559Compatible && txParams.maxFeePerGas && txParams.maxPriorityFeePerGas)) {\n      return {};\n    }\n\n    try {\n      const { gasFeeEstimates, gasEstimateType } = await this.fetchGasFeeEstimateData();\n      if (this.isEIP1559Compatible && gasEstimateType === GAS_ESTIMATE_TYPES.FEE_MARKET) {\n        const { medium: { suggestedMaxPriorityFeePerGas, suggestedMaxFeePerGas } = {} } = gasFeeEstimates as EIP1159GasData;\n\n        if (suggestedMaxPriorityFeePerGas && suggestedMaxFeePerGas) {\n          return {\n            maxFeePerGas: addHexPrefix(decGWEIToHexWEI(suggestedMaxFeePerGas)),\n            maxPriorityFeePerGas: addHexPrefix(decGWEIToHexWEI(suggestedMaxPriorityFeePerGas)),\n          };\n        }\n      } else if (gasEstimateType === GAS_ESTIMATE_TYPES.LEGACY) {\n        // The LEGACY type includes low, medium and high estimates of\n        // gas price values.\n        return {\n          gasPrice: addHexPrefix(decGWEIToHexWEI((gasFeeEstimates as LegacyGasData).medium)),\n        };\n      } else if (gasEstimateType === GAS_ESTIMATE_TYPES.ETH_GASPRICE) {\n        // The ETH_GASPRICE type just includes a single gas price property,\n        // which we can assume was retrieved from eth_gasPrice\n        return {\n          gasPrice: addHexPrefix(decGWEIToHexWEI((gasFeeEstimates as FallbackGasData).gasPrice)),\n        };\n      }\n    } catch (error) {\n      log.error(error);\n    }\n\n    const { gasPrice } = await this.fetchEthGasPriceEstimate();\n\n    return { gasPrice: addHexPrefix(decGWEIToHexWEI(gasPrice)) };\n  }\n\n  private async estimateTxGas(txMeta: TransactionParams): Promise<string> {\n    const txParams = { ...txMeta };\n\n    // `eth_estimateGas` can fail if the user has insufficient balance for the\n    // value being sent, or for the gas cost. We don't want to check their\n    // balance here, we just want the gas estimate. The gas price is removed\n    // to skip those balance checks. We check balance elsewhere. We also delete\n    // maxFeePerGas and maxPriorityFeePerGas to support EIP-1559 txs.\n    delete txParams.gasPrice;\n    delete txParams.maxFeePerGas;\n    delete txParams.maxPriorityFeePerGas;\n    const gas = (await this.providerProxy.request<[TransactionParams], string>({ method: \"eth_estimateGas\", params: [txParams] })) as string;\n    return gas;\n  }\n\n  private async analyzeGasUsage(txMeta: TransactionParams): Promise<{\n    blockGasLimit: string;\n    estimatedGasHex: string;\n  }> {\n    const block = (await this.providerProxy.request<[string, boolean], Block>({\n      method: \"eth_getBlockByNumber\",\n      params: [\"latest\", false],\n    })) as Block;\n    // fallback to block gasLimit\n    const blockGasLimitBN = hexToBn(block.gasLimit as string);\n    const saferGasLimitBN = BnMultiplyByFraction(blockGasLimitBN, 19, 20);\n    let estimatedGasHex = bnToHex(saferGasLimitBN);\n\n    try {\n      estimatedGasHex = await this.estimateTxGas(txMeta);\n    } catch (error: unknown) {\n      log.warn(error);\n    }\n    return { blockGasLimit: block.gasLimit as string, estimatedGasHex };\n  }\n\n  private addGasBuffer(initialGasLimitHex: string, blockGasLimitHex: string, multiplier = 1.5): string {\n    const initialGasLimitBn = hexToBn(initialGasLimitHex);\n    const blockGasLimitBn = hexToBn(blockGasLimitHex);\n    const upperGasLimitBn = blockGasLimitBn.muln(0.9);\n    const bufferedGasLimitBn = initialGasLimitBn.muln(multiplier);\n\n    // if initialGasLimit is above blockGasLimit, dont modify it\n    if (initialGasLimitBn.gt(upperGasLimitBn)) return bnToHex(initialGasLimitBn);\n    // if bufferedGasLimit is below blockGasLimit, use bufferedGasLimit\n    if (bufferedGasLimitBn.lt(upperGasLimitBn)) return bnToHex(bufferedGasLimitBn);\n    // otherwise use blockGasLimit\n    return bnToHex(upperGasLimitBn);\n  }\n\n  private async determineTransactionCategory(txParameters: TransactionParams & { gas?: string }): Promise<{\n    transactionCategory: TxType | null;\n    code?: string;\n  }> {\n    const { data, to } = txParameters;\n    let code = \"\";\n\n    let txCategory: TxType | null;\n\n    if (data && !to) {\n      txCategory = TRANSACTION_TYPES.DEPLOY_CONTRACT;\n    } else {\n      try {\n        code = (await this.providerProxy.request<[AddressLike, string], string>({ method: \"eth_getCode\", params: [to, \"latest\"] })) as string;\n      } catch (error) {\n        log.warn(error);\n      }\n      const codeIsEmpty = !code || code === \"0x\" || code === \"0x0\";\n\n      txCategory = codeIsEmpty ? TRANSACTION_TYPES.SENT_ETHER : TRANSACTION_TYPES.CONTRACT_INTERACTION;\n    }\n\n    return { transactionCategory: txCategory, code };\n  }\n\n  private async getDefaultGasLimit(txParams: TransactionParams & { gas?: string }): Promise<string> {\n    const { transactionCategory } = await this.determineTransactionCategory({ ...txParams });\n\n    if (txParams.gas) {\n      return txParams.gas;\n    }\n\n    if (txParams.to && transactionCategory === TRANSACTION_TYPES.SENT_ETHER) {\n      // if there's data in the params, but there's no contract code, it's not a valid transaction\n      if (txParams.data) {\n        throw Error(\"TxGasUtil - Trying to call a function on a non-contract address\");\n      }\n\n      const TWENTY_ONE_THOUSAND = 21_000;\n\n      // This is a standard ether simple send, gas requirement is exactly 21k\n      return addHexPrefix(TWENTY_ONE_THOUSAND.toString(16));\n    }\n\n    const { blockGasLimit, estimatedGasHex } = await this.analyzeGasUsage(txParams);\n\n    // add additional gas buffer to our estimation for safety\n    const gasLimit = this.addGasBuffer(addHexPrefix(estimatedGasHex), blockGasLimit as string);\n    return gasLimit;\n  }\n}\n","import { providerErrors, rpcErrors } from \"@metamask/rpc-errors\";\nimport { JRPCEngine, JRPCMiddleware, providerFromEngine } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\n\nimport { createAccountMiddleware, createChainSwitchMiddleware, createEthMiddleware } from \"../../rpc/ethRpcMiddlewares\";\nimport { AddEthereumChainParameter, IAccountHandlers, IChainSwitchHandlers } from \"../../rpc/interfaces\";\nimport { createJsonRpcClient } from \"../../rpc/jrpcClient\";\nimport { getProviderHandlers } from \"./ethPrivatekeyUtils\";\nimport { TransactionFormatter } from \"./TransactionFormatter\";\n\nexport interface EthereumPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\n\nexport interface EthereumPrivKeyProviderState extends BaseProviderState {\n  privateKey?: string;\n}\n\nexport class EthereumPrivateKeyProvider extends BaseProvider<BaseProviderConfig, EthereumPrivKeyProviderState, string> {\n  constructor({ config, state }: { config: EthereumPrivKeyProviderConfig; state?: EthereumPrivKeyProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.EIP155 } }, state });\n  }\n\n  public static getProviderInstance = async (params: {\n    privKey: string;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n  }): Promise<EthereumPrivateKeyProvider> => {\n    const providerFactory = new EthereumPrivateKeyProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.state.privateKey)\n      throw providerErrors.custom({ message: \"Private key is not found in state, plz pass it in constructor state param\", code: 4902 });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(privKey: string): Promise<void> {\n    const txFormatter = new TransactionFormatter({\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this),\n    });\n    const providerHandlers = getProviderHandlers({\n      txFormatter,\n      privKey,\n      getProviderEngineProxy: this.getProviderEngineProxy.bind(this),\n    });\n    const ethMiddleware = createEthMiddleware(providerHandlers);\n    const chainSwitchMiddleware = this.getChainSwitchMiddleware();\n    const engine = new JRPCEngine();\n    // Not a partial anymore because of checks in ctor\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(ethMiddleware);\n    engine.push(chainSwitchMiddleware);\n    engine.push(this.getAccountMiddleware());\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await txFormatter.init();\n    await this.lookupNetwork();\n  }\n\n  public async updateAccount(params: { privateKey: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw providerErrors.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const existingKey = await this._providerEngineProxy.request<never, string>({ method: \"eth_private_key\" });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request<never, string[]>({ method: \"eth_accounts\" }),\n      });\n    }\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw providerErrors.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    this.configure({ chainConfig });\n    const privKey = await this._providerEngineProxy.request<never, string>({ method: \"eth_private_key\" });\n    await this.setupProvider(privKey);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this._providerEngineProxy) throw providerErrors.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n    if (!chainId) throw rpcErrors.invalidParams(\"chainId is required while lookupNetwork\");\n    const network = await this._providerEngineProxy.request<[], string>({\n      method: \"net_version\",\n      params: [],\n    });\n\n    if (parseInt(chainId, 16) !== parseInt(network, 10)) throw providerErrors.chainDisconnected(`Invalid network, net_version is: ${network}`);\n    if (this.state.chainId !== chainId) {\n      this.emit(\"chainChanged\", chainId);\n      this.emit(\"connect\", { chainId });\n    }\n    this.update({ chainId });\n    return network;\n  }\n\n  private getChainSwitchMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const chainSwitchHandlers: IChainSwitchHandlers = {\n      addChain: async (params: AddEthereumChainParameter): Promise<void> => {\n        const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = params;\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.EIP155,\n          chainId,\n          ticker: nativeCurrency?.symbol || \"ETH\",\n          tickerName: nativeCurrency?.name || \"Ether\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: blockExplorerUrls?.[0] || \"\",\n          decimals: nativeCurrency?.decimals || 18,\n        });\n      },\n      switchChain: async (params: { chainId: string }): Promise<void> => {\n        const { chainId } = params;\n        await this.switchChain({ chainId });\n      },\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  private getAccountMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const accountHandlers: IAccountHandlers = {\n      updatePrivatekey: async (params: { privateKey: string }): Promise<void> => {\n        const { privateKey } = params;\n        await this.updateAccount({ privateKey });\n      },\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n","export * from \"./EthereumPrivateKeyProvider\";\nexport * from \"./ethPrivatekeyUtils\";\nexport * from \"./TransactionFormatter\";\n","export * from \"./injectedProviders\";\nexport * from \"./privateKeyProviders\";\n","export * from \"./providers\";\n"],"names":["rpcErrors","createAsyncMiddleware","createScaffoldMiddleware","resemblesAddress","str","length","createWalletMiddleware","_ref","getAccounts","getPrivateKey","processDecryptMessage","processEncryptionPublicKey","processEthSignMessage","processPersonalMessage","processTransaction","processSignTransaction","processTypedMessage","processTypedMessageV3","processTypedMessageV4","Error","validateAndNormalizeKeyholder","address","req","accounts","normalizedAccounts","map","_address","toLowerCase","normalizedAddress","includes","invalidParams","message","lookupAccounts","res","result","lookupDefaultAccount","sendTransaction","methodNotSupported","txParams","params","from","signTransaction","ethSign","extraParams","msgParams","_objectSpread","data","signTypedData","version","signTypedDataV3","signTypedDataV4","personalSign","firstParam","secondParam","warning","encryptionPublicKey","decryptMessage","ciphertext","fetchPrivateKey","eth_accounts","eth_private_key","private_key","eth_coinbase","eth_sendTransaction","eth_signTransaction","eth_sign","eth_signTypedData","eth_signTypedData_v3","eth_signTypedData_v4","personal_sign","eth_getEncryptionPublicKey","eth_decrypt","mergeMiddleware","createEthMiddleware","providerHandlers","ethMiddleware","eth_syncing","createChainSwitchMiddleware","addChain","switchChain","addNewChain","_req$params","chainParams","undefined","chainId","rpcUrls","nativeCurrency","updateChain","_req$params2","wallet_addEthereumChain","wallet_switchEthereumChain","createAccountMiddleware","_ref2","updatePrivatekey","updateAccount","_req$params3","accountParams","privateKey","wallet_updateAccount","createFetchMiddleware","createChainIdMiddleware","next","end","method","createProviderConfigMiddleware","providerConfig","createJsonRpcClient","rpcTarget","fetchMiddleware","networkMiddleware","providerErrors","getAccountsFromNamespaces","parseAccountId","getLastActiveSession","signClient","session","lastKeyIndex","keys","get","sendJrpcRequest","disconnected","request","topic","namespaces","Set","add","getProviderHandlers","connector","_","methodRes","JRPCEngine","providerFromEngine","getChainsFromNamespaces","parseChainId","CHAIN_NAMESPACES","getChainConfig","log","WalletLoginError","BaseProvider","WalletConnectV2Provider","constructor","config","state","chainConfig","chainNamespace","EIP155","skipLookupNetwork","_defineProperty","enable","custom","code","setupProvider","_providerEngineProxy","onConnectorStateUpdate","setupEngine","currentChainConfig","configure","lookupNetwork","newChainId","update","emit","numChainId","parseInt","jrpcRes","chainSwitchMiddleware","getChainSwitchMiddleware","engine","push","provider","updateProviderEngineProxy","chainSwitchHandlers","chainName","blockExplorerUrls","ticker","symbol","tickerName","name","displayName","blockExplorer","decimals","connectedTopic","_this$connector","notConnectedError","_this$connector$sessi","checkIfChainIdAllowed","sessionData","allChains","chainAllowed","chain","parsedId","Number","reference","checkIfAccountAllowed","allAccounts","accountAllowed","account","_parsedAccount$addres","parsedAccount","events","on","payload","debug","event","connectedChainId","rpcUrl","connectedHexChainId","toString","maybeConfig","_class","providerFactory","stripHexPrefix","BigNumber","BIG_NUMBER_WEI_MULTIPLIER","BIG_NUMBER_GWEI_MULTIPLIER","BIG_NUMBER_ETH_MULTIPLIER","toBigNumber","hex","n","dec","toNormalizedDenomination","WEI","bigNumber","div","GWEI","ETH","toSpecifiedDenomination","times","dp","ROUND_HALF_UP","baseChange","converter","value","fromNumericBase","fromDenomination","toNumericBase","toDenomination","numberOfDecimals","convertedValue","ROUND_HALF_DOWN","conversionUtil","decGWEIToHexWEI","decGWEI","hexWEIToDecGWEI","isValidAddress","SignTypedDataVersion","TYPED_MESSAGE_SCHEMA","typedSignatureHash","isHexStrict","assert","jsonschema","normalizeGWEIDecimalNumbers","numberAsWEIHex","numberAsGWEI","fetchEip1159GasEstimates","url","estimates","normalizedEstimates","estimatedBaseFee","low","suggestedMaxPriorityFeePerGas","suggestedMaxFeePerGas","medium","high","fetchLegacyGasPriceEstimates","referrer","referrerPolicy","mode","SafeGasPrice","ProposeGasPrice","FastGasPrice","validateTypedMessageParams","parameters","activeChainId","ok","V1","doesNotThrow","JSON","parse","Array","isArray","V3","V4","_typedData$domain","typedData","primaryType","types","validation","validate","properties","strictEqual","errors","domain","isNaN","fail","error","invalidInput","TransactionFactory","privateToAddress","decrypt","getEncryptionPublicKey","signMessage","signTx","privKey","txFormatter","finalTxParams","formatTransaction","common","getCommonConfiguration","unsignedEthTx","fromTxData","signedTx","sign","Buffer","serialize","getProviderEngineProxy","providerEngineProxy","input","txHash","concat","rawMessageSig","privKeyBuffer","sig","finalChainId","info","stripped","buff","decrypted","encryptedData","addHexPrefix","BN","bnLessThan","a","b","lt","bnToHex","inputBn","hexToBn","inputHex","isBN","BnMultiplyByFraction","targetBN","numerator","denominator","numberBN","denomBN","mul","LegacyGasAPIEndpoint","EIP1559APIEndpoint","TRANSACTION_ENVELOPE_TYPES","LEGACY","ACCESS_LIST","FEE_MARKET","TRANSACTION_TYPES","SENT_ETHER","CONTRACT_INTERACTION","DEPLOY_CONTRACT","STANDARD_TRANSACTION","GAS_ESTIMATE_TYPES","ETH_GASPRICE","NONE","Common","Hardfork","TransactionFormatter","providerProxy","init","isEIP1559Compatible","getEIP1559Compatibility","hardfork","Paris","Berlin","customChainParams","networkId","defaultHardfork","clonedTxParams","nonce","gasPrice","maxFeePerGas","maxPriorityFeePerGas","gasLimit","gas","defaultGasLimit","getDefaultGasLimit","defaultGasPrice","defaultMaxFeePerGas","defaultMaxPriorityFeePerGas","getDefaultGasFees","type","fetchEthGasPriceEstimate","fetchGasEstimatesViaEthFeeHistory","noOfBlocks","newestBlock","percentileValues","feeHistory","finalBaseFeePerGas","baseFeePerGas","priorityFeeCalcs","reward","reduce","acc","curr","slow","plus","average","fast","maxWaitTimeEstimate","minWaitTimeEstimate","latestBlock","supportsEIP1559","fetchGasFeeEstimateData","isLegacyGasAPICompatible","gasData","API_SUPPORTED_CHAINIDS","has","replace","gasFeeEstimates","gasEstimateType","e","estimateTxGas","txMeta","analyzeGasUsage","block","blockGasLimitBN","saferGasLimitBN","estimatedGasHex","warn","blockGasLimit","addGasBuffer","initialGasLimitHex","blockGasLimitHex","multiplier","arguments","initialGasLimitBn","blockGasLimitBn","upperGasLimitBn","muln","bufferedGasLimitBn","gt","determineTransactionCategory","txParameters","to","txCategory","codeIsEmpty","transactionCategory","TWENTY_ONE_THOUSAND","EthereumPrivateKeyProvider","bind","getAccountMiddleware","existingKey","network","chainDisconnected","accountHandlers"],"sourceRoot":""}