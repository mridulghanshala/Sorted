{"version":3,"file":"baseProvider.esm.js","sources":["../src/baseProvider.ts","../src/jrpcClient.ts","../src/CommonJRPCProvider.ts","../src/commonPrivateKeyProvider.ts","../src/utils.ts"],"sourcesContent":["import { rpcErrors } from \"@metamask/rpc-errors\";\nimport { BaseConfig, BaseController, BaseState, createEventEmitterProxy } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest, JRPCResponse, SendCallBack } from \"@toruslabs/openlogin-jrpc\";\nimport {\n  CustomChainConfig,\n  IBaseProvider,\n  Maybe,\n  RequestArguments,\n  SafeEventEmitterProvider,\n  WalletInitializationError,\n  WalletProviderError,\n} from \"@web3auth/base\";\n\nexport interface BaseProviderState extends BaseState {\n  chainId: string;\n}\n\nexport interface BaseProviderConfig extends BaseConfig {\n  chainConfig: Partial<CustomChainConfig>;\n  networks?: Record<string, CustomChainConfig>;\n  skipLookupNetwork?: boolean;\n}\n\nexport abstract class BaseProvider<C extends BaseProviderConfig, S extends BaseProviderState, P>\n  extends BaseController<C, S>\n  implements IBaseProvider<P>\n{\n  // should be Assigned in setupProvider\n  public _providerEngineProxy: SafeEventEmitterProvider | null = null;\n\n  constructor({ config, state }: { config: C; state?: S }) {\n    super({ config, state });\n    if (!config.chainConfig) throw WalletInitializationError.invalidProviderConfigError(\"Please provide chainConfig\");\n    if (!config.chainConfig.chainId) throw WalletInitializationError.invalidProviderConfigError(\"Please provide chainId inside chainConfig\");\n    if (!config.chainConfig.rpcTarget) throw WalletInitializationError.invalidProviderConfigError(\"Please provide rpcTarget inside chainConfig\");\n    this.defaultState = {\n      chainId: \"loading\",\n    } as S;\n    this.defaultConfig = {\n      chainConfig: config.chainConfig,\n      networks: { [config.chainConfig.chainId]: config.chainConfig },\n    } as C;\n    super.initialize();\n  }\n\n  get currentChainConfig(): Partial<CustomChainConfig> {\n    return this.config.chainConfig;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this._providerEngineProxy;\n  }\n\n  get chainId(): string {\n    return this.state.chainId;\n  }\n\n  set provider(_) {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  async request<T, R>(args: RequestArguments<T>): Promise<Maybe<R>> {\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw rpcErrors.invalidRequest({\n        message: WalletProviderError.invalidRequestArgs().message,\n        data: { ...(args || {}), cause: WalletProviderError.invalidRequestArgs().message },\n      });\n    }\n\n    const { method, params } = args;\n\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw rpcErrors.invalidRequest({\n        message: WalletProviderError.invalidRequestMethod().message,\n        data: { ...(args || {}), cause: WalletProviderError.invalidRequestMethod().message },\n      });\n    }\n\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw rpcErrors.invalidRequest({\n        message: WalletProviderError.invalidRequestParams().message,\n        data: { ...(args || {}), cause: WalletProviderError.invalidRequestParams().message },\n      });\n    }\n\n    return this.provider?.request(args);\n  }\n\n  sendAsync<T, U>(req: JRPCRequest<T>, callback: SendCallBack<JRPCResponse<U>>): void;\n  sendAsync<T, U>(req: JRPCRequest<T>): Promise<JRPCResponse<U>>;\n\n  sendAsync<T, U>(req: JRPCRequest<T>, callback?: SendCallBack<JRPCResponse<U>>): void | Promise<JRPCResponse<U>> {\n    if (callback) return this.send(req, callback);\n    return this.request(req);\n  }\n\n  send<T, U>(req: JRPCRequest<T>, callback: SendCallBack<JRPCResponse<U>>): void {\n    this.request(req)\n      .then((res) => callback(null, { result: res } as JRPCResponse<U>))\n      .catch((err) => callback(err, null));\n  }\n\n  public addChain(chainConfig: CustomChainConfig): void {\n    if (!chainConfig.chainId) throw rpcErrors.invalidParams(\"chainId is required\");\n    if (!chainConfig.rpcTarget) throw rpcErrors.invalidParams(\"chainId is required\");\n    this.configure({\n      networks: { ...this.config.networks, [chainConfig.chainId]: chainConfig },\n    } as C);\n  }\n\n  public getChainConfig(chainId: string): CustomChainConfig | null {\n    const chainConfig = this.config.networks?.[chainId];\n    if (!chainConfig) throw rpcErrors.invalidRequest(`Chain ${chainId} is not supported, please add chainConfig for it`);\n    return chainConfig;\n  }\n\n  public updateProviderEngineProxy(provider: SafeEventEmitterProvider): void {\n    if (this._providerEngineProxy) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this._providerEngineProxy as any).setTarget(provider);\n    } else {\n      this._providerEngineProxy = createEventEmitterProxy<SafeEventEmitterProvider>(provider);\n    }\n  }\n\n  protected getProviderEngineProxy(): SafeEventEmitterProvider | null {\n    return this._providerEngineProxy;\n  }\n\n  abstract setupProvider(provider: P): Promise<void>;\n\n  abstract switchChain(params: { chainId: string }): Promise<void>;\n\n  protected abstract lookupNetwork(provider?: P): Promise<string | void>;\n}\n","import { createFetchMiddleware } from \"@toruslabs/base-controllers\";\nimport {\n  Block,\n  JRPCEngineEndCallback,\n  JRPCEngineNextCallback,\n  JRPCMiddleware,\n  JRPCRequest,\n  JRPCResponse,\n  mergeMiddleware,\n} from \"@toruslabs/openlogin-jrpc\";\nimport type { CustomChainConfig } from \"@web3auth/base\";\n\nexport function createChainIdMiddleware(chainId: string): JRPCMiddleware<unknown, string> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<string>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createProviderConfigMiddleware(providerConfig: CustomChainConfig): JRPCMiddleware<unknown, CustomChainConfig> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<CustomChainConfig>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createJsonRpcClient(providerConfig: CustomChainConfig): {\n  networkMiddleware: JRPCMiddleware<unknown, unknown>;\n  fetchMiddleware: JRPCMiddleware<string[], Block>;\n} {\n  const { chainId, rpcTarget } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({ rpcTarget });\n  const networkMiddleware = mergeMiddleware([\n    createChainIdMiddleware(chainId) as JRPCMiddleware<unknown, unknown>,\n    createProviderConfigMiddleware(providerConfig) as JRPCMiddleware<unknown, unknown>,\n    fetchMiddleware as JRPCMiddleware<unknown, unknown>,\n  ]);\n  return { networkMiddleware, fetchMiddleware };\n}\n","import { providerErrors } from \"@metamask/rpc-errors\";\nimport { createEventEmitterProxy } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, providerFromEngine } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\n\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"./baseProvider\";\nimport { createJsonRpcClient } from \"./jrpcClient\";\n\nexport type CommonJRPCProviderConfig = BaseProviderConfig;\n\nexport type CommonJRPCProviderState = BaseProviderState;\n\nexport class CommonJRPCProvider extends BaseProvider<CommonJRPCProviderConfig, CommonJRPCProviderState, never> {\n  constructor({ config, state }: { config: CommonJRPCProviderConfig; state?: CommonJRPCProviderState }) {\n    super({ config, state });\n  }\n\n  public static getProviderInstance = async (params: { chainConfig: CustomChainConfig }): Promise<CommonJRPCProvider> => {\n    const providerFactory = new CommonJRPCProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider();\n    return providerFactory;\n  };\n\n  public async setupProvider(): Promise<void> {\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    const engine = new JRPCEngine();\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    const newChainId = this.config.chainConfig.chainId;\n    if (this.state.chainId !== newChainId) {\n      this.emit(\"chainChanged\", newChainId);\n      this.emit(\"connect\", { chainId: newChainId });\n    }\n    this.update({ chainId: this.config.chainConfig.chainId });\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw providerErrors.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    this.configure({ chainConfig });\n    await this.setupProvider();\n  }\n\n  public updateProviderEngineProxy(provider: SafeEventEmitterProvider) {\n    if (this._providerEngineProxy) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this._providerEngineProxy as any).setTarget(provider);\n    } else {\n      this._providerEngineProxy = createEventEmitterProxy<SafeEventEmitterProvider>(provider);\n    }\n  }\n\n  protected getProviderEngineProxy(): SafeEventEmitterProvider | null {\n    return this._providerEngineProxy;\n  }\n\n  protected lookupNetwork(): Promise<string | void> {\n    throw new Error(\"Method not implemented.\");\n  }\n}\n","import { createEventEmitterProxy } from \"@toruslabs/base-controllers\";\nimport {\n  createAsyncMiddleware,\n  createScaffoldMiddleware,\n  JRPCEngine,\n  JRPCMiddleware,\n  JRPCRequest,\n  JRPCResponse,\n  providerFromEngine,\n} from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, IBaseProvider, SafeEventEmitterProvider } from \"@web3auth/base\";\n\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"./baseProvider\";\n\nexport interface CommonPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\n\nexport interface CommonPrivKeyProviderState extends BaseProviderState {\n  privateKey?: string;\n}\n\nexport class CommonPrivateKeyProvider extends BaseProvider<BaseProviderConfig, CommonPrivKeyProviderState, string> implements IBaseProvider<string> {\n  // should be Assigned in setupProvider\n  public _providerEngineProxy: SafeEventEmitterProvider | null = null;\n\n  constructor({ config, state }: { config: CommonPrivKeyProviderConfig; state?: CommonPrivKeyProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.OTHER } }, state });\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this._providerEngineProxy;\n  }\n\n  set provider(_) {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  public static getProviderInstance = async (params: {\n    privKey: string;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n  }): Promise<CommonPrivateKeyProvider> => {\n    const providerFactory = new CommonPrivateKeyProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n  };\n\n  addChain(_: CustomChainConfig): void {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  public async setupProvider(privKey: string): Promise<void> {\n    const privKeyMiddleware = this.getPrivKeyMiddleware(privKey);\n    const engine = new JRPCEngine();\n    engine.push(privKeyMiddleware);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n  }\n\n  public updateProviderEngineProxy(provider: SafeEventEmitterProvider) {\n    if (this._providerEngineProxy) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this._providerEngineProxy as any).setTarget(provider);\n    } else {\n      this._providerEngineProxy = createEventEmitterProxy<SafeEventEmitterProvider>(provider);\n    }\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    return Promise.resolve();\n  }\n\n  protected getProviderEngineProxy(): SafeEventEmitterProvider | null {\n    return this._providerEngineProxy;\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    return Promise.resolve(\"\");\n  }\n\n  private getPrivKeyMiddleware(privKey: string): JRPCMiddleware<unknown, unknown> {\n    const middleware = {\n      getPrivatekey: async (): Promise<string> => {\n        return privKey;\n      },\n    };\n    return this.createPrivKeyMiddleware(middleware);\n  }\n\n  private createPrivKeyMiddleware({ getPrivatekey }: { getPrivatekey: () => Promise<string> }): JRPCMiddleware<unknown, unknown> {\n    async function getPrivatekeyHandler(_: JRPCRequest<{ privateKey: string }[]>, res: JRPCResponse<unknown>): Promise<void> {\n      res.result = await getPrivatekey();\n    }\n\n    return createScaffoldMiddleware({\n      private_key: createAsyncMiddleware(getPrivatekeyHandler) as JRPCMiddleware<unknown, unknown>,\n    });\n  }\n}\n","import getCreateRandomId from \"json-rpc-random-id\";\nexport const createRandomId = getCreateRandomId();\n"],"names":["BaseProvider","BaseController","constructor","_ref","config","state","_defineProperty","chainConfig","WalletInitializationError","invalidProviderConfigError","chainId","rpcTarget","defaultState","defaultConfig","networks","initialize","currentChainConfig","provider","_providerEngineProxy","_","Error","request","args","_this$provider","Array","isArray","rpcErrors","invalidRequest","message","WalletProviderError","invalidRequestArgs","data","_objectSpread","cause","method","params","length","invalidRequestMethod","undefined","invalidRequestParams","sendAsync","req","callback","send","then","res","result","catch","err","addChain","invalidParams","configure","getChainConfig","_this$config$networks","updateProviderEngineProxy","setTarget","createEventEmitterProxy","getProviderEngineProxy","createChainIdMiddleware","next","end","createProviderConfigMiddleware","providerConfig","createJsonRpcClient","fetchMiddleware","createFetchMiddleware","networkMiddleware","mergeMiddleware","CommonJRPCProvider","setupProvider","engine","JRPCEngine","push","providerFromEngine","newChainId","emit","update","switchChain","providerErrors","custom","code","lookupNetwork","_class","providerFactory","CommonPrivateKeyProvider","chainNamespace","CHAIN_NAMESPACES","OTHER","privKey","privKeyMiddleware","getPrivKeyMiddleware","Promise","resolve","middleware","getPrivatekey","createPrivKeyMiddleware","_ref2","getPrivatekeyHandler","createScaffoldMiddleware","private_key","createAsyncMiddleware","createRandomId","getCreateRandomId"],"mappings":"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"}